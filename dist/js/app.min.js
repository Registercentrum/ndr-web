"use strict";angular.module("ndrApp",["ui.router","angular-loading-bar","restangular","selectize","ngSanitize","ui.bootstrap","vr.directives.slider","truncate","angulartics","angulartics.google.analytics"]).config(["datepickerPopupConfig",function(datepickerPopupConfig){datepickerPopupConfig.currentText="Idag",datepickerPopupConfig.clearText="Rensa",datepickerPopupConfig.closeText="StÃ¤ng",datepickerPopupConfig.toggleWeeksText="Veckoformat"}]).run(function($state,$rootScope,accountService,cookieFactory){$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){console.log("NAVIGATING TO",toState),$rootScope.$state=toState.name}),$rootScope.is=function(name){return $state.is(name)},$rootScope.$on("$viewContentLoaded",function(){var interval=setInterval(function(){"complete"==document.readyState&&(window.scrollTo(0,0),clearInterval(interval),$("input").placeholder(),jQuery(".u-equalHeight").matchHeight(!0),jQuery(".Intro--equalHeights").matchHeight(!1),jQuery(window).width()>=700&&(jQuery(".InfoGrid-equalHeightsGroup1").matchHeight(!1),jQuery(".InfoGrid-equalHeightsGroup2").matchHeight(!1),jQuery(".InfoGrid-equalHeightsGroup3").matchHeight(!1),jQuery(".InfoGrid-equalHeightsGroup4").matchHeight(!1)))},100)})}).config(["$stateProvider","$urlRouterProvider","$locationProvider",function($stateProvider,$urlRouterProvider,$locationProvider){$urlRouterProvider.otherwise("/"),$locationProvider.hashPrefix(""),$stateProvider.state("main",{abstract:!0,template:"<div ui-view></div>",resolve:{config:function(dataService){return dataService.bootstrap()}}}).state("main.home",{controller:"HomeController",url:"/",templateUrl:"src/pages/Home/home.html?v=3"}).state("main.guidelines",{url:"/guidelines",controller:"GuidelinesController",templateUrl:"src/pages/Guidelines/guidelines.html?v=3",resolve:{}}).state("main.accountAbout",{url:"/konto",templateUrl:"src/pages/About/aboutAccount.html?v=3",resolve:{}}).state("main.login",{url:"/login?direct",controller:"LoginController",templateUrl:"src/pages/Login/login.html?v=3",resolve:{}}).state("main.currentUser",{url:"/currentuser",controller:"CurrentUserController",templateUrl:"src/pages/CurrentUser/currentUser.html?v=3",resolve:{}}).state("main.english",{url:"/english",templateUrl:"src/pages/Language/english.html?v=3",resolve:{}}).state("main.patient",{url:"/for-dig-med-diabetes",controller:"FilterUnitsController",templateUrl:"src/pages/Patient/patient.html?v=3"}).state("main.contribute",{url:"/du-bidrar",templateUrl:"src/pages/Patient/contribute.html?v=3"}).state("main.statistics",{url:"/statistik",templateUrl:"src/pages/Statistics/statistics.html?v=3",controller:"StatisticsController"}).state("main.statisticsAbout",{url:"/om-statistiken",templateUrl:"src/pages/Statistics/statisticsAbout.html?v=3",controller:"StatisticsAboutController"}).state("main.annualReport",{url:"/arsrapport",templateUrl:"src/pages/Statistics/annualReport.html?v=3"}).state("main.compare1",{url:"/knappen1",templateUrl:"src/pages/Compare/compare.html?v=3"}).state("main.compare",{url:"/knappen",templateUrl:"src/pages/Knappen2/knappen2.html?v=3",controller:"Knappen2Controller"}).state("main.compareSearch",{url:"/knappen/:s",templateUrl:"src/pages/Knappen2/knappen2.html?v=3",controller:"Knappen2Controller"}).state("main.risk",{url:"/risk",templateUrl:"src/pages/Risk/risk.html?v=3"}).state("main.profiles",{url:"/profil",templateUrl:"src/pages/Profiles/profiles.html?v=3"}).state("main.profiles.county",{controller:"CountyController",url:"/landsting/:id",templateUrl:"src/pages/Profiles/profiles.county.html?v=3"}).state("main.profiles.unit",{controller:"UnitController",url:"/enhet/:id",templateUrl:"src/pages/Profiles/profiles.unit.html?v=3"}).state("main.research",{url:"/forskning",templateUrl:"src/pages/Research/research.html?v=3",controller:"ResearchController"}).state("main.researchItem",{url:"/forskning/:id",templateUrl:"src/components/Publication/Publication.html?v=3",controller:"PublicationController"}).state("news",{url:"/nyheter",templateUrl:"src/pages/News/news.html?v=3",controller:"NewsController"}).state("newsItem",{url:"/nyheter/:id",templateUrl:"src/components/Article/article.html",controller:"NewsItemController"}).state("main.improvement",{url:"/forbattringsprojekt",templateUrl:"src/pages/Improvement/improvement.html?v=3"}).state("main.about",{url:"/om-ndr",templateUrl:"src/pages/About/about.html?v=3",controller:"AboutController"}).state("main.aboutSwediabkids",{url:"/om-swediabkids",templateUrl:"src/pages/About/aboutSwediabkids.html?v=3",controller:"AboutController"}).state("main.forms",{url:"/blanketter",templateUrl:"src/pages/Forms/forms.html?v=3"}).state("main.press",{url:"/press",templateUrl:"src/pages/Press/press.html?v=3"}).state("main.prom",{url:"/prom",templateUrl:"src/pages/Prom/prom.html?v=3"}).state("main.subject",{url:"/subjekt",templateUrl:"src/pages/Subject/subject.html?v=3",controller:"SubjectController",resolve:{config:function(accountService){return accountService.bootstrap("subject")}}}).state("main.subject.home",{url:"/hem",templateUrl:"src/pages/Subject/home.html?v=3",controller:"SubjectHomeController"}).state("main.subject.surveys",{url:"/enkater",templateUrl:"src/pages/Subject/Surveys/surveys.html?v=3",controller:"SubjectSurveysController"}).state("main.subject.surveys.info",{url:"/info",templateUrl:"src/pages/Subject/Surveys/info.html?v=3"}).state("main.subject.surveys.survey",{url:"/besvara/?inviteID",templateUrl:"src/pages/Subject/Surveys/survey.html?v=3",controller:"SubjectSurveyController"}).state("main.subject.profile",{url:"/profil",params:{tab:null},templateUrl:"src/pages/Subject/Profile/profile.html?v=5",controller:"SubjectProfileController"}).state("main.account",{url:"/inloggad",templateUrl:"src/pages/Account/account.html?v=3",controller:"AccountController",resolve:{config:function(accountService){return accountService.bootstrap()}}}).state("main.account.home",{url:"/hem",templateUrl:"src/pages/Account/home.html?v=3",controller:"AccountHomeController"}).state("main.account.survey",{url:"/diabetesenkaten",params:{restoreFilters:""},templateUrl:"src/pages/Account/Survey/survey.html?v=3",controller:"SurveyController"}).state("surveyPrint",{url:"/skriv-inbjudan?unitName?socialNumber?key",templateUrl:"src/pages/Account/SurveyPrint/surveyPrint.html?v=3",controller:"SurveyPrintController"}).state("main.account.report",{url:"/rapportera",templateUrl:"src/pages/Account/Report/report.html?v=3",controller:"ReportController"}).state("main.account.reportone",{url:"/rapportera/:patientID",templateUrl:"src/pages/Account/Report/report.html?v=3",controller:"ReportController"}).state("main.account.reportoneview",{url:"/rapportera/:patientID/:view",templateUrl:"src/pages/Account/Report/report.html?v=3",controller:"ReportController"}).state("main.reportPROM",{url:"/rapporteraPROM/:patientID",templateUrl:"src/pages/Account/Report/reportPROM.html?v=3",controller:"ReportPROMController"}).state("main.account.patients",{url:"/patienter",templateUrl:"src/pages/Account/Patients/patients.html?v=3",controller:"PatientsController",params:{restoreFilters:""}}).state("main.account.patients2",{url:"/patienter2",templateUrl:"src/pages/Account/Patients/patients2.html?v=3",controller:"Patients2Controller"}).state("main.account.patient",{url:"/patient/?patientID",templateUrl:"src/pages/Account/Patients/patient_profile.html?v=3",controller:"PatientController",params:{backToSearchVisible:"",backToSurveysVisible:""}}).state("main.account.patientPrint",{url:"/patient/print/:patientID",templateUrl:"src/pages/Account/Patients/patient_print.html?v=4",controller:"PatientPrintController"}).state("page",{url:"/page/:id",templateUrl:function(stateParams){return"templates/page/"+stateParams.id+".html"}})}]),angular.module("ndrApp").controller("AppController",["accountService",function(accountService){accountService.bootstrap()}]),angular.module("ndrApp").controller("GuidelinesController",["$scope",function($scope){$scope.myModel=1,$scope.myOptions=[{id:1,title:"Spectrometer"},{id:2,title:"Star Chart"},{id:3,title:"Laser Pointer"}],$scope.config={create:!0,valueField:"id",labelField:"title",delimiter:"|",maxItems:1,placeholder:"Pick something"},$scope.today=function(){$scope.dt=new Date},$scope.today(),$scope.clear=function(){$scope.dt=null},$scope.disabled=function(date,mode){return"day"===mode&&(0===date.getDay()||6===date.getDay())},$scope.toggleMin=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.toggleMin(),$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0]}]),angular.module("ndrApp").service("dataService",["$q","$http","$window","Restangular","accountService","APIconfigService",function($q,$http,$window,Restangular,accountService,APIconfigService){var self=this;this.data={units:[],counties:[],indicators:[],indicators2017:[],preparedGeoList:[],subjectInfo:{},promFormMeta:null,attributesLists:null,koo:null,kas:null,homeActiveTab:1,promAdmFilter:null,optionalQuestions:null,metafields:null,domains:null},Restangular.setBaseUrl(APIconfigService.baseURL),Restangular.setDefaultRequestParams({APIKey:APIconfigService.APIKey}),this.setValue=function(key,val){this.data[key]=val},this.getValue=function(key){return this.data[key]};var endpoints={indicator:Restangular.one("indicator"),indicator2017:Restangular.one("indicator2017"),indicatorresult:Restangular.one("indicatorresult"),contactAttributes:Restangular.one("ContactAttribute"),units:Restangular.all("unit"),counties:Restangular.all("county"),news:Restangular.all("news"),publications:Restangular.all("publication"),contacts:Restangular.all("Contact"),subject:Restangular.all("subject"),promForm:Restangular.all("PROMForm"),koo:Restangular.all("KOO"),kas:Restangular.all("KAS")};this.projects=[{name:"IQV",units:[26,718,1302,1071,1174,831,1200,1130,985,1221,1004,1199,1260,1254,1222,1231,1184,1292,1006,1056,910,1325,1193,1363,696,1229,1265,1082,1270,1376]}],this.getContactFields=function(){return this.data.metafields?this.data.metafields.filter(function(m){return null==m.formID&&!m.isChildcareExclusive}):null},this.optionalQuestions=function(){return this.data.metafields?this.data.metafields.filter(function(m){return m.isOptional}):null},this.getFormFields=function(formID,unitType){return this.data.metafields?this.data.metafields.filter(function(m){var ret=!0;if(formID&&(ret=m.formID===formID),unitType){ret=1===unitType||2===unitType?ret&&!m.isChildcareExclusive:ret&&!m.isAdultcareExclusive}return ret}):null},this.getFieldByKey=function(keys){for(var ret=[],i=0;i<this.data.metafields.length&&(-1!=keys.indexOf(this.data.metafields[i].columnName)&&ret.push(this.data.metafields[i]),ret.length!=keys.length);i++);return ret},this.getOptionalFields=function(){return this.data.metafields?this.data.metafields.filter(function(m){return m.isOptional}):null},this.getUserProjects=function(){var unitID=accountService.accountModel.activeAccount.unit.unitID;return _.filter(this.projects,function(d){return-1!==d.units.indexOf(unitID)})},this.isInProject=function(name){var userProjects=this.getUserProjects();return _.filter(userProjects,function(d){return d.name.toLowerCase()===name.toLowerCase()}).length>0},this.getFilterFields=function(filter,unitTypeID){var filtered=[],data=this.getFormFields(1,unitTypeID);return filter?(filter.include&&(filtered=filtered.concat(_.filter(data.plain(),function(d){return-1!==_.indexOf(filter.include,d.columnName)}))),filter.exclude&&(filtered=filtered.concat(_.filter(data.plain(),function(d){return-1===_.indexOf(filter.exclude,d.columnName)}))),filtered):data.plain()},this.getContactAttributes=function(filter,data){return endpoints.contactAttributes.get({AccountID:accountService.accountModel.activeAccount?accountService.accountModel.activeAccount.accountID:void 0}).then(function(data){var filtered=[];return filter?(filter.include&&(filtered=filtered.concat(_.filter(data.plain(),function(d){return-1!==_.indexOf(filter.include,d.columnName)}))),filter.exclude&&(filtered=filtered.concat(_.filter(data.plain(),function(d){return-1===_.indexOf(filter.exclude,d.columnName)}))),filtered):data.plain()}).catch(function(error){return error})},this.getSubjectById=function(id){var url=APIconfigService.baseURL+"Subject/"+id+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"GET"};return $http(query).then(function(response){return response.data}).catch(function(error){return error})},this.getSubjectBySocialNumber=function(socialNumber){var url=APIconfigService.baseURL+"Subject?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"POST",data:{socialNumber:socialNumber}};return $http(query).then(function(response){return response.data}).catch(function(error){return error})},this.deleteContact=function(id){var url=APIconfigService.baseURL+"Contact/"+id+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"DELETE"};return $http(query).then(function(response){return response.data}).catch(console.error.bind(console))},this.saveContact=function(data){var url=APIconfigService.baseURL+"Contact/"+(data.contactID||"")+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:data.contactID?"PUT":"POST",data:data};return $http(query)},this.saveContactNew=function(data){var url=APIconfigService.baseURL+"Contact/"+(data.id||"")+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:data.id?"PUT":"POST",data:data};return $http(query)},this.saveIncidence=function(data,update){var url=APIconfigService.baseURL+"Incidence/"+(update?data.subjectID:"")+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:update?"PUT":"POST",data:data};return $http(query)},this.getInvites=function(){var url=APIconfigService.baseURL+"prominvite?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"GET"};return $http(query)},this.getInvite=function(inviteID){var url=APIconfigService.baseURL+"prominvite/"+inviteID+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"GET"};return $http(query)},this.createInvite=function(data){data.unitID=accountService.accountModel.activeAccount.unit.unitID;var url=APIconfigService.baseURL+"prominvite/?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"POST",data:data};return $http(query)},this.updateInvite=function(inviteId,updatedInvite){var url=APIconfigService.baseURL+"prominvite/"+inviteId+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"PUT",data:updatedInvite};return $http(query)},this.deleteInvite=function(inviteId){var url=APIconfigService.baseURL+"prominvite/"+inviteId+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"DELETE"};return $http(query)},this.savePROM=function(data){var url=APIconfigService.baseURL+"PROM/?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"POST",data:data};return $http(query)},this.getFile=function(textfile){$http({method:"POST",url:"API/Textfile/",data:textfile}).then(function(response){var id=response.data;$window.location="API/Textfile/?id="+id},function(response){})},this.getContacts=function(query){return query=query||{},query.AccountID=accountService.accountModel.activeAccount.accountID,endpoints.contacts.getList(query).then(function(data){return data.plain()}).catch(function(error){return error})},this.getPROMFormMeta=function(){var url=APIconfigService.baseURL+"promform?APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"GET"};return this.data.promFormMeta||(this.data.promFormMeta=$http(query)),this.data.promFormMeta},this.savePROMForm=function(inviteID,data){var url=APIconfigService.baseURL+"prom/"+inviteID+"?APIKey="+APIconfigService.APIKey;accountService.accountModel.PROMSubject&&accountService.accountModel.PROMSubject.key&&(url+="&PROMKey="+accountService.accountModel.PROMSubject.key);var query={url:APIconfigService.constructUrl(url),method:"POST",data:data};return $http(query)},this.getKOO=function(callback){var query=query||{},self=this;query.APIKey=APIconfigService.APIKey,null!=this.data.koo?callback(this.data.koo):$.ajax({url:APIconfigService.constructUrl(APIconfigService.baseURL+"KOO"),data:query,type:"GET",dataType:"json",success:function(d){self.data.koo=d,callback(d)}})},this.getKAS=function(callback){var query=query||{},self=this;query.APIKey=APIconfigService.APIKey,null!=this.data.kas?callback(this.data.kas):$.ajax({url:APIconfigService.constructUrl(APIconfigService.baseURL+"KAS"),data:query,type:"GET",dataType:"json",success:function(d){self.data.kas=d,callback(d)}})},this.getUnits=function(callback){var query=query||{};query.APIKey=APIconfigService.APIKey,$.ajax({url:APIconfigService.constructUrl(APIconfigService.baseURL+"Unit"),data:query,type:"GET",dataType:"json",success:callback})},this.getPatientsStatistics=function(accountID,callback){var query=query||{};query.APIKey=APIconfigService.APIKey,query.AccountID=accountID,$.ajax({url:APIconfigService.baseURL+"CharStatistics",data:query,type:"GET",dataType:"json",success:callback})},this.getReportingStatistics=function(accountID,callback){var query=query||{};query.APIKey=APIconfigService.APIKey,query.AccountID=accountID,$.ajax({url:APIconfigService.baseURL+"ReportingStatistics",data:query,type:"GET",dataType:"json",success:callback})},this.getOptionalQuestions=function(accountID){var query=query||{},cache=this.data;return query.APIKey=APIconfigService.APIKey,query.AccountID=accountID,$.ajax({url:APIconfigService.constructUrl(APIconfigService.baseURL+"ContactOptionalMeta"),data:query,type:"GET",dataType:"json",success:function(data){cache.optionalQuestions=data}})},this.getSubjectInfo=function(snr){return this.data.subjectInfo[snr]?this.data.subjectInfo[snr]:null},this.fetchSubjectInfo=function(accountID,snr){var query=query||{},cache=this.data;return query.APIKey=APIconfigService.APIKey,query.AccountID=accountID,query.socialNumber=snr,$.ajax({url:APIconfigService.constructUrl(APIconfigService.baseURL+"Navet"),data:query,type:"POST",dataType:"json",success:function(data){cache.subjectInfo[snr]=data},error:function(data){alert("Ingen information kunde hittas fÃ¶r personnummer "+snr+" i folkbokfÃ¶ringen")}})},this.getMetaFields=function(accountID,unitType){var query=query||{},cache=this.data;query.APIKey=APIconfigService.APIKey,query.AccountID=accountID;var setTreatmentDomain=function(domain){domain.domainValues=[{text:"Insulin",code:3,XMLText:"Insulin",isActive:!0},{text:"Tabletter",code:2,XMLText:"Tabletter",isActive:!0},{text:"Tabl. och insulin",code:4,XMLText:"TabletterOchInsulin",isActive:!0},{text:"Enbart kost",code:1,XMLText:"EnbartKost",isActive:!0}]},polishDomainsForKids=function(metafields){for(var i=0;i<metafields.length;i++){if(null!=metafields[i].recAgeFrom){var noteToAdd="Enligt riktlinje frÃ¥n "+metafields[i].recAgeFrom+" Ã¥r.";metafields[i].helpNote=metafields[i].helpNote?metafields[i].helpNote+" "+noteToAdd:noteToAdd}"sex"==metafields[i].columnName&&(metafields[i].domain.domainValues[0].text="Pojke",metafields[i].domain.domainValues[1].text="Flicka"),"diabetesType"==metafields[i].columnName&&(metafields[i].domain.domainValues[0].text="Typ 1"),"albuminuria"==metafields[i].columnName&&(metafields[i].helpNote=["FÃ¶r diagnos krÃ¤vs fÃ¶rhÃ¶jd alb/kreatininratio i 2 av 3 prov av morgonurin inom 6 mÃ¥nader. ","-Mikroalbuminuri: flickor 3,5-25 mg/mmol, pojkar 2,5-25 mg/mmol.","-Makroalbuminuri: >25 mg/mmol. - Normaliserat vÃ¤rde: efter farmakologisk behandling."].join("")),"treatment"==metafields[i].columnName&&setTreatmentDomain(metafields[i].domain)}return metafields},polishDomainsForAdults=function(metafields){for(var i=0;i<metafields.length;i++)if("albuminuria"==metafields[i].columnName){metafields[i].helpNote=["- Mikroalbuminuri: fÃ¶r diagnos krÃ¤vs kvantifiering dÃ¤r 2 av 3 prov tagna inom 1 Ã¥r skall vara positiva, dvs. alb/kreatininratio 3-30 mg/mmol (eller U-alb 20-200 Âµg/min eller 20-300 mg/l).","-Makroalbuminuri: fÃ¶r diagnos krÃ¤vs kvantifiering  dvs. alb/kreatininratio >30 mg/mmol (eller >200 Âµg/min eller >300 mg/l).","-Normaliserat vÃ¤rde: efter farmakologisk behandling."].join("");break}return metafields};return $.ajax({url:APIconfigService.constructUrl(APIconfigService.baseURL+"MetaField"),data:query,type:"GET",dataType:"json",success:function(data){data=3==unitType?polishDomainsForKids(data):polishDomainsForAdults(data),cache.metafields=data}})},this.getAttributesLists=function(accountID){var query=query||{},cache=this.data;return query.APIKey=APIconfigService.APIKey,query.AccountID=accountID,$.ajax({url:APIconfigService.constructUrl(APIconfigService.baseURL+"ContactAttribute"),data:query,type:"GET",dataType:"json",success:function(data){cache.attributesLists=_.indexBy(data,"columnName")}})},this.getSubjects=function(query){return query=query||{},query.AccountID=accountService.accountModel.activeAccount.accountID,query.APIKey=APIconfigService.APIKey,$.ajax({url:APIconfigService.constructUrl(APIconfigService.baseURL+"subject"),data:query,type:"GET",dataType:"json"})},this.getList=function(type){return endpoints[type].getList()},this.getAny=function(type,params){return Restangular.all(type).get(params)},this.getOne=function(type,id){return Restangular.one(type,id).get()},this.getStats=function(params){return endpoints.indicatorresult.get(params).then(function(data){return data.plain()})},this.prepareGeoList=function(){var preparedGeoList=[];_.each(self.data.units,function(obj,key){var o={type:"unit",name:obj.name,id:"unit_"+obj.unitID};preparedGeoList.push(o)}),_.each(self.data.counties,function(obj,key){var o={type:"county",name:obj.name,id:"county_"+obj.code};preparedGeoList.push(o)}),self.data.preparedGeoList=preparedGeoList},this.queryFactory=function(params){var defaults={level:1,countyCode:0,unitID:0,indicatorID:null,fromYear:2017,fromQuartal:0,fromMonth:0,toYear:2017,toQuartal:0,toMonth:0,diabetesType:0,sex:0,unitType:0,fromAge:0,toAge:0,interval:null,recalculate:!1,outdatedDays:3};return angular.extend(defaults,params)};var preSelectedSearchFilters={values:{hba1c:{min:20,max:177},s:{value:null},dateFrom:new Date(new Date-31536e6),dateTo:new Date}},selectedSearchFilters=preSelectedSearchFilters;this.setSearchFilters=function(prop,value){prop||value?selectedSearchFilters[prop]=value:selectedSearchFilters=selectedSearchFilters},this.getSearchFilters=function(prop){return prop?selectedSearchFilters[prop]:selectedSearchFilters},this.bootstrap=function(){return $q.all([endpoints.units.getList({exposeMode:"minified",isActive:!0,useCache:!0}),endpoints.counties.getList(),endpoints.indicator.get(),endpoints.indicator2017.get()]).then(function(data){self.data.units=data[0].plain(),self.data.counties=data[1].plain(),self.data.indicators=data[2].plain(),self.data.indicators2017=data[3].plain(),self.prepareGeoList()})}}]),angular.module("ndrApp").service("APIconfigService",[function(){this.baseURL="https://www.ndr.nu/api/",this.APIKey="jEGPvHoP7G4eMkjLQwE5",this.constructUrl=function(url){return url}}]),function($){var opt;$.fn.printThis=function(options){opt=$.extend({},$.fn.printThis.defaults,options);var $element=this instanceof jQuery?this:$(this),strFrameName="printThis-"+(new Date).getTime();if(window.location.hostname!==document.domain&&navigator.userAgent.match(/msie/i)){var iframeSrc='javascript:document.write("<head><script>document.domain=\\"'+document.domain+'\\";<\/script></head><body></body>")',printI=document.createElement("iframe");printI.name="printIframe",printI.id=strFrameName,printI.className="MSIE",document.body.appendChild(printI),printI.src=iframeSrc}else{$("<iframe id='"+strFrameName+"' name='printIframe' />").appendTo("body")}var $iframe=$("#"+strFrameName);opt.debug||$iframe.css({position:"absolute",width:"0px",height:"0px",left:"-600px",top:"-600px"}),setTimeout(function(){var $doc=$iframe.contents(),$head=$doc.find("head"),$body=$doc.find("body");if($head.append('<base href="'+document.location.protocol+"//"+document.location.host+'">'),opt.importCSS&&$("link[rel=stylesheet]").each(function(){var href=$(this).attr("href");if(href){var media=$(this).attr("media")||"all";$head.append("<link type='text/css' rel='stylesheet' href='"+href+"' media='"+media+"'>")}}),opt.importStyle&&$("style").each(function(){$(this).clone().appendTo($head)}),opt.pageTitle&&$head.append("<title>"+opt.pageTitle+"</title>"),opt.loadCSS&&($.isArray(opt.loadCSS)?jQuery.each(opt.loadCSS,function(index,value){$head.append("<link type='text/css' rel='stylesheet' href='"+this+"'>")}):$head.append("<link type='text/css' rel='stylesheet' href='"+opt.loadCSS+"'>")),opt.header&&$body.append(opt.header),opt.printContainer?$body.append($element.outer()):$element.each(function(){$body.append($(this).html())}),opt.formValues){var $input=$element.find("input");$input.length&&$input.each(function(){var $this=$(this),$name=$(this).attr("name"),$checker=$this.is(":checkbox")||$this.is(":radio"),$iframeInput=$doc.find('input[name="'+$name+'"]'),$value=$this.val();$checker?$this.is(":checked")&&($this.is(":checkbox")?$iframeInput.attr("checked","checked"):$this.is(":radio")&&$doc.find('input[name="'+$name+'"][value='+$value+"]").attr("checked","checked")):$iframeInput.val($value)});var $select=$element.find("select");$select.length&&$select.each(function(){var $this=$(this),$name=$(this).attr("name"),$value=$this.val();$doc.find('select[name="'+$name+'"]').val($value)});var $textarea=$element.find("textarea");$textarea.length&&$textarea.each(function(){var $this=$(this),$name=$(this).attr("name"),$value=$this.val();$doc.find('textarea[name="'+$name+'"]').val($value)})}opt.removeInline&&($.isFunction($.removeAttr)?$doc.find("body *").removeAttr("style"):$doc.find("body *").attr("style","")),setTimeout(function(){$iframe.hasClass("MSIE")?(window.frames.printIframe.focus(),$head.append("<script>  window.print(); <\/script>")):($iframe[0].contentWindow.focus(),$iframe[0].contentWindow.print()),opt.debug||setTimeout(function(){$iframe.remove()},1e3)},opt.printDelay)},333)},$.fn.printThis.defaults={debug:!1,importCSS:!0,importStyle:!1,printContainer:!0,loadCSS:"",pageTitle:"",removeInline:!1,printDelay:333,header:null,formValues:!0},jQuery.fn.outer=function(){return $($("<div></div>").html(this.clone())).html()}}(jQuery),angular.module("ndrApp").service("accountService",["$http","$state","$rootScope","APIconfigService","cookieFactory",function($http,$state,$rootScope,APIconfigService,cookieFactory){var self=this,isLoggingIn=!1;this.accountModel={isPROMSubject:!1,user:null,visitor:null,activeAccount:null,tempAccount:null,serverError:""},this.helpers={pnrRegex:/\b(19\d{2}|20\d{2})(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])[-+]?\d{4}\b/},this.updateAccount=function(accountID){var activeAccount=_.find(this.accountModel.user.activeAccounts,{accountID:accountID});this.accountModel.activeAccount=activeAccount,this.accountModel.tempAccount=activeAccount,cookieFactory.create("ACTIVEACCOUNT",accountID),$state.go("main.account.home",{},{reload:!0})},this.login=function(){var url=APIconfigService.baseURL+"CurrentVisitor?APIKey="+APIconfigService.APIKey;return isLoggingIn=!0,$http.get(APIconfigService.constructUrl(url)).then(function(response){console.log("ACCOUNTSERVICE: Login()",response.data),self.accountModel.visitor=response.data;var user=response.data.user,subject=response.data.subject;if(self.accountModel.user=user,self.accountModel.subject=subject,$rootScope.$broadcast("newUser"),1==response.data.isSubject&&"subject"==self.accountModel.chosenUserType&&(self.accountModel.activeAccount={},cookieFactory.create("SUBJECT","y")),cookieFactory.read("SUBJECT"))return self.accountModel.chosenUserType="subject",!1;if(0==response.data.isUser)return!1;if("subject"!==self.accountModel.chosenUserType)if(user.activeAccounts=_.filter(user.accounts,function(account){return 1===account.status.id&&account.unit.isActive}),self.accountModel.chosenUserType="user",cookieFactory.read("ACTIVEACCOUNT"))self.accountModel.activeAccount=_.find(user.activeAccounts,function(a){return a.accountID===+cookieFactory.read("ACTIVEACCOUNT")});else if(self.accountModel.activeAccount);else if(self.accountModel.activeAccount||1!=user.activeAccounts.length)!self.accountModel.activeAccount&&user.activeAccounts.length>1&&$state.go("main.login",{direct:!0},{reload:!0});else{self.accountModel.activeAccount=user.activeAccounts[0];var accountID=self.accountModel.activeAccount.accountID;cookieFactory.create("ACTIVEACCOUNT",accountID,7),$state.go("main.account.home")}isLoggingIn=!1}).catch(function(data,status){console.error(data.statusText,data),self.accountModel.serverError=0===status||400===status||401===status?"Inget konto kunde hittas":"Ett okÃ¤nt fel intrÃ¤ffade"})},this.logOut=function(){this.accountModel.user=null,this.accountModel.activeAccount=null,cookieFactory.erase("SESSIONID"),cookieFactory.erase("ACTIVEACCOUNT"),cookieFactory.erase("SUBJECT"),$state.go("main.home",{},{reload:!0})},this.bootstrap=function(){return self.login()}}]),angular.module("ndrApp").service("calcService",[function(){this.calcBMISDS=function(bmi,sex,age,precision){var boxMean,boxMean3SD,SD,boxBMI,BMISD,beta,smoothedMean=0,smoothedMean3SD=0;return age<18&&(2==sex?(beta=.10848-.563978*age+.052448*Math.pow(age,2)-.00143*Math.pow(age,3),age<2?(smoothedMean=11.95274+13.98723*age-10.5489*Math.pow(age,2)+2.388215*Math.pow(age,3),smoothedMean3SD=9.09765+12.28197*age-9.213104*Math.pow(age,2)+2.085268*Math.pow(age,3)):(smoothedMean=19.18887-1.41035*age+.151814*Math.pow(age,2)-.003685*Math.pow(age,3),smoothedMean3SD=14.9764-.776103*age+.062656*Math.pow(age,2)-812e-6*Math.pow(age,3))):1==sex&&(beta=.031179-.289503*age+.008617*Math.pow(age,2)+221e-6*Math.pow(age,3),age<2?(smoothedMean=12.28265+13.91043*age-10.20257*Math.pow(age,2)+2.241169*Math.pow(age,3),smoothedMean3SD=8.44909+15.12849*age-11.67585*Math.pow(age,2)+2.73805*Math.pow(age,3)):(smoothedMean=19.17678-1.219168*age+.119514*Math.pow(age,2)-.002422*Math.pow(age,3),smoothedMean3SD=15.21195-.730887*age+.060518*Math.pow(age,2)-873e-6*Math.pow(age,3))),boxMean=(Math.pow(smoothedMean,beta)-1)/beta,boxMean3SD=(Math.pow(smoothedMean3SD,beta)-1)/beta,boxBMI=(Math.pow(bmi,beta)-1)/beta,SD=Math.abs(boxMean-boxMean3SD)/3,BMISD=(boxBMI-boxMean)/SD),isNaN(BMISD)?null:parseFloat(BMISD.toFixed(precision))},this.calcBMI=function(weight,height,precision){return parseFloat((weight/Math.pow(height/100,2)).toFixed(precision))},this.calcE24Kg=function(weight,doses,precision){return parseFloat((doses/weight).toFixed(precision))},this.roundToStep=function(value,step){var inv=1/step;return Math.round(value*inv)/inv},this.calcAge=function(socialNumber,date,precision,step){precision||(precision=0),step||(step=1),this.isDate(date)||(date=new Date(date.substring(0,4),date.substring(5,7)-1,date.substring(8,10)))
;var birthDate=new Date(socialNumber.substring(0,4),socialNumber.substring(4,6)-1,socialNumber.substring(6,8)),timeDiff=date.valueOf()-birthDate.valueOf(),noOfDays=timeDiff/864e5,ageRaw=this.roundToStep(noOfDays/365.242,step);return parseFloat(ageRaw.toFixed(precision))},this.isDate=function(date){return date instanceof Date&&!isNaN(date.valueOf())},this.calcDiastSDS=function(bpDiastolic,sex,age,height,precision){return this.getBPSDS(!1,bpDiastolic,sex,age,height,precision)},this.calcSystSDS=function(bpSystolic,sex,age,height,precision){return this.getBPSDS(!0,bpSystolic,sex,age,height,precision)},this.getBPSDS=function(isSystolic,val,sex,age,height,precision){if(age<1&&age>=18)return null;var heightInMeters=height/100,compareValue=this.getBPSDSCompareValue(!1,sex,age,heightInMeters),nom=this.getBPSDSNominator(!1,sex),score=(val-compareValue)/nom;return parseFloat(score.toFixed(precision))},this.getBPSDSCompareValue=function(isSystolic,sex,age,height){var ret;return 1==sex&&(ret=isSystolic?102.19768+1.82416*age+.12776*Math.pow(age,2)+.00249*Math.pow(age,3)-.00135*Math.pow(age,4)+2.73157*height-.19618*Math.pow(height,2)-.04659*Math.pow(height,3)+.00947*Math.pow(height,4):61.01217+.68314*age-.09835*Math.pow(age,2)+.01711*Math.pow(age,3)+45e-5*Math.pow(age,4)+1.46993*height-.07849*Math.pow(height,2)-.03144*Math.pow(height,3)+.00967*Math.pow(height,4)),2==sex&&(ret=isSystolic?102.01027+1.94397*age+.00598*Math.pow(age,2)-.00789*Math.pow(age,3)-59e-5*Math.pow(age,4)+2.03526*height+.02534*Math.pow(height,2)-.01884*Math.pow(height,3)+.00121*Math.pow(height,4):60.5051+1.01301*age+.01157*Math.pow(age,2)+.00424*Math.pow(age,3)-.00137*Math.pow(age,4)+1.16641*height+.12795*Math.pow(height,2)-.03869*Math.pow(height,3)-79e-5*Math.pow(height,4)),ret},this.getBPSDSNominator=function(isSystolic,sex){var ret;return 1==sex&&(ret=isSystolic?10.7128:11.6032),2==sex&&(ret=isSystolic?10.4855:10.9573),ret},this.getStringDate=function(date){if("string"==typeof date)return date;if(void 0!==date&&null!==date&&date instanceof Date&&!isNaN(date.valueOf())){var yyyy=date.getFullYear().toString(),mm=(date.getMonth()+1).toString(),dd=date.getDate().toString();return yyyy+"-"+(mm[1]?mm:"0"+mm[0])+"-"+(dd[1]?dd:"0"+dd[0])}},this.calcGFR=function(age,creatinine,sex,precision){var gfr=175*Math.pow(creatinine/88.4,-1.154)*Math.pow(age,-.203)*(2==sex?.742:1);return parseFloat(gfr.toFixed(precision))},this.calcIsoBMI=function(sex,age,bmi){if(age<2)return null;var limits={1:[[18.41,20.09],[18.13,19.8],[17.89,19.57],[17.69,19.39],[17.55,19.29],[17.47,19.26],[17.42,19.3],[17.45,19.47],[17.55,19.78],[17.71,20.23],[17.92,20.63],[18.16,21.09],[18.44,21.6],[18.76,22.17],[19.1,22.77],[19.46,23.39],[19.84,24],[20.2,24.57],[20.55,25.1],[20.89,25.58],[21.22,26.02],[21.56,26.43],[21.91,26.84],[22.27,27.25],[22.62,27.63],[22.96,27.98],[23.29,28.3],[23.6,28.6],[23.9,28.88],[24.19,29.14],[24.46,29.41],[24.73,29.7],[25,30]],2:[[18.02,19.81],[17.76,19.55],[17.56,19.36],[17.4,19.23],[17.28,19.15],[17.19,19.12],[17.15,19.17],[17.2,19.34],[17.34,19.65],[17.53,20.08],[17.75,20.51],[18.03,21.01],[18.35,21.57],[18.69,22.18],[19.07,22.81],[19.45,23.46],[19.86,24.11],[20.29,24.77],[20.74,25.42],[21.2,26.05],[21.68,26.67],[22.14,27.24],[22.58,27.76],[22.98,28.2],[23.34,28.57],[23.66,28.87],[23.94,29.11],[24.17,29.29],[24.37,29.43],[24.54,29.56],[24.7,29.69],[24.85,29.84],[25,30]]},compareArray=limits[sex.toString()][2*age-4];return bmi>=compareArray[1]?3:bmi>=compareArray[0]?2:1},this.calcLDL=function(hdl,cholesterol,triglyceride,precision){var ldl=cholesterol-hdl-.45*triglyceride;return ldl>=.5&&ldl<=10?parseFloat(ldl.toFixed(precision)):null},this.calcHypertension=function(sex,age,bpSystolic,bpDiastolic){var limits={femaleSyst:[[100,104],[101,105],[103,107],[104,108],[106,110],[108,111],[109,113],[111,115],[113,117],[115,119],[117,121],[119,123],[121,124],[122,126],[123,127],[124,130],[125,129]],maleSyst:[[100,103],[101,106],[105,109],[107,108],[108,112],[110,114],[111,115],[112,116],[114,118],[115,119],[117,121],[120,123],[122,126],[125,126],[127,131],[130,132],[132,136]],femaleDiast:[[54,58],[59,63],[63,67],[66,70],[68,72],[70,74],[71,75],[72,76],[73,77],[74,78],[75,79],[76,80],[77,81],[78,83],[79,83],[80,84],[80,84]],maleDiast:[[54,58],[57,61],[61,65],[65,69],[68,72],[70,74],[72,76],[73,78],[75,79],[75,80],[76,80],[76,80],[77,81],[78,83],[79,83],[80,84],[82,87]]},getCompareArray=function(limits,sex,age,isSystolic){return 1==sex?isSystolic?limits.maleSyst[age-1]:limits.maleDiast[age-1]:isSystolic?limits.femaleSyst[age-1]:limits.femaleDiast[age-1]},getHypertensionOneVal=function(arr,val){return val?val>=arr[1]?3:val>=arr[0]?2:val?1:null:null},bpSystCat=getHypertensionOneVal(getCompareArray(limits,sex,age,!0),bpSystolic),bpDiastCat=getHypertensionOneVal(getCompareArray(limits,sex,age,!1),bpDiastolic);return bpSystCat||bpDiastCat?Math.max(bpSystCat,bpDiastCat):null}}]),angular.module("ndrApp").service("commonService",["$filter","dataService",function($filter,dataService){this.getMetaFieldByKey=function(metafields,key){for(var i=0;i<metafields.length;i++)if(metafields[i].columnName===key)return metafields[i];return null},this.getLatestModel=function(subject,metafields){for(var ret={},i=0;i<metafields.length;i++){var contact=this.getLatestContactWithValue(subject,metafields[i]);if(contact){var model=this.getValueModel(contact,metafields[i]);ret[metafields[i].columnName]=model}else ret[metafields[i].columnName]={value:null,date:null,label:" - "}}return ret},this.getValueModel=function(contact,metafield){var label=this.getMetafieldLabel(contact[metafield.columnName],metafield);return{value:contact[metafield.columnName],date:contact.contactDate,label:label}},this.getMetafieldLabel=function(value,metafield){metafield.columnName;return void 0===value?" - ":null===value?" - ":"Date"===metafield.domain.name?$filter("date")(new Date(value),"yyyy-MM-dd"):metafield.domain.isEnumerated?_.find(metafield.domain.domainValues,{code:value}).text:"Bool"===metafield.domain.name?value?"Ja":"Nej":value.toString().replace(".",",")+(null!=metafield.measureUnit?" "+metafield.measureUnit:"")},this.getLabelByKeyVal=function(metafields,key,val){var m=this.getMetafieldByQuestionKey(metafields,key);return this.getMetafieldLabel(val,m)},this.getDomainValue=function(metafield,code){return _.find(metafield.domain.domainValues,{code:code})},this.getMetafieldByQuestionKey=function(metafields,key){for(var i=0;i<metafields.length;i++)if(metafields[i].columnName==key)return metafields[i]},this.getMetafieldByQuestionText=function(metafields,text){for(var i=0;i<metafields.length;i++)if(-1!=metafields[i].question.toLowerCase().indexOf(text))return metafields[i]},this.getLatestContactWithValue=function(subject,metafield){return _.find(subject.contacts,function(c){return!_.isNull(c[metafield.columnName])})},this.getSeries=function(subject,keys,yearsBack){for(var ret={},i=0;i<keys.length;i++)ret[keys[i]]=this.getOneSeries(subject,keys[i],yearsBack);return ret},this.getOneSeries=function(subject,key,yearsback){var series=[],now=moment();return _.each(subject.contacts,function(obj){var then=moment(obj.contactDate);_.isNumber(obj[key])&&now.diff(then,"years")<=yearsback&&series.push({x:new Date(obj.contactDate),y:obj[key]})}),series.reverse()},this.excludeMetafields=function(metafields,excluded){return metafields.filter(function(m){return-1===excluded.indexOf(m.columnName)})},this.includeMetafields=function(metafields,included){return metafields.filter(function(m){return included.indexOf(m.columnName)>-1})},this.populateTableData=function(contacts,metafields,headerkey){for(var table={header:null,body:[]},i=0;i<metafields.length;i++){for(var f={label:metafields[i].question,sequence:metafields[i].sequence,values:[]},j=0;j<contacts.length;j++)f.values.push(contacts[j]?this.getMetafieldLabel(contacts[j][metafields[i].columnName],metafields[i]):"-");metafields[i].columnName==headerkey?table.header=f:table.body.push(f)}return table},this.dateWithinYears=function(d,years){return!!d&&moment().diff(moment(d),"years")>=years},this.currentAge=function(subject){return moment().diff(subject.dateOfBirth,"years")},this.getPersonInfoLocal=function(subject){return dataService.getSubjectInfo(subject.snr)},this.setPersonName=function(subject,personInfo){personInfo.firstName&&personInfo.lastName?subject.name=personInfo.firstName+" "+personInfo.lastName:alert("Ingen information kunde hittas fÃ¶r personnummer "+snr+" i folkbokfÃ¶ringen")}}]),angular.module("ndrApp").factory("cookieFactory",function(){function create(name,value,minutes){var expires="",dur=minutes||function(){var mid=new Date,ts=mid.getTime();return mid.setHours(24,0,0,0),Math.floor((mid-ts)/6e4)}(),date=new Date;date.setTime(date.getTime()+60*dur*1e3),expires="; expires="+date.toUTCString(),document.cookie=name+"="+value+expires+"; path=/"}function read(name){for(var nameEQ=name+"=",ca=document.cookie.split(";"),i=0;i<ca.length;i++){for(var c=ca[i];" "==c.charAt(0);)c=c.substring(1,c.length);if(0==c.indexOf(nameEQ))return c.substring(nameEQ.length,c.length)}return null}function erase(name){create(name,"",-1)}return{create:create,read:read,erase:erase}}),angular.module("ndrApp").directive("columnChart",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element,attrs){scope.$watch("model",function(model){if(console.log("Reloading Column Chart",model),void 0===model)return!1;jQuery(".chart-container",element).highcharts({chart:{type:"column",height:120,marginTop:5,spacingRight:10,spacingLeft:10,spacingBottom:5},title:{text:""},xAxis:{minorTickLength:0,tickLength:0,gridLineWidth:0,gridLineColor:"#eee",lineWidth:0,title:{text:""},type:"category",labels:{formatter:function(a){if(this.value==scope.selected)return this.value}}},yAxis:{gridLineWidth:0,gridLineColor:"#eee",lineWidth:0,min:40,max:70,title:{text:"",align:"high"}},tooltip:{formatter:function(){Highcharts.dateFormat("%Y",new Date(this.x));return this.key+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{pointWidth:6}},legend:{enabled:!1,layout:"vertical",align:"right",verticalAlign:"top",x:-40,y:100,floating:!0,borderWidth:1,backgroundColor:Highcharts.theme&&Highcharts.theme.legendBackgroundColor||"#FFFFFF",shadow:!0},credits:{enabled:!1},series:[{color:"#ccc",name:"Amount",data:model}]})},!0)}}}]),angular.module("ndrApp").directive("barChart",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"=",categories:"="},link:function(scope,element,attrs){scope.$watch("model",function(model){if(void 0===model)return!1;jQuery(".chart-container",element).highcharts({chart:{type:"bar",height:650,width:800,marginTop:5,spacingRight:30,spacingLeft:10,spacingBottom:5,marginRight:100},title:{text:""},xAxis:{minorTickLength:0,tickLength:0,gridLineWidth:0,gridLineColor:"#ccc",lineWidth:0,categories:scope.categories,title:{text:""},type:"category",labels:{style:{fontSize:"14px",fontFamily:"Roboto"}}},yAxis:{gridLineWidth:1,gridLineColor:"#999",min:0,max:100,title:{text:"",align:"high"},labels:{style:{fontSize:"14px",fontFamily:"Roboto"}}},tooltip:{enabled:!1},plotOptions:{bar:{pointWidth:14,dataLabels:{crop:!1,overflow:"none",style:{fontSize:"13px",fontFamily:"Roboto"},enabled:!0,formatter:function(d){return this.point.y}}},series:{pointPadding:0,groupPadding:.1}},legend:{enabled:!0},credits:{enabled:!1},series:model})},!0)}}}]),angular.module("ndrApp").directive("lineChart",[function(){return{restrict:"A",template:"<div style='position: relative'><div class='chart-container'></div><div class='chart-empty-label' style='position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%)'>Det finns ingen historik</div></div>",scope:{model:"=",yMin:"@",yMax:"@",dateFormat:"@",height:"@",color:"@"},link:function(scope,element,attrs){var dateFormat=_.isString(scope.dateFormat)?scope.dateFormat:"%Y-%m-%d",color=scope.color||"#E14274",chart=jQuery(".chart-container",element).highcharts({chart:{type:"area",height:!_.isUndefined(scope.height)&&_.isNumber(+scope.height)?+scope.height:140,marginTop:5,marginBottom:30,marginLeft:35,marginRight:5,spacingLeft:30},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:dateFormat,month:dateFormat,week:dateFormat,day:dateFormat},lineWidth:0,gridLineWidth:0,minorGridLineWidth:0,lineColor:"#eee",minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:1,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,min:!_.isUndefined(scope.yMin)&&_.isNumber(+scope.yMin)?+scope.yMin:40,max:!_.isUndefined(scope.yMax)&&_.isNumber(+scope.yMax)?+scope.yMax:70,title:{text:"",align:"high"},labels:{align:"right"}},tooltip:{formatter:function(){return Highcharts.dateFormat(dateFormat,new Date(this.x))+": <b>"+this.y+"</b>"}},plotOptions:{series:{events:{legendItemClick:function(event){if(console.log("test",event),!this.visible)return!1;for(var seriesIndex=this.index,series=this.chart.series,i=0;i<series.length;i++)series[i].index!=seriesIndex&&(series[i].visible?series[i].hide():series[i].show());return!1}}},bar:{dataLabels:{enabled:!0}},area:{fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,Highcharts.Color(color).setOpacity(.5).get("rgba")],[1,Highcharts.Color(color).setOpacity(0).get("rgba")]]}}},legend:{enabled:!1,layout:"vertical",align:"right",verticalAlign:"top",x:-40,y:100,floating:!0,borderWidth:1,backgroundColor:Highcharts.theme&&Highcharts.theme.legendBackgroundColor||"#FFFFFF",shadow:!0},credits:{enabled:!1},series:[{dashStyle:"ShortDot",color:color,name:"VÃ¤rde",data:[{x:1,y:10},{x:3,y:5}],marker:{enabled:!0,fillColor:color,lineWidth:2,lineColor:null}}]});scope.$watch("model",function(model){chart.highcharts().series[0].setData(angular.copy(model)),jQuery(".chart-empty-label",element).toggle(_.filter(model,function(m){return null!==m.y}).length<=1).css("color",color)},!0)}}}]),angular.module("ndrApp").directive("lineChartPromCombined",[function(){return{restrict:"A",template:"<div id='promCombined' class='chart-container'></div>",scope:{model:"=",title:"="},link:function(scope,element,attrs){function updateColor(lineSeries){if(void 0!=lineSeries){var color="#ccc"==lineSeries.color?"#74BAD8":"#ccc",width="#ccc"==lineSeries.color?5:1,chartSeries=$("#promCombined").highcharts().series,sibling=chartSeries[lineSeries.index];_.each(chartSeries,function(s){"#ccc"!=s.color&&(s.update({color:"#ccc"}),s.update({lineWidth:1}))}),lineSeries.update({color:color}),lineSeries.update({lineWidth:width}),sibling.update({color:color}),sibling.update({lineWidth:width})}}scope.$watch("model",function(model){jQuery(".chart-container",element).highcharts({chart:{type:"spline",height:500,width:800,marginTop:20,marginBottom:30,marginLeft:20,marginRight:250,spacingLeft:0,style:{color:"#666"}},title:{text:"",enabled:!1},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"",month:""},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#666",labels:{enabled:!1,style:{color:"#666",fontSize:"12px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,min:0,max:100,title:{text:"",align:"high"},labels:{x:-5,align:"right",style:{color:"#666",fontSize:"12px"}}},tooltip:{formatter:function(d){var time=Highcharts.dateFormat("%Y-%m-%d",new Date(this.x));return"<b>"+this.series.name+"</b><br /><br />"+time+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{stickyTracking:!1,tooltip:{followPointer:!0,split:!0},marker:{symbol:"circle",fillColor:"#a6a6a6",lineWidth:1,radius:4,lineColor:null},events:{click:function(){updateColor(this)},legendItemClick:function(){return updateColor(this),!1}},states:{hover:{lineWidth:4,color:"blue"},select:{lineWidth:4,color:"#851E20"}}}},legend:{margin:0,x:-10,y:-15,layout:"vertical",align:"right",verticalAlign:"top",itemMarginTop:5,enabled:!0,style:{color:"#666",fontSize:"12px"}},credits:{enabled:!1},series:scope.model})},!0)}}}]),angular.module("ndrApp").directive("physicalChart",[function(){return{scope:{model:"="},restrict:"A",link:function($scope,iElm,iAttrs,controller){function render(model){model&&($scope.model.domainValues=[{text:"Aldrig",code:1,XMLText:"Aldrig",isActive:!0},{text:"<1",code:2,XMLText:"Oregelbundet",isActive:!0},{text:"1-2",code:3,XMLText:"Regelbundet1",isActive:!0},{text:"3-5",code:4,XMLText:"Regelbundet2",isActive:!0},{text:"Dagligen",code:5,XMLText:"Dagligen",isActive:!0}])}$scope.$watch("model",render,!0)}}}]),angular.module("ndrApp").directive("lineChartKey",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element,attrs){scope.$watch("model",function(model){jQuery(".chart-container",element).highcharts({chart:{type:"spline",height:470,marginTop:60,marginBottom:30,marginLeft:45,marginRight:50,spacingLeft:30},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{month:"%Y",year:"%Y"},lineWidth:1,gridLineWidth:0,minorGridLineWidth:0,labels:{enabled:!0},minorTickLength:0,tickLength:0},yAxis:{opposite:!0,gridLineWidth:1,gridLineColor:"white",lineWidth:0,minorGridLineWidth:0,maxPadding:.4,minPadding:.4,ceiling:100,title:{text:"",align:"high"},labels:{align:"left",formatter:function(){return this.value+"%"}}},tooltip:{formatter:function(d){return Highcharts.dateFormat("%Y",new Date(this.x))+": <b>"+this.y+"</b><br />Baserat pÃ¥ "+this.point.cRep+" rapporteringar"}},plotOptions:{bar:{dataLabels:{enabled:!0}},spline:{dataLabels:{style:{fontSize:"12px"},enabled:!0,allowOverlap:!0}}},legend:{layout:"horizontal",align:"center",verticalAlign:"top",y:30,floating:!0},credits:{enabled:!1},series:angular.copy(scope.model)})},!0)}}}]),angular.module("ndrApp").directive("lineChartPatientHba1c",[function(){return{restrict:"A",template:'<div class="chart-container"></div>',scope:{model:"=",type:"="},link:function(scope,element,attrs){var chart=jQuery(".chart-container",element).highcharts({chart:{type:"basic"===scope.type?"spline":"area",height:180,marginTop:20,marginBottom:30,marginLeft:35,marginRight:5,spacingLeft:30,style:{color:"rgba(89,153,218,1)"}},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%Y"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#ccc",labels:{style:{fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#cccc",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{align:"right",style:{fontSize:"10px"}}},tooltip:{formatter:function(){return Highcharts.dateFormat("%Y",new Date(this.x))+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{marker:{lineWidth:1,radius:2,lineColor:null}},spline:{},area:{fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(255,255,255,0.6)"],[.7,"rgba(255,255,255,0.2)"],[1,"rgba(255,255,255,0)"]]}}},legend:{enabled:!1},credits:{enabled:!1},series:[{color:"rgba(89,153,218,1)",name:"VÃ¤rde",data:[{x:1,y:10},{x:3,y:5}]}]});scope.$watch("model",function(model){chart.highcharts().series[0].setData(model)},!0)}}}]),angular.module("ndrApp").directive("lineChartPatientBp",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element,attrs){scope.$watch("model",function(model){jQuery(".chart-container",element).highcharts({chart:{type:"area",height:180,marginTop:20,marginBottom:30,marginLeft:25,marginRight:5,spacingLeft:0,style:{color:"#666"}},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%y, %b"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#eee",labels:{style:{color:"#666",fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{x:-5,align:"right",style:{color:"#666",fontSize:"10px"}}},tooltip:{formatter:function(){return Highcharts.dateFormat("%Y",new Date(this.x))+": <b>"+this.y+"</b>"}},plotOptions:{series:{marker:{fillColor:"#FFFFFF",lineWidth:1,lineColor:null}}},legend:{enabled:!1},credits:{enabled:!1},series:scope.model})},!0)}}}]),angular.module("ndrApp").directive("lineChartPatientCholesterol",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"=",title:"="},link:function(scope,element,attrs){scope.$watch("model",function(model){jQuery(".chart-container",element).highcharts({chart:{type:"area",height:180,marginTop:40,marginBottom:30,marginLeft:20,marginRight:5,spacingLeft:0,style:{color:"#666"}},title:{enabled:!1,text:"",style:{color:"#666",fontSize:10}},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%Y"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#666",labels:{style:{color:"#666",fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{x:-5,align:"right",style:{color:"#666",fontSize:"10px"}}},tooltip:{formatter:function(){return Highcharts.dateFormat("%Y",new Date(this.x))+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{marker:{lineWidth:1,radius:2,lineColor:null}},area:{fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]}}},legend:{margin:0,x:-10,y:-15,align:"left",verticalAlign:"top",enabled:!0},credits:{enabled:!1},series:scope.model})},!0)}}}]),angular.module("ndrApp").directive("lineChartPrint",[function(){return{restrict:"A",template:'<div class="chart-container"></div>',scope:{model:"=",type:"="},link:function(scope,element,attrs){var chart=jQuery(".chart-container",element).highcharts({chart:{type:"spline",height:250,marginTop:20,marginBottom:30,marginLeft:45,marginRight:5,spacingLeft:30,style:{color:"black"}},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%y, %b"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#eee",labels:{style:{color:"#666",fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{x:-5,align:"right",style:{color:"#666",fontSize:"10px"}}},tooltip:{formatter:function(){return Highcharts.dateFormat("%Y",new Date(this.x))+": <b>"+this.y+"</b>"}},plotOptions:{spline:{dataLabels:{enabled:!0}},series:{marker:{fillColor:"#000",lineWidth:2,radius:2,lineColor:null}}},legend:{enabled:!1},credits:{enabled:!1},series:[{color:"black",name:"VÃ¤rde",data:[{x:1,y:10},{x:3,y:5}]}]});scope.$watch("model",function(model){chart.highcharts().series[0].setData(model)},!0)}}}]),angular.module("ndrApp").directive("lineChartCombinedPrint",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element,attrs){scope.$watch("model",function(model){jQuery(".chart-container",element).highcharts({chart:{type:"spline",height:250,marginTop:20,marginBottom:30,marginLeft:25,marginRight:5,spacingLeft:20,style:{color:"#666"}},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%y, %b"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#eee",labels:{style:{color:"#666",fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{x:-5,align:"right",style:{color:"#666",fontSize:"10px"}}},tooltip:{formatter:function(){return Highcharts.dateFormat("%Y",new Date(this.x))+": <b>"+this.y+"</b>"}},plotOptions:{spline:{dataLabels:{enabled:!0}},series:{marker:{enabled:!0,fillColor:"#000",radius:5,lineColor:null}}},legend:{enabled:!0,align:"center",margin:16,verticalAlign:"top"},credits:{enabled:!1},series:scope.model})},!0)}}}]),angular.module("ndrApp").directive("gaugeChart",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element,attrs){scope.$watch("model",function(model){if(console.log("Reload gauge",model,scope.model),model){var gaugeOptions={chart:{type:"solidgauge"},title:null,pane:{center:["50%","35%"],size:"100%",startAngle:-90,endAngle:90,background:{backgroundColor:Highcharts.theme&&Highcharts.theme.background2||"#EEE",innerRadius:"60%",outerRadius:"100%",shape:"arc"}},tooltip:{enabled:!1},yAxis:{stops:[[1,"#278470"]],lineWidth:0,minorTickInterval:null,tickPixelInterval:400,tickWidth:0,title:{y:-70},labels:{y:16}},plotOptions:{solidgauge:{dataLabels:{y:5,borderWidth:0,useHTML:!0}}}};$(".chart-container",element).highcharts(Highcharts.merge(gaugeOptions,{yAxis:{min:0,max:200,title:{enabled:!1,text:"Speed"},labels:{enabled:!1}},credits:{enabled:!1},series:[{name:"Speed",data:[150],dataLabels:{format:'<div style="text-align:center"><span style="font-size:16px;color:'+(Highcharts.theme&&Highcharts.theme.contrastTextColor||"black")+'">'+scope.model.label+'</span><br/><span style="font-size:12px;color:silver"></span></div>'},tooltip:{valueSuffix:" km/h"}}]}))}},!0)}}}]),angular.module("ndrApp").directive("list",[function(){function link(scope,element,attrs){}return{restrict:"A",templateUrl:function(elem,attr){return"src/components/List/ListTemplate.html"},link:link,scope:{model:"="}}}]),angular.module("ndrApp").directive("autocomplete",["$state",function($state){return{controller:function($scope,$element){$scope.config={options:$scope.model.options,items:[$scope.model.selected],optgroupField:"type",valueField:"id",labelField:"name",searchField:"name",sortField:"name",delimiter:"|",placeholder:"SÃ¶k hÃ¤r efter landsting, sjukhus eller vÃ¥rdcentral",maxItems:1,maxOptions:2e3,lockOptgroupOrder:!0,optgroups:[{value:"sweden",label:"Riket"},{value:"county",label:"Landsting"},{value:"unit",label:"VÃ¥rdenheter"}],render:{optgroup_header:function(data,escape){return'<div class="optgroup-header">'+escape(data.label)+"</div>"}},onChange:function(v){var type=v.split("_")[0],id=v.split("_")[1];"county"===type&&$state.go("main.profiles.county",{id:id}),"unit"===type&&$state.go("main.profiles.unit",{id:id})}},$element.selectize($scope.config)},restrict:"A",scope:{model:"="}}}]),angular.module("ndrApp").directive("keyIndicators",["$q","dataService","accountService",function($q,dataService,accountService){function link(scope){function getSelectedKeyIndicator(){var queryGeo,selectedIndicator=scope.model.selectedKeyIndicator,promises=[],queryCountry=dataService.queryFactory({indicatorID:selectedIndicator,level:0,interval:"y",fromYear:2010,toYear:(new Date).getFullYear(),sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType});queryGeo="unit"===scope.model.geoType?dataService.queryFactory({unitID:scope.model.unit.unitID,level:2,indicatorID:selectedIndicator,interval:"y",fromYear:2010,toYear:(new Date).getFullYear(),sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType,countyCode:null}):dataService.queryFactory({countyCode:scope.model.county.code,indicatorID:selectedIndicator,interval:"y",fromYear:2010,toYear:(new Date).getFullYear(),sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType}),promises.push(dataService.getStats(queryCountry)),promises.push(dataService.getStats(queryGeo)),$q.all(promises).then(function(data){var seriesCountry=[],seriesGeo=[];_.each(data[0].statSet[0].intervalSet,function(obj){seriesCountry.push({color:"#999",x:new Date(obj.interval),y:obj.stat?obj.stat.r:null,cRep:obj.stat?obj.stat.cRepInd:null})}),_.each(data[1].statSet[0].intervalSet,function(obj){seriesGeo.push({color:"#74BAD8",x:new Date(obj.interval),y:null!=obj.stat?obj.stat.r:null,cRep:null!=obj.stat?obj.stat.cRepInd:null})}),scope.data.keyIndicator=[{name:scope.model.geo?scope.model.geo.name:"Enhet",lineWidth:3,color:"#74BAD8",data:seriesGeo,zoneAxis:"x",zones:[{value:Date.UTC((new Date).getFullYear()-1,0)},{value:Date.UTC((new Date).getFullYear(),0),dashStyle:"dash"}]},{name:"Riket",color:"#ccc",data:seriesCountry,zoneAxis:"x",zones:[{value:Date.UTC((new Date).getFullYear()-1,0)},{value:Date.UTC((new Date).getFullYear(),0),dashStyle:"dash"}]}]})}function getKeyIndicators(){var query,account=accountService.accountModel.activeAccount,toInclude=[201,221,207,222,209,214,211,203,223,216,202,219],promises=[];account&&3==scope.model.unitType&&(toInclude=[225,201,226,221,223,211,219]),query="unit"===scope.model.geoType?dataService.queryFactory({unitID:scope.model.unit.unitID,level:2,ID:toInclude,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType}):dataService.queryFactory({countyCode:scope.model.county.code,ID:toInclude,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType}),promises.push(dataService.getStats(query)),query=dataService.queryFactory({level:0,ID:toInclude,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType}),promises.push(dataService.getStats(query)),$q.all(promises).then(function(data){var geoData=data[0].indicatorSet,countryData=data[1].indicatorSet,keyIndicators=[];_.each(geoData,function(obj,key){var o={riket:countryData[key].statSet[0].stat.r,riketLKonf:countryData[key].statSet[0].stat.lKonf,riketUKonf:countryData[key].statSet[0].stat.uKonf,geo:obj.statSet[0].stat.r,geoLKonf:obj.statSet[0].stat.lKonf,geoUKonf:obj.statSet[0].stat.uKonf,status:"equal",name:obj.indicator.name,id:obj.indicator.id};o.geoLKonf>o.riketUKonf?o.status=obj.indicator.asc?"worse":"better":o.geoUKonf<o.riketLKonf&&(o.status=obj.indicator.asc?"better":"worse"),keyIndicators.push(o)}),scope.data.keyIndicators=keyIndicators})}var localModel={selectedKeyIndicator:201,diabetesType:0,diabetesTypes:[{id:0,name:"Typ 1 och 2"},{id:1,name:"Typ 1"},{id:2,name:"Typ 2"}],sex:0,sexes:[{id:0,name:"Kvinnor och mÃ¤n"},{id:2,name:"Kvinnor"},{id:1,name:"MÃ¤n"}]};3==scope.model.unitType&&(localModel.sexes=[{id:0,name:"Flickor och pojkar"},{id:2,name:"Flickor"},{id:1,name:"Pojkar"}]),scope.model=jQuery.extend(scope.model,localModel),scope.data={keyIndicator:void 0,keyIndicators:void 0},scope.$watch("model",function(newValue,oldValue){getSelectedKeyIndicator(),scope.model.selectedKeyIndicatorName=_.find(dataService.data.indicators.byType.target,{id:scope.model.selectedKeyIndicator}).name,newValue.sex!==oldValue.sex&&newValue.diabetesType!==oldValue.diabetesType&&newValue.unitType!==oldValue.unitType||getKeyIndicators()},!0)}return{restrict:"A",templateUrl:"src/components/KeyIndicators/KeyIndicators.html",link:link,scope:{model:"="}}}]),angular.module("ndrApp").directive("statReporting",["$q","dataService","$state","commonService",function($q,dataService,$state,commonService){function link(scope){var localModel={reportList:[],reportSort:{level:3,desc:!0},unitType:scope.model.activeAccount.unit.typeID,excludes:["yearOfOnset","smokingEndYear","snuffingEndYear","cgmType","contactDate","pumpOngoingSerial","diabetesType","pumpIndication","pumpClosureReason"]};scope.model=jQuery.extend(scope.model,localModel),scope.sortRepList=function(list,sort){var sortField;switch(sort.level){case 1:sortField="sweShare";break;case 2:sortField="countyShare";break;case 3:sortField="unitShare";break;default:sortField="question"}return list.sort(function(level,sortField){return level?function(a,b){return sort.desc?a[sortField].value-b[sortField].value:b[sortField].value-a[sortField].value}:function(a,b){return sort.desc?a[sortField].localeCompare(b[sortField]):b[sortField].localeCompare(a[sortField])}}(sort.level,sortField)),list},scope.handleSortClick=function(level){level==scope.model.reportSort.level?scope.model.reportSort.desc=!scope.model.reportSort.desc:scope.model.reportSort={level:level,desc:!0},scope.model.reportList=scope.sortRepList(scope.model.reportList,scope.model.reportSort)},scope.handleRowClick=function(f){var valueFilter=(dataService.getSearchFilters(),{dateFrom:new Date(new Date-31536e6),dateTo:new Date});"retinopathyDiagnosis"==f.columnName&&(valueFilter.diabeticRetinopathy={value:"1"}),"pumpOngoing"==f.columnName&&(valueFilter.insulinMethod={value:"2"}),
valueFilter[f.columnName]={min:f.min,max:f.max,undef:!0},dataService.setSearchFilters("values",valueFilter),$state.go("main.account.patients")},scope.getShare=function(d,n){return parseInt((d/n*100).toFixed(0))},scope.getValueGroup=function(v){switch(!0){case v>=90:return 4;case v>=80:return 3;case v>=70:return 2;default:return 1}},dataService.getReportingStatistics(scope.model.activeAccount.accountID,function(d){d.fields=commonService.excludeMetafields(d.fields,scope.model.excludes),d.fields=d.fields.filter(function(f){return!f.isIndicatorExclusive&&!f.isCalculated}),1==scope.model.unitType&&(d.fields=d.fields.filter(function(f){return!("cgm"===f.columnName||"pumpOngoing"===f.columnName)}));var list=d.fields.map(function(f){var denom;switch(193==f.id&&(f.question="Behandlad fÃ¶r Ã¶gonkomplikation"),140==f.id&&(f.question="Fysisk aktivitet"),141==f.id&&(f.question="HypoglykemifÃ¶rekomst svÃ¥ra"),179==f.id&&(f.question="Medelglukos i CGM/FGM"),180==f.id&&(f.question="SD medelglukos i CGM/FGM"),181==f.id&&(f.question="Andel (%) glukosvÃ¤rden under 4 mmol/L i CGM/FGM"),f.columnName){case"pumpOngoing":denom="pumpUsing";break;case"cgm":denom="insulinTreated";break;case"retinopathyDiagnosis":denom="hasRetinopathy";break;case"smokingHabit":case"snuffingHabit":case"smokingEndYear":case"snuffingEndYear":denom="ageGT13";break;case"uAlbCreatinine":case"albuminuria":case"fundusExaminationDate":case"bpSystolic":case"bpDiastolic":case"hypertension":case"antihypertensives":case"diabeticRetinopathy":case"lipidLoweringDrugs":denom="ageGT10";break;case"physicalActivityKids":denom="ageGT5";break;default:denom="contactDate"}var o={columnName:f.columnName,min:f.minValue,max:f.maxValue,question:f.question,unitShare:{value:scope.getShare(d.counts[3][f.columnName],d.counts[3][denom]),group:null},countyShare:{value:scope.getShare(d.counts[2][f.columnName],d.counts[2][denom]),group:null},sweShare:{value:scope.getShare(d.counts[1][f.columnName],d.counts[1][denom]),group:null}};return o.unitShare.group=scope.getValueGroup(o.unitShare.value),o.countyShare.group=scope.getValueGroup(o.countyShare.value),o.sweShare.group=scope.getValueGroup(o.sweShare.value),o});scope.model.reportList=scope.sortRepList(list,scope.model.reportSort)})}return{restrict:"A",templateUrl:"src/components/StatReporting/StatReporting.html",link:link,scope:{model:"="}}}]),angular.module("ndrApp").directive("form",["$q","dataService","calcService","$state","$modal","$filter",function($q,dataService,calcService,$state,$modal,$filter){function link(scope,element,attrs){scope.getErrorClass=function(hasError){return hasError?"has-error":"has-no-error"},scope.init=function(){scope.subject&&(scope[scope.name].$setPristine(),scope.setModel(),scope.setIteration(),scope.setOnChange(),scope.setVisibility(),scope.setModelInitial())},scope.setModelInitial=function(){scope.questions.forEach(function(q){if(q.visible){q.visible(scope.model,scope.subject)||(scope.model[q.columnName]=null)}})},scope.isVisible=function(question){return!question.visible||question.visible(scope.model,scope.subject)},scope.setVisibility=function(){for(var qc in scope.config.visibility)scope.questions.forEach(function(q){q.columnName==qc&&(q.visible=scope.config.visibility[qc])})},scope.setOnChange=function(){for(var qc in scope.config.onChange)scope.questions.forEach(function(q){q.columnName==qc&&(q.onChange=scope.config.onChange[qc])})},scope.setIteration=function(){scope.config.iterateQuestions.forEach(function(qi){scope.questions.forEach(function(q){q.columnName===qi&&(scope.config.iterateCondition[q.columnName]?q.isIterated=scope.config.iterateCondition[q.columnName](scope.unitType):q.isIterated=!0)})})},scope.viewVal=function(question,contact,subject){var val=contact[question.columnName],d=question.domain;switch(!0){case d.isEnumerated:return scope.getListVal(question.domain,val);case 105==d.domainID:return val?val.split("T")[0]:null;default:return null!=val?val.toString().replace(".",","):null}},scope.getListVal=function(domain,val){for(var i=0;i<domain.domainValues.length;i++)if(domain.domainValues[i].code==val)return domain.domainValues[i].text},scope.setModel=function(){var ret={};ret.socialNumber=scope.subject.socialNumber;for(var i=0;i<scope.questions.length;i++)if(ret[scope.questions[i].columnName]=null,scope.updateEntity){ret.id=scope.updateEntity.contactID;var val=null!=scope.updateEntity[scope.questions[i].columnName]?scope.updateEntity[scope.questions[i].columnName]:null;null==!val&&(val=scope.subject[scope.questions[i].columnName]),ret[scope.questions[i].columnName]=val}else scope.config.defaults[scope.questions[i].columnName]&&(ret[scope.questions[i].columnName]=scope.config.defaults[scope.questions[i].columnName]()),scope.questions[i].isIterated&&scope.iterateEntity&&(ret[scope.questions[i].columnName]=scope.iterateEntity[scope.questions[i].columnName]||scope.subject[scope.questions[i].columnName],"yearOfOnset"==scope.questions[i].columnName&&null!=scope.subject.incidence&&null!=scope.subject.incidence.incDate&&(ret[scope.questions[i].columnName]=parseInt(scope.subject.incidence.incDate.substring(0,4))));ret.isValid=!0,scope.model=ret},scope.getQuestionClass=function(hasError,hasValue){return hasError?"has-error":hasValue?"has-value":"has-no-error"},scope.$watch("subject",function(newValue){scope.init()}),scope.$watch("updateEntity",function(newValue){scope.init()}),scope.$watch("newIndex",function(newValue){scope.init()})}return{restrict:"A",templateUrl:"src/components/ReportForm/Form.html",link:link,scope:{name:"=",subject:"=",updateEntity:"=",iterateEntity:"=",refModels:"=",questions:"=",config:"=",newIndex:"=",model:"=",unitType:"="}}}]),angular.module("ndrApp").directive("reportFormNew",["$q","dataService","calcService","$state","$modal","$filter",function($q,dataService,calcService,$state,$modal,$filter){function link(scope,element,attrs){scope.formConfig={iterateQuestions:["height","pumpOngoing","pumpOngoingSerial","treatment","insulinMethod","pumpIndication","pumpClosureReason","diabeticRetinopathy","smokingHabit","snuffingHabit","footExaminationDate","laserTreatment","visualLoss","diagnosisWorseSeeingEye","fundusExaminationDate","cerebrovascularDisease","ischemicHeartDisease","microscopicProteinuria","macroscopicProteinuria","aspirin","lipidLoweringDrugs","antihypertensives","height","yearOfOnset","diabetesType","thyreoidea","celiaki"],iterateCondition:{height:function(unitType){return 3!=unitType},smokingHabit:function(unitType){return 3!=unitType},snuffingHabit:function(unitType){return 3!=unitType}},defaults:{contactDate:function(){return calcService.getStringDate(new Date)}},onChange:{height:function(qscope){var isValid=qscope.model.height>=qscope.question.minValue&&qscope.model.height<=qscope.question.maxValue;qscope.model.bmi=isValid?qscope.methods.tryCalculateBMI(qscope.model.weight,qscope.model.height):null,qscope.model.bmiSDS=qscope.methods.tryCalculateBMISDS(qscope.subject,qscope.model.contactDate,qscope.model.bmi),qscope.model.isoBMI=qscope.methods.tryCalculateIsoBMI(qscope.subject,qscope.model.contactDate,qscope.model.bmi)},weight:function(qscope){var isValid=qscope.model.weight>=qscope.question.minValue&&qscope.model.weight<=qscope.question.maxValue;qscope.model.bmi=isValid?qscope.methods.tryCalculateBMI(qscope.model.weight,qscope.model.height):null,qscope.model.isoBMI=qscope.methods.tryCalculateIsoBMI(qscope.subject,qscope.model.contactDate,qscope.model.bmi),qscope.model.bmiSDS=qscope.methods.tryCalculateBMISDS(qscope.subject,qscope.model.contactDate,qscope.model.bmi),qscope.model.eKgPerDay=isValid?qscope.methods.tryCalculateE24Kg(qscope.model.weight,qscope.model.noInsDosePerDay):null},bmi:function(qscope){qscope.model.isoBMI=qscope.methods.tryCalculateIsoBMI(qscope.subject,qscope.model.contactDate,qscope.model.bmi),qscope.model.bmiSDS=qscope.methods.tryCalculateBMISDS(qscope.subject,qscope.model.contactDate,qscope.model.bmi)},noInsDosePerDay:function(qscope){var isValid=qscope.model.noInsDosePerDay>0;qscope.model.eKgPerDay=isValid?qscope.methods.tryCalculateE24Kg(qscope.model.weight,qscope.model.noInsDosePerDay):null},hdl:function(qscope){qscope.model.ldl=qscope.methods.tryCalculateLDL(qscope.model.hdl,qscope.model.cholesterol,qscope.model.triglyceride)},diabeticRetinopathy:function(qscope){1!=qscope.model.diabeticRetinopathy&&(qscope.model.retinopathyDiagnosis=null)},cholesterol:function(qscope){qscope.model.ldl=qscope.methods.tryCalculateLDL(qscope.model.hdl,qscope.model.cholesterol,qscope.model.triglyceride)},triglyceride:function(qscope){qscope.model.ldl=qscope.methods.tryCalculateLDL(qscope.model.hdl,qscope.model.cholesterol,qscope.model.triglyceride)},treatment:function(qscope){3!==qscope.model.treatment&&4!==qscope.model.treatment&&9!==qscope.model.treatment&&10!==qscope.model.treatment&&(qscope.model.insulinMethod=null,qscope.model.pumpIndication=null,qscope.model.pumpClosureReason=null,qscope.model.pumpOngoing=null,qscope.model.pumpOngoingSerial=null)},insulinMethod:function(qscope){2!=qscope.model.insulinMethod&&(qscope.model.pumpIndication=null,qscope.model.pumpClosureReason=null,qscope.model.pumpOngoing=null,qscope.model.pumpOngoingSerial=null)},creatinine:function(qscope){qscope.model.gfr=qscope.methods.tryCalculateGFR(qscope.subject,qscope.model.contactDate,qscope.model.creatinine)},contactDate:function(qscope){qscope.model.gfr=qscope.methods.tryCalculateGFR(qscope.subject,qscope.model.contactDate,qscope.model.creatinine),qscope.model.hypertension=qscope.methods.tryCalculateHypertension(qscope.model.bpSystolic,qscope.model.bpDiastolic,qscope.subject,qscope.model.contactDate),qscope.model.isoBMI=qscope.methods.tryCalculateIsoBMI(qscope.subject,qscope.model.contactDate,qscope.model.bmi),qscope.model.bmiSDS=qscope.methods.tryCalculateBMISDS(qscope.subject,qscope.model.contactDate,qscope.model.bmi);var isValid=!qscope.methods.isFuture(qscope.model.contactDate);qscope.question.errorMessage=isValid?null:"BesÃ¶k i framtiden kan inte lÃ¤ggas in",qscope.form.contactDate.$setValidity("checkContactDate",isValid),isValid&&(isValid=qscope.methods.validateNotEqualOtherContactDates(qscope),qscope.question.errorMessage=isValid?null:"Det finns redan ett besÃ¶k denna dag",qscope.form.contactDate.$setValidity("checkContactDate",isValid))},bpSystolic:function(qscope){void 0!==qscope.model.hypertension&&(qscope.model.hypertension=qscope.methods.tryCalculateHypertension(qscope.model.bpSystolic,qscope.model.bpDiastolic,qscope.subject,qscope.model.contactDate))},bpDiastolic:function(qscope){void 0!==qscope.model.hypertension&&(qscope.model.hypertension=qscope.methods.tryCalculateHypertension(qscope.model.bpSystolic,qscope.model.bpDiastolic,qscope.subject,qscope.model.contactDate))}},visibility:{pumpOngoing:function(model){return(3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment)&&2==model.insulinMethod},pumpOngoingSerial:function(model){return(3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment)&&2==model.insulinMethod},pumpIndication:function(model){return(3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment)&&2==model.insulinMethod},pumpClosureReason:function(model){return(3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment)&&2==model.insulinMethod},insulinMethod:function(model){return 3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment},cgm:function(model){return 3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment},cgmType:function(model){return 1==model.cgm},retinopathyDiagnosis:function(model){return 1==model.diabeticRetinopathy},smokingHabit:function(model,subject){return!model.contactDate||calcService.calcAge(subject.socialNumber,model.contactDate)>=13},snuffingHabit:function(model,subject){return!model.contactDate||calcService.calcAge(subject.socialNumber,model.contactDate)>=13},smokingEndYear:function(model){return 4==model.smokingHabit},snuffingEndYear:function(model){return 4==model.snuffingHabit},diagnosisWorseSeeingEye:function(model){return 1==model.diabeticRetinopathy},noInsDosePerDay:function(model){return 3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment},noUnitsBasePerDay:function(model){return 3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment},noUnitsLongPerDay:function(model){return 3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment},ekgPerDay:function(model){return 3==model.treatment||4==model.treatment||9==model.treatment||10==model.treatment}},methods:{tryCalculateHypertension:function(bpSystolic,bpDiastolic,subject,contactDate){if((bpSystolic>0||bpDiastolic>0)&&contactDate){var age=calcService.calcAge(subject.socialNumber,contactDate);if(age>0&&age<18)return calcService.calcHypertension(subject.sex,age,bpSystolic,bpDiastolic)}return null},tryCalculateLDL:function(hdl,cholesterol,triglyceride){return hdl>0&&cholesterol>0&&triglyceride>0?calcService.calcLDL(hdl,cholesterol,triglyceride,1):null},tryCalculateIsoBMI:function(subject,contactDate,bmi){if(bmi&&contactDate){var age=calcService.calcAge(subject.socialNumber,contactDate,1,.5);return calcService.calcIsoBMI(subject.sex,age,bmi)}return null},tryCalculateBMISDS:function(subject,contactDate,bmi){if(bmi&&contactDate){var age=calcService.calcAge(subject.socialNumber,contactDate);return calcService.calcBMISDS(bmi,subject.sex,age,1)}return null},tryCalculateBMI:function(height,weight){return weight>0&&height>0?calcService.calcBMI(height,weight,1):null},tryCalculateE24Kg:function(weight,doses){return weight>0&&doses>0?calcService.calcE24Kg(weight,doses,2):null},tryCalculateGFR:function(subject,contactDate,creatinine){if(creatinine>0&&10==contactDate.length){var age=calcService.calcAge(subject.socialNumber,contactDate);return calcService.calcGFR(age,creatinine,subject.sex,1)}return null},isFuture:function(stringDate){return stringDate>this.getTodayAsString()},getTodayAsString:function(){var today=new Date;return this.getStringDate(today)},getStringDate:function(date){var mm=date.getMonth()+1,dd=date.getDate();return[date.getFullYear(),(mm>9?"":"0")+mm,(dd>9?"":"0")+dd].join("-")},validateNotEqualOtherContactDates:function(qscope){var thedate=qscope.model.contactDate,isValid=!0;if(qscope.subject.contacts)for(var i=0;i<qscope.subject.contacts.length;i++){var c=qscope.subject.contacts[i];qscope.model.id?c.contactID!=qscope.model.id&&(isValid=!(c.contactDate==thedate)):c.contactDate==thedate&&(isValid=!1)}return isValid}}},scope.formOptionalsConfig={iterateQuestions:["dal","das"],iterateCondition:{},defaults:{},onChange:{},visibility:{},methods:{}},scope.model={activeAccount:scope.accountModel.activeAccount,isLoading:!1,refContacts:[],refContactsOptionals:[],iterateEntity:null,formName:"contactForm",formOptionalsName:"contactOptionalForm",refContactCount:2,contactModel:null,contactOptionalsModel:null,refIndex:0},scope.setModelInitial=function(){scope.questions.forEach(function(q){if(q.visible){q.visible(scope.model,scope.subject)||(scope.model[q.columnName]=null)}})},scope.isVisible=function(question){return!question.visible||question.visible(scope.model,scope.subject)},scope.setVisibility=function(){for(var qc in scope.config.visibility)scope.questions.forEach(function(q){q.columnName==qc&&(q.visible=scope.config.visibility[qc])})},scope.setOnChange=function(){for(var qc in scope.config.onChange)scope.questions.forEach(function(q){q.columnName==qc&&(q.onChange=scope.config.onChange[qc])})},scope.setIteration=function(){scope.config.iterateQuestions.forEach(function(qi){scope.questions.forEach(function(q){q.columnName===qi&&(q.isIterated=!0)})})},scope.viewVal=function(question,contact,subject){var val=contact[question.columnName],d=question.domain;switch(!0){case d.isEnumerated:return scope.getListVal(question.domain,val);case 105==d.domainID:return val?val.split("T")[0]:null;default:return null!=val?val.toString().replace(".",","):null}},scope.getListVal=function(domain,val){for(var i=0;i<domain.domainValues.length;i++)if(domain.domainValues[i].code==val)return domain.domainValues[i].text},scope.setModel=function(){var ret={};ret.socialNumber=scope.subject.socialNumber;for(var i=0;i<scope.questions.length;i++)if(ret[scope.questions[i].columnName]=null,scope.updateEntity){ret.id=scope.updateEntity.contactID;var val=null!=scope.updateEntity[scope.questions[i].columnName]?scope.updateEntity[scope.questions[i].columnName]:null;null==!val&&(val=scope.subject[scope.questions[i].columnName]),ret[scope.questions[i].columnName]=val}else scope.config.defaults[scope.questions[i].columnName]&&(ret[scope.questions[i].columnName]=scope.config.defaults[scope.questions[i].columnName]()),scope.questions[i].isIterated&&scope.iterateEntity&&(ret[scope.questions[i].columnName]=scope.iterateEntity[scope.questions[i].columnName]||scope.subject[scope.questions[i].columnName]);ret.isValid=!0,console.log("updateEntity=",scope.updateEntity),console.log("inital model=",ret),scope.model=ret},scope.getQuestionClass=function(hasError,hasValue){return hasError?"has-error":hasValue?"has-value":"has-no-error"},scope.init=function(){scope.serverSaveErrors=[],scope.model.refIndex=scope.getDefaultRefIndex(),scope.setContacts(scope.model.refIndex)},scope.later=function(){scope.model.refIndex++,scope.setContacts(scope.model.refIndex)},scope.sooner=function(){scope.model.refIndex--,scope.setContacts(scope.model.refIndex)},scope.getDefaultRefIndex=function(){if(!scope.contactToUpdate)return 0;var i,loops=scope.subject.contacts.length;for(i=0;i<=loops;i++)if(scope.subject.contacts[i].contactID==scope.contactToUpdate.contactID)return i+1},scope.setContacts=function(index){var arr=[],arrOpt=[];if(scope.model.refContactCount)for(var j=0;j<scope.model.refContactCount&&scope.subject.contacts[j+index];j++)arr.push(scope.subject.contacts[j+index]),arrOpt.push(scope.subject.contacts[j+index].optionals||{});scope.model.lastContact=scope.contactToUpdate?null:arr[0],scope.model.refContacts=arr,scope.model.refContactsOptionals=arrOpt},scope.saveContact=function(){if(3==scope.accountModel.activeAccount.unit.typeID){if(null==scope.model.contactModel.hypoglycemiaKids){var hi=confirm("Du har glÃ¶mt att spara in uppgift om Hypoglykemi? Vill du spara Ã¤ndÃ¥?");if(0==hi)return}if(null==scope.model.contactModel.ketoKids){var hi=confirm("Du har glÃ¶mt att spara in uppgift om Ketoacidos? Vill du spara Ã¤ndÃ¥?");if(0==hi)return}}scope.serverSaveErrors=[],scope.isSaving=!0,scope.model.contactModel.optionals=scope.model.contactOptionalsModel,console.log("saving",scope.model.contactModel);dataService.saveContactNew(scope.model.contactModel).then(function(response){console.log("after save",response),scope.isSaving=!1,$modal.open({templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",backdrop:!0,scope:scope})}).catch(function(response){console.log(response);var data=response.data;if(null!=data.ModelState)for(var prop in data.ModelState)data.ModelState.hasOwnProperty(prop)&&scope.serverSaveErrors.push(data.ModelState[prop][0]);else response.statusText?scope.serverSaveErrors.push(response.statusText):scope.serverSaveErrors.push("Ett okÃ¤nt fel intrÃ¤ffade. Var god fÃ¶rsÃ¶k igen senare.");scope.isSaving=!1})},scope.$watch("subject",function(newValue){scope.init()}),scope.$watch("newIndex",function(newValue){scope.init()})}return{restrict:"A",templateUrl:"src/components/ReportForm/ReportFormNew.html",link:link,scope:{accountModel:"=",subject:"=",contactToUpdate:"=",newIndex:"=",questions:"=",optionalQuestions:"="}}}]),angular.module("ndrApp").directive("incidenceForm",["$q","dataService","calcService","$state","$modal","$filter",function($q,dataService,calcService,$state,$modal,$filter){function link(scope,element,attrs){scope.activeAccount=scope.accountModel.activeAccount,scope.serverSaveErrors=[],scope.isLoaded=!1,scope.age=null,scope.config={onChange:{incHeight:function(qscope){var isValid=qscope.model.incHeight>=qscope.question.minValue&&qscope.model.incHeight<=qscope.question.maxValue;qscope.model.incBMI=isValid?qscope.methods.tryCalculateBMI(qscope.model.incWeight,qscope.model.incHeight):null,qscope.model.incBMISDS=isValid?qscope.methods.tryCalculateBMISDS(qscope.model.incBMI,qscope.model.incDate,qscope.subject):null},incWeight:function(qscope){var isValid=qscope.model.incWeight>=qscope.question.minValue&&qscope.model.incWeight<=qscope.question.maxValue;qscope.model.incBMI=isValid?qscope.methods.tryCalculateBMI(qscope.model.incWeight,qscope.model.incHeight):null,qscope.model.incBMISDS=isValid?qscope.methods.tryCalculateBMISDS(qscope.model.incBMI,qscope.model.incDate,qscope.subject):null}},methods:{tryCalculateBMI:function(height,weight){return weight>0&&height>0?calcService.calcBMI(height,weight,1):null},tryCalculateBMISDS:function(bmi,date,subject){if(bmi>0&&date){var age=calcService.calcAge(subject.socialNumber,date);return calcService.calcBMISDS(bmi,subject.sex,age,1)}return null},tryCalculateBPSystolicSDS:function(){if(!(scope.model.incBPSystolic&&scope.subject.sex&&scope.age&&scope.model.incHeight))return null;scope.model.incBPSystolicSDS=calcService.calcSystSDS(scope.model.incBPSystolic,scope.subject.sex,scope.age,scope.model.incHeight,1)},tryCalculateIncBPDiastolicSDS:function(){if(!(scope.model.incBPDiastolic&&scope.subject.sex&&scope.age&&scope.model.incHeight))return null;scope.model.incBPDiastolicSDS=calcService.calcDiastSDS(scope.model.incBPDiastolic,scope.subject.sex,scope.age,scope.model.incHeight,1)}}},scope.$on("newUser",scope.load),scope.$watch("subject",function(newValue){scope.init()}),scope.init=function(){scope.setOnChange(),scope.setModel(),scope.setGroups(),scope.incidenceForm.$setPristine()},scope.setOnChange=function(){for(var qc in scope.config.onChange)scope.questions.forEach(function(q){q.columnName==qc&&(q.onChange=scope.config.onChange[qc])})},scope.setGroups=function(){var groups=[{header:null,columnNames:["incDate","incDiagnosisSweden","incHeight","incWeight","incBMI","incBMISDS","incBPSystolic","incBPDiastolic"],questions:[]},{header:"Insjuknandesymtom",columnNames:["incPolyuri","incPolydipsi","incWeightloss","incAcantosisNigricans"],questions:[]},{header:"Prover fÃ¶rsta dygnet",columnNames:["incFDPH","incFDSB","incFDPG","incFDHbA1c","incFDBK","incHap1","incHap2","incGAD","incOCell","incCPep","incIAA","incIA2RBA","incZnt8A"],questions:[]}];groups.forEach(function(g){g.columnNames.forEach(function(c){scope.questions.forEach(function(q){c==q.columnName&&g.questions.push(q)})})}),console.log("groups",groups),scope.groups=groups},scope.getQuestionClass=function(hasError,hasValue){return hasError?"has-error":hasValue?"has-value":"has-no-error"},scope.setModel=function(){scope.model=scope.subject?scope.getModel(scope.subject.incidence,scope.subject.socialNumber,scope.subject.subjectID):scope.getModel(),scope.setAge(),scope.setIncBPSystolicSDS(),scope.setIncBPDiastolicSDS()},scope.filterValue=function($event){isNaN(String.fromCharCode($event.keyCode))&&44!==$event.keyCode&&46!==$event.keyCode&&$event.preventDefault()},scope.setAge=function(){scope.age=scope.model.incDate?calcService.calcAge(scope.subject.socialNumber,scope.model.incDate):null},scope.getModel=function(incidence,socialNumber,subjectID){return{socialNumber:socialNumber,subjectID:subjectID,incDate:incidence?incidence.incDate:null,incDiagnosisSweden:incidence?incidence.incDiagnosisSweden:null,incPolyuri:incidence?incidence.incPolyuri:null,incPolydipsi:incidence?incidence.incPolydipsi:null,incWeightloss:incidence?incidence.incWeightloss:null,incAcantosisNigricans:incidence?incidence.incAcantosisNigricans:null,incHeight:incidence?incidence.incHeight:null,incWeight:incidence?incidence.incWeight:null,incBMI:incidence?incidence.incBMI:null,incBMISDS:incidence?incidence.incBMISDS:null,incBPSystolic:incidence?incidence.incBPSystolic:null,incBPDiastolic:incidence?incidence.incBPDiastolic:null,incFDPH:incidence?incidence.incFDPH:null,incFDSB:incidence?incidence.incFDSB:null,incFDBE:incidence?incidence.incFDBE:null,incFDPG:incidence?incidence.incFDPG:null,incFDHbA1c:incidence?incidence.incFDHbA1c:null,incFDBK:incidence?incidence.incFDBK:null,incDone:null!=incidence&&incidence.incDone,incGAD:incidence?incidence.incGAD:null,incOCell:incidence?incidence.incOCell:null,incCPep:incidence?incidence.incCPep:null,incHap1:incidence?incidence.incHap1:null,incHap2:incidence?incidence.incHap2:null,incIAA:incidence?incidence.incIAA:null,incIA2RBA:incidence?incidence.incIA2RBA:null,incZnt8A:incidence?incidence.incZnt8A:null}},scope.setIncBPSystolicSDS=function(){if(!(scope.model.incBPSystolic&&scope.subject.sex&&scope.age&&scope.model.incHeight))return null;scope.model.incBPSystolicSDS=calcService.calcSystSDS(scope.model.incBPSystolic,scope.subject.sex,scope.age,scope.model.incHeight,1)},scope.setIncBPDiastolicSDS=function(){if(!(scope.model.incBPDiastolic&&scope.subject.sex&&scope.age&&scope.model.incHeight))return null;scope.model.incBPDiastolicSDS=calcService.calcDiastSDS(scope.model.incBPDiastolic,scope.subject.sex,scope.age,scope.model.incHeight,1)},scope.tryCalculateBMI=function(){scope.model.incWeight>0&&scope.model.incHeight>0?(scope.model.incBMI=calcService.calcBMI(scope.model.incWeight,scope.model.incHeight,1),console.log("bmi",scope.model.incBMI),scope.model.incBMI&&scope.age&&(scope.model.incBMISDS=calcService.calcBMISDS(scope.model.incBMI,scope.subject.sex,scope.age,1))):scope.model.incBMI=null},scope.today=function(){scope.contactModel.incidenceDate=new Date},scope.clear=function(){scope.contactModel.incidenceDate=null},scope.datePickers={incDate:{opened:!1}},scope.disabled=function(date,mode){var d=new Date;return date>=d.setDate(d.getDate()+1)},scope.toggleMin=function(){scope.minDate=scope.minDate?null:new Date},scope.toggleMin(),scope.openPicker=function($event,dateField){$event.preventDefault(),$event.stopPropagation(),scope.datePickers[dateField].opened=!0},scope.dateOptions={formatYear:"yy",startingDay:1},scope.formats=["yyyy-MM-dd","yyyy/MM/dd","yyyy.MM.dd","shortDate"],scope.format=scope.formats[0],scope.validateContactDateInput=function(){var date=scope.incidenceForm.incidenceDate.$viewValue,isValid=!0;return void 0===scope.contactModel.incidenceDate&&(isValid=!1),isValid=scope.validateDate(date),scope.incidenceForm.incidenceDate.$setValidity("checkInput",isValid),isValid},scope.validateDate=function(viewVal){var isValid=!0;return"string"==typeof viewVal&&10!==viewVal.length&&(isValid=!1),isValid},scope.getStringDate=function(date){if("string"==typeof date)return date;if(void 0!==date&&null!==date&&date instanceof Date&&!isNaN(date.valueOf())){var yyyy=date.getFullYear().toString(),mm=(date.getMonth()+1).toString(),dd=date.getDate().toString();return yyyy+"-"+(mm[1]?mm:"0"+mm[0])+"-"+(dd[1]?dd:"0"+dd[0])}},scope.setDateValues=function(){scope.model.incDate=scope.getStringDate(scope.model.incDate)},scope.tryDone=function(){console.log("clicked",scope.model.incDone),scope.model.incDone||scope.model.incDate||(alert("Du kan inte klarmarkera en incidens utan att ha fyllt i ett diagnosdatum"),scope.model.incDone=!scope.model.incDone)},scope.saveForm=function(){scope.serverSaveErrors=[],scope.isSaving=!0,scope.setDateValues(),dataService.saveIncidence(scope.model,scope.subject.incidence).then(function(response){scope.isSaving=!1,$modal.open({templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",backdrop:!0,scope:scope})}).catch(function(response){var data=response.data;if(null!=data.ModelState)for(var prop in data.ModelState)data.ModelState.hasOwnProperty(prop)&&scope.serverSaveErrors.push(data.ModelState[prop][0]);else scope.serverSaveErrors.push("Ett okÃ¤nt fel intrÃ¤ffade. Var god fÃ¶rsÃ¶k igen senare.");scope.isSaving=!1})},scope.removeItemFromArray=function(array,id){return $filter("filter")(scope.subject.contacts,function(d){return d.contactID!==id})},scope.init()}return{restrict:"A",templateUrl:"src/components/IncidenceForm/IncidenceForm.html",link:link,scope:{accountModel:"=",subject:"=",questions:"="}}}]),angular.module("ndrApp").directive("statChar",["$q","dataService","$state",function($q,dataService,$state){function link(scope){var localModel={allDTTypes:[{id:0,name:"Alla"},{id:1,name:"Typ 1"},{id:2,name:"Typ 2"},{id:3,name:"Annan specificerad diabetestyp"},{id:5,name:"Oklar"},{id:9,name:"Typ saknas"}],unitDTTypes:[],activeDTType:null,charStatistics:null,unitType:scope.model.activeAccount.unit.typeID};scope.model=jQuery.extend(scope.model,localModel),scope.setDisplayedDTType=function(id){scope.model.activeDTType=_.find(scope.model.unitDTTypes,function(d){return id===d.id})},scope.countClicked=function(area,field,dType){if(!area||!area.noClick){var today=new Date,valueFilter={dateFrom:new Date(today-31536e6),dateTo:today,d:{value:1}};if((scope.model.activeDTType||dType)&&(valueFilter.d={value:scope.model.activeDTType.id||dType},dType&&9==dType&&(valueFilter.d.undef=!0)),field)switch(field.name){case"male":valueFilter.s={value:1};break;case"female":valueFilter.s={value:2};break;case"ageLT7":valueFilter.age={min:0,max:6};break;case"age7to11":console.log("age7to11"),valueFilter.age={min:7,max:11};break;case"age12to17":valueFilter.age={min:12,max:17};break;case"ageLT30":valueFilter.age={min:18,max:29};break;case"age30to64":valueFilter.age={min:30,max:64};break;case"age65to79":valueFilter.age={min:65,max:79};break;case"ageGT80":valueFilter.age={min:80,max:120};break;case"durLT1":case"dur1to3":case"dur4to5":case"dur6to10":case"durGT10":case"durLT10":case"dur10to20":case"dur20to29":case"dur30to39":case"dur40to49":case"durGT50":valueFilter.y={min:1920,max:today.getFullYear()};break;case"treat1":valueFilter.treatment={value:1};break;case"treat2":valueFilter.treatment={value:2};break;case"treat3":valueFilter.treatment={value:3};break;case"treat4":valueFilter.treatment={value:4};break;case"treatglp1":valueFilter.treatment={};break;case"imInjection":valueFilter.insulinMethod={value:1};break;case"imPump":valueFilter.insulinMethod={value:2};break;case"cgmYes":valueFilter.cgm={value:1};break;case"fgm":valueFilter.cgmType={value:4}}dataService.setSearchFilters("values",valueFilter),$state.go("main.account.patients")}},dataService.getPatientsStatistics(scope.model.activeAccount.accountID,function(d){if(scope.model.charStatistics=d,1==scope.model.unitType)scope.model.unitDTTypes.push(scope.model.allDTTypes[0]),scope.model.activeDTType=scope.model.unitDTTypes[0];else if(2==scope.model.unitType){for(var p in d)null!=d[p][3]&&scope.model.unitDTTypes.push(_.find(scope.model.allDTTypes,function(d){return d.id==p}));scope.model.unitDTTypes=scope.model.unitDTTypes.filter(function(d){return[0,1,2].indexOf(d.id)>-1}),scope.model.activeDTType=scope.model.unitDTTypes[1]}else scope.model.unitDTTypes.push(scope.model.allDTTypes[0]),scope.model.unitDTTypes.push(scope.model.allDTTypes[1]),scope.model.activeDTType=scope.model.unitDTTypes[1];3===scope.model.unitType?scope.model.charConfig=[{header:"KÃ¶n",hiddenIfDTTypes:[],fields:[{name:"male",header:"Pojkar"},{name:"female",header:"Flickor"}],defaultDenom:"total"},{header:"Ãlder",hiddenIfDTTypes:[],fields:[{name:"ageLT7",header:"0-6 Ã¥r"},{name:"age7to11",header:"7-11 Ã¥r"},{name:"age12to17",header:"12-17 Ã¥r"}],defaultDenom:"total"},{header:"Duration",hiddenIfDTTypes:[],noClick:!0,fields:[{name:"durLT1",header:"<1 Ã¥r"},{name:"dur1to3",header:"1-3 Ã¥r"},{name:"dur4to5",header:"4-5 Ã¥r"},{name:"dur6to10",header:"6-10 Ã¥r"},{name:"durGT10",header:">10 Ã¥r"}],defaultDenom:"dur"},{header:"Metod att ge insulin",hiddenIfDTTypes:[0,2,3,4,5,9],fields:[{name:"imInjection",header:"injektion"},{name:"imPump",header:"pump"}],defaultDenom:"total"},{header:"Kontinuerlig klukosmÃ¤tning",hiddenIfDTTypes:[0,2,3,4,5,9],fields:[{name:"cgmYes",header:"anvÃ¤nder CGM/FGM",denom:"insulin",helpText:"NÃ¤mnaren Ã¤r summan av alla insulinbehandlade."},{name:"fgm",header:"varav FGM",denom:"cgmYes",helpText:"NÃ¤mnaren Ã¤r summan av alla som anvÃ¤nder CGM."}],defaultDenom:"cgmYes"}]:scope.model.charConfig=[{header:"KÃ¶n",
hiddenIfDTTypes:[],fields:[{name:"male",header:"mÃ¤n"},{name:"female",header:"kvinnor"}],defaultDenom:"total"},{header:"Ãlder",hiddenIfDTTypes:[],fields:[{name:"ageLT30",header:"18-29 Ã¥r"},{name:"age30to64",header:"30-64 Ã¥r"},{name:"age65to79",header:"65-79 Ã¥r"},{name:"ageGT80",header:"80- Ã¥r"}],defaultDenom:"total"},{header:"Duration",hiddenIfDTTypes:[],noClick:!0,fields:[{name:"durLT10",header:"0-9 Ã¥r"},{name:"dur10to20",header:"10-19 Ã¥r"},{name:"dur20to29",header:"20-29 Ã¥r"},{name:"dur30to39",header:"30-39 Ã¥r"},{name:"dur40to49",header:"40-49 Ã¥r"},{name:"durGT50",header:"50- Ã¥r"}],defaultDenom:"dur"},{header:"Diabetesbehandling",hiddenIfDTTypes:[1],fields:[{name:"treat1",header:"enbart kost"},{name:"treat2",header:"tabletter"},{name:"treat3",header:"insulin"},{name:"treat4",header:"tablett + insulin"},{name:"treatGLP1",header:"GLP1"}],defaultDenom:"treat"},{header:"Metod att ge insulin",hiddenIfDTTypes:[0,2,3,4,5,9],fields:[{name:"imInjection",header:"injektion"},{name:"imPump",header:"pump"}],defaultDenom:"total"},{header:"Kontinuerlig klukosmÃ¤tning",hiddenIfDTTypes:[0,2,3,4,5,9],fields:[{name:"cgmYes",header:"anvÃ¤nder CGM/FGM",denom:"insulin",helpText:"NÃ¤mnaren Ã¤r summan av alla insulinbehandlade."},{name:"fgm",header:"varav FGM",denom:"cgmYes",helpText:"NÃ¤mnaren Ã¤r summan av alla som anvÃ¤nder CGM."}],defaultDenom:"cgmYes"}]})}return{restrict:"A",templateUrl:"src/components/StatChar/StatChar.html",link:link,scope:{model:"="}}}]),angular.module("ndrApp").directive("ndrQuestion",[function(){return{restrict:"A",template:['<div class="row Report-formGroup" ><div class="col-md-5 Report-formGroup-form">','<label>{{ question.question }}</label><i class="fa fa-question-circle helpNote" ng-show="question.helpNote != null" tooltip="{{question.helpNote}}"></i>','<div ndr-Question-List ng-if="question.domain.isEnumerated" question="question"></div>','<div ndr-Question-Numeric ng-if="question.domain.domainID == 101" question="question"></div>','<div ndr-Question-Decimal1 ng-if="question.domain.domainID == 102" question="question"></div>','<div ndr-Question-Decimal2 ng-if="question.domain.domainID == 103" question="question"></div>','<p ng-show="question.iterate && form.{{question.columnName}}.$pristine && question.value != null" class="Report-formItemHelp help-block iteration">OBS FÃ¶rifyllt frÃ¥n tidigare rapportering</p>',"</div></div>"].join(""),require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form},replace:!0,scope:{question:"="}}}]),angular.module("ndrApp").directive("ndrQuestionList",[function(){return{restrict:"A",template:'<select id="{{ question.columnName }}" name="{{ question.columnName }}" placeholder="{{question.question}}" ng-model="question.value" class="form-control"><option value="">-- vÃ¤lj --</option><option ng-repeat="domainvalue in question.domain.domainValues" value="{{domainvalue.code}}">{{domainvalue.text}}</option></select>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form},replace:!0,scope:{question:"="}}}]),angular.module("ndrApp").directive("ndrQuestionNumeric",[function(){return{restrict:"A",template:'<div ng-class="getErrorClass(form.{{ question.columnName}}.$invalid && !form.{{ question.columnName}}.$pristine)"><input name="{{question.columnName}}" type="number" min="{{question.minValue || 0}}" max="{{question.maxValue || 1000}}" class="form-control" placeholder="{{question.question}}" ng-model="question.value" decimals="0" ><p class="Report-formItemHelp help-block" ng-show="form.{{ question.columnName}}.$error.min || form.{{ question.columnName}}.$error.max"">{{ question.question}} kan anta ett vÃ¤rde mellan {{question.minValue}} och {{question.maxValue}}.</p></div>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.getErrorClass=function(hasError){return hasError?"has-error":"has-no-error"}},replace:!0,scope:{question:"="}}}]),angular.module("ndrApp").directive("ndrQuestionDecimal1",[function(){return{restrict:"A",template:'<div ng-class="getErrorClass(form.{{ question.columnName}}.$invalid && !form.{{ question.columnName}}.$pristine)"><input name="{{question.columnName}}" type="number" min="{{question.minValue || 0}}" max="{{question.maxValue || 1000}}" class="form-control has-error" placeholder="{{question.question}}" ng-model="question.value" decimals="1" ><p class="Report-formItemHelp help-block" ng-show="form.{{ question.columnName}}.$error.min || form.{{ question.columnName}}.$error.max"">{{ question.question}} kan anta ett vÃ¤rde mellan {{question.minValue}} och {{question.maxValue}}.</p></div>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.getErrorClass=function(hasError){return hasError?"has-error":"has-no-error"}},replace:!0,scope:{question:"=",value:"="}}}]),angular.module("ndrApp").directive("ndrQuestionDecimal2",[function(){return{restrict:"E",template:'<div ng-class="getErrorClass(form.{{ question.columnName}}.$invalid && !form.{{ question.columnName}}.$pristine)"><input name="{{question.columnName}}" type="number" min="{{question.minValue || 0}}" max="{{question.maxValue || 1000}}" class="form-control has-error" placeholder="{{question.question}}" ng-model="question.value" decimals="2" ><p class="Report-formItemHelp help-block" ng-show="form.{{ question.columnName}}.$error.min || form.{{ question.columnName}}.$error.max"">{{ question.question}} kan anta ett vÃ¤rde mellan {{question.minValue}} och {{question.maxValue}}.</p></div>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.getErrorClass=function(hasError){return hasError?"has-error":"has-no-error"}},replace:!0,scope:{question:"=",value:"="}}}]),angular.module("ndrApp").directive("ndrQuestionNew",[function(){return{restrict:"A",template:['<div class="questionfield" ng-class="getQuestionClass(form.{{ question.columnName}}.$invalid, model[question.columnName] != null)">','<div ndr-Question-List-New ng-if="question.domain.isEnumerated" question="question" model="model" methods="methods" subject="subject"></div>','<div ndr-Question-Numeric-New ng-if="question.domain.domainID == 101" question="question" model="model" methods="methods" subject="subject"></div>','<div ndr-Question-Decimal-New ng-if="[102,103,109].indexOf(question.domain.domainID) !== -1" question="question" model="model" methods="methods" subject="subject"></div>','<div ndr-Question-String-New ng-if="question.domain.domainID == 106" question="question" model="model" methods="methods" subject="subject"></div>','<div ndr-Question-Date-New ng-if="question.domain.domainID == 105" question="question" model="model" methods="methods" subject="subject"></div>','<p ng-show="question.isIterated && !model.id && model && form.{{question.columnName}}.$pristine && model[question.columnName]" class="Report-formItemHelp help-block iteration">OBS FÃ¶rifyllt frÃ¥n tidigare rapportering</p>','<p ng-if="question.id == 120" class="Report-formItemHelp help-block iteration">Om fÃ¤ltet lÃ¤mnas tomt sÃ¥ berÃ¤knas LDL, om mÃ¶jligt, nÃ¤r formulÃ¤ret sparas.</p>','<p ng-show="form.{{question.columnName}}.$error.min || form.{{ question.columnName}}.$error.max" class="Report-formItemHelp help-block iteration">{{question.question}} kan anta vÃ¤rden mellan {{question.minValue}} och {{question.maxValue}}</p>','<p ng-show="question.errorMessage != null" class="Report-formItemHelp help-block iteration">{{question.errorMessage}}</p>','<p ng-show="form.{{question.columnName}}.$error.pattern && question.domain.domainID == 105" class="Report-formItemHelp help-block iteration">Datum pÃ¥ formen ÃÃÃÃ-MM-DD.</p>','<p ng-show="form.{{question.columnName}}.$error.pattern && question.domain.domainID != 105" class="Report-formItemHelp help-block iteration">{{question.question}} kan anta vÃ¤rden mellan {{question.minValue}} och {{question.maxValue}}</p>',"</div>"].join(""),require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.getQuestionClass=function(hasError,hasValue){return hasError?"has-error":hasValue?"has-value":"has-no-error"}},replace:!0,scope:{question:"=",model:"=",methods:"=",subject:"=",unitType:"="}}}]),angular.module("ndrApp").directive("ndrQuestionListNew",["calcService",function(calcService){return{restrict:"A",template:'<select name="{{question.columnName}}" ng-model-options="JSON.stringify(str)" ng-disabled="question.isCalculated" ng-change="onChange()" class="form-control" ng-model="model[question.columnName]" ng-options="type.code as type.text for type in values"><option value=""></option></select>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.options="{ 'updateOn': '$inherit' }",scope.getValues=function(){var ret=[],notActive=[];return scope.question.domain.domainValues.map(function(v){v.isActive?ret.push(v):(v.text=v.text+" (inaktiv idag)",notActive.push(v))}),ret=ret.concat(notActive)},scope.values=scope.getValues(),scope.onChange=function(){scope.question.onChange&&scope.question.onChange(scope),scope.model.isValid=form.$valid}},replace:!0,scope:{question:"=",model:"=",methods:"=",subject:"="}}}]),angular.module("ndrApp").directive("ndrQuestionDecimalNew",["calcService",function(calcService){return{restrict:"A",template:'<div style="display: flex"><input style="flex:1" parse-commas ng-keypress="filterValue($event)" ng-pattern="pattern" name="{{question.columnName}}" ng-disabled="question.isCalculated" ng-change="onChange()" type="text" decimals="{{decimals}}" class="form-control" data-ng-model="model[question.columnName]" /><span style="margin: 8px 3px 0; width:68px;" ng-show="question.measureUnit">{{question.measureUnit}}</span>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.pattern=function(){return{test:function(input){return!(input<scope.question.minValue||input>scope.question.maxValue)}}}(),scope.filterValue=function($event){isNaN(String.fromCharCode($event.keyCode))&&44!==$event.keyCode&&46!==$event.keyCode&&$event.preventDefault()},scope.onChange=function(){""===scope.model[scope.question.columnName]&&(scope.model[scope.question.columnName]=null),scope.question.onChange&&scope.question.onChange(scope),scope.model.isValid=form.$valid},scope.$watch("question",function(newValue){switch(scope.question.domain.domainID){case 102:scope.decimals=1;break;case 103:scope.decimals=2;break;case 109:scope.decimals=4;break;default:scope.decimals=0}})},replace:!0,scope:{question:"=",model:"=",methods:"=",subject:"="}}}]),angular.module("ndrApp").directive("ndrQuestionNumericNew",["calcService",function(calcService){return{restrict:"A",template:'<div style="display: flex"><input style="flex:1" name="{{question.columnName}}" ng-disabled="question.isCalculated" ng-change="onChange()" type="number" decimals="{{decimals}}" step="{{step}}" min="{{question.minValue || 0}}" max="{{question.maxValue || 1000}}" class="form-control" data-ng-model="model[question.columnName]" /><span class="measureUnit" ng-show="question.measureUnit">{{question.measureUnit}}</span>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.onChange=function(){""===scope.model[scope.question.columnName]&&(scope.model[scope.question.columnName]=null),scope.question.onChange&&scope.question.onChange(scope),scope.model.isValid=form.$valid}},replace:!0,scope:{question:"=",model:"=",methods:"=",subject:"="}}}]),angular.module("ndrApp").directive("ndrQuestionDateNew",[function(){return{restrict:"A",template:'<input name="{{question.columnName}}" placeholder="ÃÃÃÃ-MM-DD" ng-required="question.isMandatory" ng-pattern="/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/" ng-change="onChange()" class="form-control" data-ng-model="model[question.columnName]">',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.onChange=function(once){scope.question.onChange&&scope.question.onChange(scope),scope.model.isValid=form.$valid}},replace:!0,scope:{question:"=",model:"=",methods:"=",subject:"="}}}]),angular.module("ndrApp").directive("ndrQuestionStringNew",[function(){return{restrict:"A",template:'<input name="{{question.columnName}}" ng-required="question.isMandatory" ng-change="onChange()" class="form-control" data-ng-model="model[question.columnName]">',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.onChange=function(){""==scope.model[scope.question.columnName]&&(scope.model[scope.question.columnName]=null),scope.question.onChange&&scope.question.onChange(scope),scope.model.isValid=form.$valid}},replace:!0,scope:{question:"=",model:"=",methods:"=",subject:"="}}}]),angular.module("ndrApp").directive("date",function(dateFilter){return{require:"ngModel",link:function(scope,elm,attrs,ctrl){var dateFormat=attrs.date||"yyyy-MM-dd";ctrl.$formatters.unshift(function(modelValue){return dateFilter(modelValue,dateFormat)})}}}),angular.module("ndrApp").directive("patientProfileGrownup",["$q","$timeout","dataService","commonService","$state","$modal","$filter",function($q,$timeout,dataService,commonService,$state,$modal,$filter){function link(scope,element,attrs){function setTablePaging(){void 0!==scope.subject?(scope.model.tableCount=Math.ceil(scope.subject.contacts.length/5),scope.model.tableIndex=1):(scope.model.tableCount=0,scope.model.tableIndex=0)}function populateTableData(){var excluded=["unit","contactID","insertedAt","lastUpdatedAt","unitID","optionals"],tableFields=commonService.excludeMetafields(scope.contactAttributes,excluded),contacts=angular.copy(scope.subject.contacts).splice(5*(scope.model.tableIndex-1),5);scope.model.data.table=commonService.populateTableData(contacts,tableFields,"contactDate")}function populateSeriesData(){if(!scope.subject)return!1;var trendKeys=["hba1c","bpSystolic","bpDiastolic","cholesterol","triglyceride","ldl","hdl"];scope.model.data.trend=commonService.getSeries(scope.subject,trendKeys,3),scope.model.data.trend.combinedLDLHDL=[{color:"rgba(89,153,218,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"LDL",data:scope.model.data.trend.ldl},{color:"rgba(26,188,156,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"HDL",data:scope.model.data.trend.hdl}],scope.model.data.trend.combinedCholesterol=[{color:"rgba(89,153,218,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"Kolesterol",data:scope.model.data.trend.cholesterol},{color:"rgba(26,188,156,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"Triglycerider",data:scope.model.data.trend.triglyceride}],scope.model.data.trend.combinedBp=[{color:"rgba(89,153,218,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"VÃ¤rde",data:scope.model.data.trend.bpSystolic},{color:"rgba(26,188,156,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"VÃ¤rde",data:scope.model.data.trend.bpDiastolic}]}function preparePROM(){console.log("subject=",scope.subject);var submitted=_.filter(scope.subject.invites,function(i){return!!i.submittedAt});if(submitted.length&&(submitted=_.sortBy(submitted,function(s){return+new Date(s.submittedAt)})),submitted=_.filter(submitted,function(d){return 1==d.isApprovedNDR}),!submitted.length)return void(scope.model.latestInvite=null);scope.subject.surveys=submitted.length?_.map(submitted[0].outcomes,function(outcome){var datum={dimension:outcome.dimension};return datum.series=_.map(submitted,function(s){return{x:+new Date(s.submittedAt),y:_.find(s.outcomes,function(o){return o.dimension.id===outcome.dimension.id}).outcome}}),datum.latestOutcome=_.last(datum.series).y,datum.series.length>1&&_.isNumber(datum.latestOutcome)&&_.isNumber(datum.series[datum.series.length-2].y)&&(datum.diffFromPrevious=datum.latestOutcome-datum.series[datum.series.length-2].y),datum}):[];var latestInvite=submitted[submitted.length-1],previousInvite=submitted[submitted.length-2];scope.model.latestInvite=latestInvite;var categories=[],latest={name:"Senaste enkÃ¤tsvar",data:latestInvite.outcomes.map(function(outcome,index){return categories.push(outcome.dimension.desc),outcome.outcome}),color:"#5EBCDC"},previous={name:"Tidigare enkÃ¤tsvar",data:previousInvite?previousInvite.outcomes.map(function(outcome,index){return outcome.outcome}):null,color:"#ECECEC"};scope.model.categories=categories,scope.model.selectedInviteData=[latest,previous];var promSeries=angular.copy(scope.subject.surveys);promSeries.map(function(dimension){dimension.name=dimension.dimension.desc,dimension.data=dimension.series,dimension.color="#ccc",dimension.lineWidth=1}),scope.model.promSeries=promSeries,scope.subject.surveys=_.groupBy(scope.subject.surveys,function(s){return s.dimension.isPREM?2:1}),scope.checkFootDate=function(){return!scope.latest.footExaminationDate.value||commonService.dateWithinYears(scope.latest.footExaminationDate.label,1)}}scope.model={tableIndex:null,tableCount:null,excluded:[],data:{trend:{},chart:{gauge:{physicalActivity:{}}}},latest:{},mode:"visual"},scope.init=function(){populateSeriesData(),setTablePaging(),populateTableData(),preparePROM(),$timeout(function(){Highcharts.charts.map(function(c){c&&c.reflow()})},500)},scope.$watch("subject",function(newValue){scope.init()}),scope.diabetesTypeText=function(){if(scope.contactAttributes)return commonService.getLabelByKeyVal(scope.contactAttributes,"diabetesType",scope.subject.diabetesType)},scope.tableForward=function(){scope.model.tableIndex--,populateTableData()},scope.tableBack=function(){scope.model.tableIndex++,populateTableData()}}return{restrict:"A",templateUrl:"src/components/PatientProfile/PatientProfileGrownup.html",link:link,scope:{subject:"=",activeAccount:"=",contactAttributes:"=",latest:"="}}}]),angular.module("ndrApp").directive("patientProfileKids",["$q","$timeout","dataService","commonService","$state","$modal","$filter",function($q,$timeout,dataService,commonService,$state,$modal,$filter){function link(scope,element,attrs){function setTablePaging(){void 0!==scope.subject?(scope.tableCount=Math.ceil(scope.subject.contacts.length/5),scope.tableIndex=1):(scope.tableCount=0,scope.tableIndex=0)}function populateTableData(){var excluded=["unit","contactID","insertedAt","lastUpdatedAt","unitID","optionals"],tableFields=commonService.excludeMetafields(scope.contactAttributes,excluded),contacts=angular.copy(scope.subject.contacts).splice(5*(scope.model.tableIndex-1),5);scope.model.data.table=commonService.populateTableData(contacts,tableFields,"contactDate")}function populateSeriesData(){var trendKeys=["hba1c"];scope.model.data.trend=commonService.getSeries(scope.subject,trendKeys,3)}scope.model={tableIndex:null,tableCount:null,excluded:[],data:{trend:{},chart:{gauge:{physicalActivity:{}}}},mode:"visual",domainPhysical:null},scope.init=function(){scope.model.domainPhysical=commonService.getMetafieldByQuestionText(scope.contactAttributes,"fysisk").domain,populateSeriesData(),setTablePaging(),populateTableData(),scope.setName(scope.subject),$timeout(function(){Highcharts.charts.map(function(c){c&&c.reflow()})},500)},scope.setName=function(subject){console.log(subject);var personInfo=commonService.getPersonInfoLocal(subject);if(null!=personInfo)commonService.setPersonName(subject,personInfo),scope.$digest();else{var accountID=scope.activeAccount.accountID;dataService.fetchSubjectInfo(accountID,subject.socialNumber).then(function(data){commonService.setPersonName(subject,data),scope.$digest()})}},scope.$watch("subject",function(newValue){scope.init()}),scope.tableForward=function(){scope.model.tableIndex--,populateTableData()},scope.tableBack=function(){scope.model.tableIndex++,populateTableData()},scope.diabetesTypeText=function(){if(scope.contactAttributes)return commonService.getLabelByKeyVal(scope.contactAttributes,"diabetesType",scope.subject.diabetesType)}}return{restrict:"A",templateUrl:"src/components/PatientProfile/PatientProfileKids.html",link:link,scope:{subject:"=",activeAccount:"=",contactAttributes:"=",latest:"="}}}]),angular.module("ndrApp").directive("patientProfilePrintGrownup",["$q","$timeout","commonService",function($q,$timeout,commonService){function link(scope,element,attrs){scope.model={data:{trend:{},chart:{gauge:{physicalActivity:{}}},table:null,fullTable:null},mode:"visual",trendKeys:["hba1c","bpSystolic","bpDiastolic","cholesterol","triglyceride","ldl","hdl"]},scope.init=function(){scope.setTrendData(),$timeout(function(){Highcharts.charts.map(function(c){c&&c.reflow()})},500)},scope.diabetesTypeText=function(){if(scope.contactAttributes)return commonService.getLabelByKeyVal(scope.contactAttributes,"diabetesType",scope.subject.diabetesType)},scope.setTrendData=function(){scope.model.data.trend=commonService.getSeries(scope.subject,scope.model.trendKeys,3),scope.model.data.trend.combinedLDLHDL=[{color:"black",symbol:"circle",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"LDL",data:scope.model.data.trend.ldl},{color:"black",symbol:"square",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"HDL",data:scope.model.data.trend.hdl}],scope.model.data.trend.combinedCholesterol=[{color:"black",symbol:"circle",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"Kolesterol",data:scope.model.data.trend.cholesterol},{color:"black",symbol:"square",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"Triglycerider",data:scope.model.data.trend.triglyceride}],scope.model.data.trend.combinedBp=[{color:"black",symbol:"circle",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"Systoliskt",data:scope.model.data.trend.bpSystolic},{color:"black",symbol:"square",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"Diastoliskt",data:scope.model.data.trend.bpDiastolic}]},scope.calculateAge=function(birthDate){return moment().diff(birthDate,"years")},scope.checkFootDate=function(){return!scope.latest.footExaminationDate.value||commonService.dateWithinYears(scope.latest.footExaminationDate.label,1)},scope.init()}return{restrict:"A",templateUrl:"src/components/PatientProfile/PatientProfilePrintGrownup.html",link:link,scope:{subject:"=",latest:"=",contactAttributes:"="}}}]),angular.module("ndrApp").directive("patientProfilePrintKids",["$q","$timeout","commonService","dataService",function($q,$timeout,commonService,dataService){function link(scope,element,attrs){scope.model={data:{trend:{},chart:{gauge:{physicalActivity:{}}},table:null,fullTable:null},latest:null,mode:"visual",trendKeys:["hba1c"]},scope.init=function(){scope.setTrendData(),scope.setName(scope.subject)},scope.setName=function(subject){var personInfo=commonService.getPersonInfoLocal(subject);if(null!=personInfo)commonService.setPersonName(subject,personInfo),scope.$digest();else{console.log(scope);var accountID=scope.activeAccount.accountID;dataService.fetchSubjectInfo(accountID,subject.socialNumber).then(function(data){commonService.setPersonName(subject,data),scope.$digest()})}},scope.setTrendData=function(){scope.model.data.trend=commonService.getSeries(scope.subject,scope.model.trendKeys,3)},scope.diabetesTypeText=function(){if(scope.contactAttributes)return commonService.getLabelByKeyVal(scope.contactAttributes,"diabetesType",scope.subject.diabetesType)},scope.init()}return{restrict:"A",templateUrl:"src/components/PatientProfile/PatientProfilePrintKids.html",link:link,scope:{subject:"=",latest:"=",contactAttributes:"=",activeAccount:"="}}}]),angular.module("ndrApp").directive("parseCommas",function(){return{require:"ngModel",link:function(scope,elem,attrs,ngModel){ngModel.$parsers.push(function(input){return console.log("parsing",input,input.replace(/,/g,".")),input.replace(/,/g,".")}),ngModel.$formatters.push(function(input){return input?input.toString().replace(/\./g,","):input})}}}),angular.module("ndrApp").controller("HeaderController",["$scope","$state","accountService","cookieFactory","dataService",function($scope,$state,accountService,cookieFactory,dataService){$scope.accountService=accountService,$scope.accountModel=accountService.accountModel;var readCookieConsent=function(){$scope.accountModel.cookieConsent=cookieFactory.read("cookieConsent")};$scope.setCookieConsent=function(){cookieFactory.create("cookieConsent",1,10512e3),readCookieConsent()},$scope.setAccount=function(accountID){accountService.updateAccount(accountID),dataService.setValue("metafields",null)},readCookieConsent()}]),angular.module("ndrApp").controller("NavController",function(){$(".dropdown-toggle").dropdownHover({})}),angular.module("ndrApp").controller("CountyController",["$scope","$stateParams","dataService","$q","$state",function($scope,$stateParams,dataService,$q,$state){function updateKeyStats(){var date=new Date,query=dataService.queryFactory({unitType:$scope.model.unitType,fromYear:date.getFullYear()-1,toYear:0==date.getMonth()?date.getFullYear()-1:date.getFullYear(),fromMonth:date.getMonth()+1,toMonth:0==date.getMonth()?12:date.getMonth(),indicatorID:101});dataService.getStats(query).then(function(data){var series=[];_.each(data.statSet,function(obj,key){var o={name:obj.unit.name,color:obj.unit.levelID!=id?"#D4D4D4":"#FFCC01",y:obj.stat.r,cRep:obj.stat.cRep};series.push(o)}),$scope.model.data.hba1c=series});var queryTrendChart=dataService.queryFactory({unitType:$scope.model.unitType,countyCode:id,interval:"y",fromYear:2e3,toYear:(new Date).getFullYear(),indicatorID:101});dataService.getStats(queryTrendChart).then(function(data){var series=[];_.each(data.statSet[0].intervalSet,function(obj,key){var o={x:new Date(obj.interval),y:obj.stat.r,cRep:obj.stat.cRep};series.push(o)}),$scope.model.data.trendhba1c=series});var queryPatients=dataService.queryFactory({unitType:$scope.model.unitType,countyCode:id,fromYear:date.getFullYear()-1,toYear:0==date.getMonth()?date.getFullYear()-1:date.getFullYear(),fromMonth:date.getMonth()+1,toMonth:0==date.getMonth()?12:date.getMonth(),indicatorID:101});dataService.getStats(queryPatients).then(function(data){$scope.model.data.noPatients=data.statSet[0].stat.cRep})}var id=parseFloat($stateParams.id),autocompleteSelected="county_"+id;$scope.model={unitType:1,county:_.findWhere(dataService.data.counties,{code:id}),geo:_.findWhere(dataService.data.counties,{code:id}),id:id,data:{},diabetesType:1,unitTypes:[{id:1,name:"PrimÃ¤rvÃ¥rdsenhet"},{id:2,name:"Medicinklinik"},{id:3,name:"Barnklinik"}],autocompleteModel:{selected:autocompleteSelected,options:dataService.data.preparedGeoList}},$scope.gotoUnit=function(){$state.go("main.profiles.unit",{id:$scope.selectedUnit})},dataService.getOne("county",id).then(function(data){console.log("unit found",data),$scope.model.county=data,$scope.model.data.no=_.countBy($scope.model.county.units,"typeID"),$scope.model.data.noUnits=$scope.model.county.units.length}),$scope.$watch("model.unitType",function(){$scope.model.diabetesType=1==+$scope.model.unitType?0:1,updateKeyStats()})}]),angular.module("ndrApp").controller("UnitController",["$scope","$stateParams","dataService","$q","$state",function($scope,$stateParams,dataService,$q,$state){var id=parseFloat($stateParams.id),autocompleteSelected="unit_"+id,unit=_.findWhere(dataService.data.units,{unitID:id}),diabetesType=1===unit.typeID?0:1;$scope.model={unit:_.findWhere(dataService.data.units,{unitID:id}),geo:_.findWhere(dataService.data.units,{unitID:id}),geoType:"unit",unitType:unit.typeID,id:id,data:{},diabetesType:diabetesType,autocompleteModel:{selected:autocompleteSelected,options:dataService.data.preparedGeoList}},console.log("aa",$scope.model),dataService.getOne("unit",id).then(function(data){$scope.model.unit=data.plain(),function(){if($scope.model.unit.lat&&$scope.model.unit.lng){var mapOptions={center:{lat:$scope.model.unit.lat,lng:$scope.model.unit.lng},zoom:13},map=new google.maps.Map(document.getElementById("Google-Map"),mapOptions),sameCountyUnits=_.filter(dataService.data.units,function(d){return d.countyCode===$scope.model.unit.countyCode});sameCountyUnits=_.filter(sameCountyUnits,function(d){return"number"==typeof d.lat&&"number"==typeof d.lng}),_.each(sameCountyUnits,function(obj){var latLong=new google.maps.LatLng(obj.lat,obj.lng),contentString="<h5>"+obj.name+"</h5>",infowindow=new google.maps.InfoWindow({content:contentString});if($scope.model.unit.unitID===obj.unitID)var marker=new google.maps.Marker({position:latLong,title:obj.name});else var marker=new google.maps.Marker({position:latLong,title:obj.name,icon:{path:google.maps.SymbolPath.CIRCLE,fillOpacity:.8,fillColor:"#fff",strokeOpacity:1,strokeColor:"#E14274",strokeWeight:4,scale:5}});google.maps.event.addListener(marker,"mouseover",function(){infowindow.open(map,this)}),google.maps.event.addListener(marker,"mouseout",function(){infowindow.close()}),google.maps.event.addListener(marker,"click",function(){$state.go("main.profiles.unit",{id:obj.unitID})}),marker.setMap(map)})}}()});var query=dataService.queryFactory({unitID:id,level:2,interval:"y",fromYear:2e3,toYear:(new Date).getFullYear(),indicatorID:101});dataService.getStats(query).then(function(data){var series=[];_.each(data.statSet[0].intervalSet,function(obj,key){console.log(obj);var o={x:new Date(obj.interval),y:obj.stat.r,cRep:obj.stat.cRep};series.push(o)}),$scope.model.data.trendhba1c=series});var date=new Date,queryPatients=dataService.queryFactory({unitID:id,level:2,fromYear:date.getFullYear()-1,toYear:0==date.getMonth()?date.getFullYear()-1:date.getFullYear(),fromMonth:date.getMonth()+1,toMonth:0==date.getMonth()?12:date.getMonth(),indicatorID:101});dataService.getStats(queryPatients).then(function(data){$scope.model.data.noPatients=data.statSet[0].stat.cRep})}]),angular.module("ndrApp").controller("CurrentUserController",["$scope","$http","accountService","dataService","APIconfigService",function($scope,$http,accountService,dataService,APIconfigService){console.log("CurrentUserController: Init",accountService.accountModel),$scope.accountModel=accountService.accountModel,$scope.accountHelpers=accountService.helpers,$scope.filteredUnits=[],$scope.unitSearchString="",$scope.visitor=accountService.accountModel.visitor,$scope.user=$scope.visitor.user,$scope.showInfo=!$scope.visitor.isUser,console.log($scope.showInfo),$scope.$on("newUser",function(){$scope.user=accountService.accountModel.user}),dataService.getList("units").then(function(data){var units=data.plain();$scope.filteredUnits=[],$scope.$watch("unitSearchString",function(unitSearchString){$scope.resetAccountErrors(),unitSearchString=unitSearchString.toLowerCase(),$scope.filteredUnits=""!=unitSearchString?_.take(_.filter(units,function(d){return d.name.toLowerCase().indexOf(unitSearchString)>-1}),20):[]})}),$scope.setRoles=function(){},$scope.resetAccountErrors=function(){$scope.newAccountError=[],$scope.newAccountSuccess=null},$scope.updateUser=function(){$scope.updateUserError=[],$scope.updateUserSuccess=!1;var httpConfig={method:"PUT",data:$scope.user,url:APIconfigService.baseURL+"User/"+$scope.user.userID+"?APIKey="+APIconfigService.APIKey};$http(httpConfig).success(function(data){console.log("updated ok"),$scope.accountModel.activeAccount?accountService.login($scope.accountModel.activeAccount.accountID):($scope.user=data,$scope.setRoles()),$scope.updateUserSuccess=!0,setTimeout(function(){$scope.updateUserSuccess=null,$scope.$apply()},3e3)}).error(function(data){
if(data.ModelState)for(var prop in data.ModelState)data.ModelState.hasOwnProperty(prop)&&$scope.updateUserError.push(data.ModelState[prop][0]);else $scope.updateUserError.push("Ett okÃ¤nt fel intrÃ¤ffade. Var god fÃ¶rsÃ¶k igen senare.")})},$scope.applyUnit=function(unitID){var accountModel,httpConfig,reActivateAccount=null;if($scope.resetAccountErrors(),console.log($scope.user.email),console.log(unitID),$scope.userForm.email.$invalid)return $scope.newAccountError.push("En korrekt e-postadress krÃ¤vs fÃ¶r att kunna ansÃ¶ka om konto."),void console.log($scope.userForm.email.$invalid);if(angular.forEach($scope.user.accounts,function(account){account.unit.unitID===unitID&&1===account.status.id?$scope.newAccountError.push("Du har redan ett konto pÃ¥ denna enhet."):account.unit.unitID!==unitID||2!==account.status.id&&3!==account.status.id?account.unit.unitID===unitID&&9===account.status.id&&(reActivateAccount=account):$scope.newAccountError.push("En kontobegÃ¤ran Ã¤r redan under behandling fÃ¶r dig pÃ¥ denna enhet.")}),console.log($scope.newAccountError),!$scope.newAccountError.length){accountModel={unitID:unitID,userID:$scope.user.userID,statusID:3,email:$scope.user.email,roleIDs:[]};var httpConfig={method:"POST",data:accountModel,url:APIconfigService.baseURL+"Account/?APIKey="+APIconfigService.APIKey};$http(httpConfig).success(function(data){$scope.user=data,$scope.visitor.isUser=!0,$scope.setRoles(),$scope.newAccountSuccess=!0}).error(function(data){if(data.ModelState)for(var prop in data.ModelState)data.ModelState.hasOwnProperty(prop)&&$scope.newAccountError.push(data.ModelState[prop][0]);else $scope.newAccountError.push("Ett okÃ¤nt fel intrÃ¤ffade. Var god fÃ¶rsÃ¶k igen senare.")})}}}]),angular.module("ndrApp").controller("PatientsController",["$scope","$state","$stateParams","$log","$filter","dataService","$timeout","$window","$http","commonService",function($scope,$state,$stateParams,$log,$filter,dataService,$timeout,$window,$http,commonService){function paged(valLists,pageSize){var valLength,retVal;if(valLists){valLength=valLists.length,retVal=[];for(var i=0;i<valLength;i++)i%pageSize==0?retVal[Math.floor(i/pageSize)]=[valLists[i]]:retVal[Math.floor(i/pageSize)].push(valLists[i]);return retVal}}function loadSubjects(){if(!ready)return!1;if(!$scope.isLoadingSubjects){$scope.isLoadingSubjects=!0;var query,selectedFilters={};_.each($scope.selectedFilters,function(filter,filterKey){$scope.isDisplayed(filterKey)&&(selectedFilters[filterKey]=filter)}),query={DateFrom:$scope.dateFrom,DateTo:$scope.dateTo,f:_.keys(selectedFilters),filters:selectedFilters,limit:15,offset:100,count:"given-by-server",matching:"given-by-server",absence:$scope.absence},dataService.getSubjects(query).then(function(data){allSubjects=data,$scope.model.allSubjectsLength=allSubjects.length,$scope.isLoadingSubjects=!1,debouncedFilter()}).fail(function(data){allSubjects=null,$scope.model.allSubjectsLength=0,$scope.isLoadingSubjects=!1,debouncedFilter()})}}function tryLoad(){$scope.clearSearch(),$scope.searchForm&&$scope.searchForm.$valid&&loadSubjects()}function filter(){if($scope.model.allSubjectsLength){$log.debug("Changed Filters");var selectedFilters={},subjects=allSubjects;_.each($scope.selectedFilters,function(filter,filterKey){$scope.isDisplayed(filterKey)&&(selectedFilters[filterKey]=filter)}),!0!==$scope.absence&&_.each(selectedFilters,function(filter,prop){_.isEmpty(filter)||(subjects=_.filter(subjects,function(subject){var value,propValue=subject[prop];return filter.undef?void 0===subject[prop]:"number"==typeof filter.min&&"number"==typeof filter.max?"number"==typeof propValue&&propValue>=filter.min&&propValue<=filter.max:filter.from?!!propValue&&(value=propValue.split("T")[0],filter.from.date=$filter("date")(filter.from.date,$scope.format),filter.to.date=$filter("date")(filter.to.date,$scope.format),value>=filter.from.date&&value<=filter.to.date):!(!_.isNull(filter.value)&&!_.isUndefined(filter.value))||(value=parseInt(filter.value,10),propValue===value)}))}),selectedFilters.dateFrom=$scope.datePickers.from.date,selectedFilters.dateTo=$scope.datePickers.to.date,dataService.setSearchFilters("values",selectedFilters),$scope.model.filteredSubjects=subjects,$scope.model.filteredSubjectsLength=subjects.length}}$log.debug("PatientsController: Init");var filterDisplayIndex,filterSettings={exclude:["socialNumber","pumpNew","pumpNewSerial","contactDate","dateOfDeath","smokingEndYear","snuffingEndYear","subjectID"],required:["d","s","sex"]};$scope.filterSettings={excluded:["socialNumber","pumpNew","pumpNewSerial","contactDate","dateOfDeath","smokingEndYear","snuffingEndYear","subjectID"],required:["d","s","sex"]},$scope.isLoadingSubjects=!1,$stateParams.restoreFilters||dataService.setSearchFilters();var allSubjects;$scope.format="yyyy-MM-dd";var filters=dataService.getSearchFilters("values");$scope.datePickers={maxDate:new Date,from:{date:$filter("date")(filters.dateFrom,$scope.format),opened:!1},to:{date:$filter("date")(filters.dateTo,$scope.format),opened:!1}},$scope.addOptionalFields=function(fields){var o=dataService.optionalQuestions();return fields.concat(o)},$scope.addExtraFields=function(fields,keys){for(var extraFields=dataService.getFieldByKey(keys),i=0;i<=extraFields.length-1;i++)fields.splice(1,0,extraFields[i]);return fields},$scope.init=function(){$scope.unitTypeID=$scope.accountModel.activeAccount.unit.typeID;var fields=dataService.getFormFields(1,$scope.unitTypeID);if(!fields)return void $scope.loadFilters($scope.unitTypeID);fields=$scope.addExtraFields(fields,["age","sex","s"]),fields=$scope.addOptionalFields(fields),fields=$scope.removeExcluded(fields),$scope.getContactAttributes($scope.filterSettings,fields)},$scope.removeExcluded=function(fields){for(var ret=[],i=0;i<=fields.length-1;i++){for(var add=!0,j=0;j<=$scope.filterSettings.excluded.length-1;j++)if($scope.filterSettings.excluded[j]===fields[i].columnName){add=!1;break}add&&ret.push(fields[i])}return ret},$scope.loadFilters=function(unitTypeID){$scope.isLoading=!0,dataService.getMetaFields($scope.accountModel.activeAccount.accountID,unitTypeID).then(function(){$scope.init()})},$scope.showCurrentNames=function(){for(var i=0;i<$scope.ItemsByPage[$scope.currentPage].length;i++){var subject=$scope.ItemsByPage[$scope.currentPage][i];setTimeout(function(subject){$scope.setName(subject)},100,subject)}},$scope.setName=function(subject){var personInfo=commonService.getPersonInfoLocal(subject);if(null!=personInfo)commonService.setPersonName(subject,personInfo),$scope.$digest();else{var accountID=$scope.accountModel.activeAccount.accountID;dataService.fetchSubjectInfo(accountID,subject.snr).then(function(data){commonService.setPersonName(subject,data),$scope.$digest()})}},$scope.today=function(){$scope.dt=new Date},$scope.today(),$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.open=function($event,picker){$event.preventDefault(),$event.stopPropagation(),$scope.datePickers[picker].opened=!0},$scope.openPicker=function($event,columnName,direction){$event.preventDefault(),$event.stopPropagation(),$scope.selectedFilters[columnName][direction].opened=!0},$scope.lookupName=function(filter,value){return 0==value||value?filter.domain.isEnumerated?_.result(_.find(filter.domain.domainValues,{code:value}),"text",""):105==filter.domain.domainID?value.split("T")[0]:106==filter.domain.domainID||101==filter.domain.domainID?value:$filter("number")(value):""},$scope.$watchCollection("model.filteredSubjects",function(){$scope.pageSize=15,$scope.allItems=$scope.model.filteredSubjects,$scope.reverse=!1,$scope.filteredList=$scope.allItems,$scope.currentPage=0,$scope.Header=["","",""],$scope.sort("snr")}),$scope.pagination=function(){$scope.ItemsByPage=paged($scope.filteredList,$scope.pageSize)},$scope.setPage=function(){$scope.currentPage=this.n},$scope.firstPage=function(){$scope.currentPage=0},$scope.lastPage=function(){$scope.currentPage=$scope.ItemsByPage.length-1},$scope.range=function(input,total){var ret=[];total||(total=input,input=0);for(var i=input;i<total;i++)0!==i&&i!==total-1&&ret.push(i);return ret},$scope.resetAll=function(){$scope.filteredList=$scope.allItems},$scope.sort=function(sortBy){var iconName;$scope.resetAll(),$scope.columnToOrder=sortBy,$scope.filteredList=$filter("orderBy")($scope.filteredList,$scope.columnToOrder,$scope.reverse),iconName=$scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down","snr"===sortBy?$scope.Header[0]=iconName:"snr"===sortBy?$scope.Header[1]=iconName:$scope.Header[2]=iconName,$scope.reverse=!1,$scope.pagination()},$scope.toggleDetail=function(d){console.log("detail",d)},$scope.model={allSubjects:void 0,filteredSubjects:void 0};var ready=!1,delayStartTime=200;Modernizr.svg||(delayStartTime=6e3),$scope.dateAttributeIsValid=function(attribute){var from=$scope.searchForm[attribute+"From"],to=$scope.searchForm[attribute+"To"];return!(!$scope.oneDateInputIsValid(from,attribute+"FromInValid")||!$scope.oneDateInputIsValid(to,attribute+"ToInValid"))},$scope.shortcut=function(min,max){$scope.selectedFilters.hba1c.min=min,$scope.selectedFilters.hba1c.max=max},$scope.oneDateInputIsValid=function(formCmp,valKey){var input=formCmp.$viewValue,isValid=!0;return"string"==typeof input&&(10!==input.length?isValid=!1:"Invalid Date"==new Date(input)&&(isValid=!1)),formCmp.$setValidity(valKey,isValid),isValid},$scope.contactDateInputIsValid=function(){return!!$scope.dateAttributeIsValid("date")&&!!$scope.contactDateValuesIsValid()},$scope.filterDateIsValid=function(){return!($scope.searchForm.fundusExaminationDateTo&&!$scope.dateAttributeIsValid("fundusExaminationDate"))&&!($scope.searchForm.footExaminationDateTo&&!$scope.dateAttributeIsValid("footExaminationDate"))},$scope.contactDateValuesIsValid=function(){var from=$scope.datePickers.from,to=$scope.datePickers.to;return void 0===from?($scope.searchForm.dateFrom.$setValidity("dateFromInValid",!1),!1):void 0===to?($scope.searchForm.dateTo.$setValidity("dateToInValid",!1),!1):(from=$filter("date")(from,$scope.format),(to=$filter("date")(to,$scope.format))<from?($scope.searchForm.dateFrom.$setValidity("dateFromInValid",!1),$scope.searchForm.dateTo.$setValidity("dateToInValid",!1),!1):($scope.searchForm.dateFrom.$setValidity("dateFromInValid",!0),$scope.searchForm.dateTo.$setValidity("dateToInValid",!0),!0))},$scope.clearSearch=function(){$scope.clearResultList(),$scope.model.allSubjectsLength=0,$scope.ItemsByPage=[]},$scope.clearResultList=function(){$scope.model.filteredSubjects=[],$scope.model.filteredSubjectsLength=0},$timeout(function(){$scope.$watch("dateFrom",function(){dataService.setSearchFilters("dateFrom",$scope.dateFrom),tryLoad()}),$scope.$watch("dateTo",function(){dataService.setSearchFilters("dateTo",$scope.dateTo),tryLoad()})},delayStartTime),$scope.filters=[],$scope.getStringDate=function(date){if("string"==typeof date)return date;if(void 0!==date&&null!==date&&date instanceof Date&&!isNaN(date.valueOf())){var yyyy=date.getFullYear().toString(),mm=(date.getMonth()+1).toString(),dd=date.getDate().toString();return yyyy+"-"+(mm[1]?mm:"0"+mm[0])+"-"+(dd[1]?dd:"0"+dd[0])}},$scope.getContactAttributes=function(filterSettings,filters){var selected,preselected=dataService.getSearchFilters();$scope.dateFrom=$filter("date")(preselected.values.dateFrom,$scope.format),$scope.dateTo=$filter("date")(preselected.values.dateTo,$scope.format),_.each(filters,function(filter){"diabetesType"===filter.columnName&&(filter.columnName="d"),"yearOfOnset"===filter.columnName&&(filter.columnName="y"),"sex"===filter.columnName&&(filter.columnName="s"),null==filter.sequence&&(filter.sequence=9999),filter.isChosen=$scope.isRequired(filter.columnName)||-1!==_.keys(preselected.values).indexOf(filter.columnName),$scope.selectedFilters[filter.columnName]={},-1!==_.keys(preselected.values).indexOf(filter.columnName)?$scope.selectedFilters[filter.columnName]=preselected.values[filter.columnName]:(_.isNumber(filter.maxValue)&&($scope.selectedFilters[filter.columnName].min=filter.minValue||0,$scope.selectedFilters[filter.columnName].max=filter.maxValue),"Date"===filter.domain.name&&($scope.selectedFilters[filter.columnName].from={date:$filter("date")(new Date(new Date-31536e6),$scope.format),opened:!1},$scope.selectedFilters[filter.columnName].to={date:$filter("date")(new Date,$scope.format),opened:!1}))}),selected=_.remove(filters,"isChosen"),selected=_.map(selected,function(sel,selIndex){var preselectedFilter=_.find(preselected.filters,{columnName:sel.columnName});return sel.displayOrder=preselectedFilter?preselectedFilter.displayOrder:selIndex,sel}),filterDisplayIndex=selected.length,filters=_.sortBy(selected.concat(filters),"sequence"),$scope.filters=filters,ready=!0,tryLoad()},$scope.chosenFilter=null,$scope.$watch("chosenFilter",function(name){var filter,alreadySelected;name&&(alreadySelected=$scope.isDisplayed(name),alreadySelected||(filter=_.find($scope.filters,{columnName:name}))&&(filter.isChosen=!0,filter.displayOrder=filterDisplayIndex,filterDisplayIndex+=1),$scope.chosenFilter=null,$scope.highlightedFilter=name,$timeout(function(){$scope.highlightedFilter=null},1e3),dataService.setSearchFilters("filters",_.filter($scope.filters,{isChosen:!0})),alreadySelected||tryLoad())}),$scope.isDisplayed=function(name){return $scope.isRequired(name)||_.find($scope.filters,{columnName:name}).isChosen},$scope.isRequired=function(name){return-1!==_.indexOf(filterSettings.required,name)},$scope.removeChosenFilter=function(name){_.find($scope.filters,{columnName:name}).isChosen=!1,filterDisplayIndex-=1,dataService.setSearchFilters("filters",_.filter($scope.filters,{isChosen:!0})),filter()},$scope.selectedFilters={};var debouncedFilter=_.debounce(function(){$scope.$apply(function(){filter()})},400);$scope.$watch("absence",function(){console.log("CHANGED ABS"),tryLoad()}),$scope.tryFilter=function(){$scope.clearResultList(),$scope.filterDateIsValid()&&debouncedFilter()},$scope.$watch("selectedFilters",function(){$scope.tryFilter()},!0),$scope.init(),$scope.exportToCSV=function(){var textFile={content:$scope.getCSVText("test"),name:"NDR-lista",extension:"csv"};dataService.getFile(textFile)},$scope.getCSVText=function(){var ret="",attributes=[],selectedAttributes=$scope.filters.filter(function(el){return el.isChosen});attributes.push({columnName:"snr",question:"Personnummer",domain:{isEnumerated:!1,domainID:106}}),3==$scope.unitTypeID&&attributes.push({columnName:"name",question:"Namn",domain:{isEnumerated:!1,domainID:106}}),attributes.push({columnName:"contactDate",question:"Senaste besÃ¶k",domain:{isEnumerated:!1,domainID:105}});for(var i=0;i<selectedAttributes.length;i++)attributes.push({columnName:selectedAttributes[i].columnName,question:selectedAttributes[i].question,domain:selectedAttributes[i].domain});attributes.push({columnName:"isDead",question:"Avliden",domain:{isEnumerated:!1,domainID:107}});for(var firstInRow=!0,i=0;i<attributes.length;i++)ret=firstInRow?ret+'"'+attributes[i].question+'"':ret+';"'+attributes[i].question+'"',firstInRow=!1;for(var i=0;i<$scope.model.filteredSubjects.length;i++){ret+="\r\n",firstInRow=!0;for(var j=0;j<attributes.length;j++)ret+=function(firstInRow,attribute,subject){return void 0==subject[attribute.columnName]?";":attribute.domain.isEnumerated?(firstInRow?"":";")+'"'+$scope.lookupName(attributes[j],subject[attribute.columnName])+'"':105==attribute.domain.domainID?(firstInRow?"":";")+'"'+subject[attribute.columnName].split("T")[0]+'"':107==attribute.domain.domainID?(firstInRow?"":";")+'"'+(subject[attribute.columnName]?"Ja":"")+'"':(firstInRow?"":";")+'"'+subject[attribute.columnName].toString().replace(".",",")+'"'}(firstInRow,attributes[j],$scope.model.filteredSubjects[i]),firstInRow=!1}return ret}}]),angular.module("ndrApp").controller("ResearchController",["$scope","$stateParams","dataService",function($scope,$stateParams,dataService){$scope.model={},dataService.getList("news").then(function(data){data.sort(function(a,b){return new Date(b.publishedFrom)-new Date(a.publishedFrom)}),data=_.filter(data,function(d){var catNames=_.pluck(d.categories,"name");return-1!=_.indexOf(catNames,"Forskning")}),data=data.splice(0,4),angular.forEach(data,function(item){item.link="#/nyheter/"+item.newsID,item.categoryNames=[],angular.forEach(item.categories,function(category){item.categoryNames.push(category.name)})}),$scope.model.listModelResearch={data:data}}),dataService.getAny("publication","?hasDate=true").then(function(data){console.log(data),angular.forEach(data,function(item){item.link="#/forskning/"+item.id,item.title=item.name}),$scope.publications=data})}]),angular.module("ndrApp").controller("AboutController",["$scope","$stateParams","accountService",function($scope,$stateParams,accountService){$scope.model={},$scope.accountModel=accountService.accountModel,console.log($scope.accountModel)}]),angular.module("ndrApp").controller("PublicationController",["$scope","$stateParams","dataService",function($scope,$stateParams,dataService){dataService.getOne("publication",$stateParams.id).then(function(data){var authors=[data.firstAuthor,data.otherAuthor,data.lastAuthor];$scope.publication=data,$scope.publication.authors=authors})}]),angular.module("ndrApp").controller("NewsController",["$scope","$stateParams","dataService",function($scope,$stateParams,dataService){dataService.getList("news").then(function(data){data.sort(function(a,b){return new Date(b.publishedFrom)-new Date(a.publishedFrom)}),angular.forEach(data,function(item,i){item.link="#/nyheter/"+item.newsID}),$scope.news=data})}]),angular.module("ndrApp").controller("NewsItemController",["$scope","$stateParams","dataService",function($scope,$stateParams,dataService){$scope.model={},dataService.getOne("news",$stateParams.id).then(function(data){$scope.article=data}),dataService.getList("news").then(function(data){data.sort(function(a,b){return new Date(b.publishedFrom)-new Date(a.publishedFrom)}),data=data.splice(0,3),angular.forEach(data,function(item){item.link="#/nyheter/"+item.newsID}),$scope.model.listModelNews={data:data}})}]),angular.module("ndrApp").controller("StatisticsController",["$scope","dataService",function($scope,dataService){$scope.model={autocompleteModel:{selected:void 0,options:dataService.data.preparedGeoList}}}]),angular.module("ndrApp").controller("StatisticsAboutController",["$scope","dataService",function($scope,dataService){$scope.model={indicators:null},$scope.init=function(){this.model.indicators=dataService.getValue("indicators2017"),console.log(this.model.indicators)},$scope.init()}]),angular.module("ndrApp").controller("LoginController",["$scope","$http","$stateParams","$state","accountService","APIconfigService","$modal","cookieFactory",function($scope,$http,$stateParams,$state,accountService,APIconfigService,$modal,cookieFactory){function waitForLogin(type){var waitFor=setInterval(function(){var url=APIconfigService.baseURL+"bid/ndr/collect?orderRef="+$scope.model.orderRef,query={url:APIconfigService.constructUrl(url),method:"GET"};$http(query).then(function(response){console.log("response wait",response),200===response.status&&(clearInterval(waitFor),login(type))}).catch(function(response){console.log("failed"),clearInterval(waitFor),$scope.model.loginStarted=!1,$scope.model.loginFailed=!0})},2e3)}function login(type){var url=APIconfigService.baseURL+"CurrentVisitor",query={url:APIconfigService.constructUrl(url),method:"GET"};$http(query).then(function(response){var user=response.data.user;accountService.accountModel.chosenUserType=type,"user"===type?response.data.isUser?($scope.model.message=null,checkForLoggedIn(),accountService.accountModel.user=user,user.activeAccounts=_.filter(user.accounts,function(account){return 1===account.status.id}),accountService.accountModel.activeAccount||1!==user.activeAccounts.length?cookieFactory.read("ACTIVEACCOUNT")?(accountService.accountModel.activeAccount=_.find(user.activeAccounts,function(a){return a.accountID===+cookieFactory.read("ACTIVEACCOUNT")}),$state.go("main.account.home")):modalInstance=$modal.open({templateUrl:"unitModalTmpl",backdrop:!0,scope:$scope}):(accountService.accountModel.activeAccount=user.activeAccounts[0],$state.go("main.account.home"))):($scope.model.loginStarted=!1,$scope.model.message="Du Ã¤r inte en anvÃ¤ndare i NDR."):response.data.isSubject?(accountService.accountModel.chosenUserType="subject",$scope.model.message=null,accountService.accountModel.PROMSubject=null,checkForLoggedIn(),console.log("GOING TO SUBJECT HOME"),$state.go("main.subject.home")):($scope.model.loginStarted=!1,$scope.model.message="Det finns ingen information om dig i Nationella Diabetesregistret. VÃ¤nligen kontakta din vÃ¥rdcentral fÃ¶r mer information.")}).catch(function(response){console.log("failed"),$scope.model.loginStarted=!1,$scope.model.loginFailed=!0})}function checkForLoggedIn(){var waitFor=setInterval(function(){var url=APIconfigService.baseURL+"CurrentVisitor",query={url:APIconfigService.constructUrl(url),method:"GET"};$http(query).then(function(response){console.log("Checking if still logged in:",response),response.data.isUser||response.data.isSubject||(clearInterval(waitFor),accountService.logOut())}).catch(console.error.bind(console))},12e5)}var modalInstance=null;$scope.model={accountModel:accountService.accountModel,orderRef:void 0,socialnumber:void 0,PROMKey:void 0,loginStarted:!1,loginFailed:!1,loginPROMKeyFailed:!1,message:null,selectedAccountID:null},$scope.startLogin=function(type){if($scope.model.socialnumber){$scope.model.loginStarted=!0,$scope.model.loginFailed=!1;var url=APIconfigService.baseURL+"bid/ndr/order?socialnumber="+$scope.model.socialnumber,query={url:APIconfigService.constructUrl(url),method:"GET"};$http(query).then(function(response){$scope.model.orderRef=response.data.orderRef,waitForLogin(type)}).catch(function(response){try{response.data.ModelState.socialNumber&&($scope.model.message=response.data.ModelState.socialNumber[0])}catch(err){}try{response.statusText&&($scope.model.message=response.statusText)}catch(err){}console.log(response),$scope.model.loginFailed=!0,$scope.model.loginStarted=!1})}},$scope.loginPROMKey=function(){if($scope.model.PROMKey){accountService.accountModel.chosenUserType="subject",$scope.model.loginFailed=!1,$scope.model.loginPROMKeyFailedMessage="";var url=APIconfigService.baseURL+"prom?PROMKey="+$scope.model.PROMKey+"&APIKey="+APIconfigService.APIKey,query={url:APIconfigService.constructUrl(url),method:"GET"};$http(query).then(function(response){accountService.accountModel.isPROMSubject=!0,accountService.accountModel.PROMSubject=response.data,accountService.accountModel.PROMSubject.key=$scope.model.PROMKey,$state.go("main.subject.surveys.survey")}).catch(function(response){var code=response.data?response.data.code:null;1===code?$scope.model.loginPROMKeyFailedMessage="EnkÃ¤ten har redan lÃ¤mnats in.":2===code?$scope.model.loginPROMKeyFailedMessage="EnkÃ¤ten Ã¤r avslutad.":3===code&&($scope.model.loginPROMKeyFailedMessage="EnkÃ¤ten har minskat."),$scope.model.loginPROMKeyFailed=!0})}},$scope.selectAccount=function(){var activeAccount,accountID=$scope.model.selectedAccountID;accountID&&(activeAccount=_.find(accountService.accountModel.user.activeAccounts,{accountID:accountID}),accountService.accountModel.activeAccount=activeAccount,accountService.accountModel.tempAccount=activeAccount,cookieFactory.create("ACTIVEACCOUNT",accountID),modalInstance&&modalInstance.dismiss("cancel"),$state.go("main.account.home"))},$stateParams.direct&&login("user")}]),angular.module("ndrApp").controller("KASController",["$scope","$stateParams","$state","$modal","$timeout","dataService",function($scope,$stateParams,$state,$modal,$timeout,dataService){$scope.model={counties:null},$scope.init=function(){},dataService.getKAS(function(d){console.log(d),$scope.model.counties=d})}]),angular.module("ndrApp").controller("Knappen2Controller",["$scope","$stateParams","$sce","$state","APIconfigService",function($scope,$stateParams,$sce,$state,APIconfigService){$scope.reload=function(){$state.reload()},$scope.getQueryString=function(){var queryParams={};return $stateParams.s&&(queryParams.searchKey=$stateParams.s),queryParams.apiURL=APIconfigService.baseURL,Object.keys(queryParams).map(function(key,index){return key+"="+queryParams[key]}).join("&")},$scope.scrollStart=function(){var $el=$("#start");$("html, body").animate({scrollTop:$el.offset().top},1e3)},$scope.setBaseURL=function(config){var iframeurl=config.baseURL+config.querystring;console.log("iframeurl",iframeurl),$scope.url=$sce.trustAsResourceUrl(iframeurl)},$scope.init=function(config){$scope.setBaseURL(config),$scope.scrollStart()};var config={querystring:$scope.getQueryString(),baseURL:"https://www.ndr.nu/Knappen2?"};$scope.init(config)}]),angular.module("ndrApp").controller("SubjectController",["$scope","$http","$stateParams","$state","accountService",function($scope,$http,$stateParams,$state,accountService){console.log("SubjectController: Init",accountService.accountModel.subject),$scope.accountModel=accountService.accountModel,$scope.accountHelpers=accountService.helpers}]),angular.module("ndrApp").controller("SubjectHomeController",["$scope",function($scope){$scope.model={survey:$scope.accountModel.PROMSubject||_.filter($scope.accountModel.subject.invites,function(i){return!i.submittedAt&&!i.isDeclined})}}]),angular.module("ndrApp").controller("SubjectSurveysController",["$scope",function($scope){$scope.model={survey:$scope.accountModel.PROMSubject||_.filter($scope.accountModel.subject.invites,function(i){return!i.submittedAt&&!i.isDeclined})}}]),angular.module("ndrApp").controller("SubjectSurveyController",["$scope","$state","$stateParams","$timeout","$modal","accountService","dataService",function($scope,$state,$stateParams,$timeout,$modal,accountService,dataService){function getQuestionsCount(){var count=0;return $scope.model.PROMFormMeta.forEach(function(mainGroup){mainGroup.questiongroups.forEach(function(group){count+=group.questions.length})}),count}function getAnswersCount(){var count=0;console.log("answers",$scope.model.answers);for(var q in $scope.model.answers)null!==$scope.model.answers[q]&&(count+=1);return count}function getUnansweredQuestions(){var questions=[];return $scope.model.PROMFormMeta.forEach(function(mainGroup){mainGroup.questiongroups.forEach(function(group){group.questions.forEach(function(q){null!==$scope.model.answers[q.columnName]&&void 0!==$scope.model.answers[q.columnName]||questions.push(q.questionID)})})}),questions}$scope.accountService=accountService;var survey=$scope.accountModel.PROMSubject||_.find($scope.accountModel.subject.invites,function(invite){return!invite.submittedAt&&!invite.isDeclined});$stateParams.inviteID&&(survey=_.find($scope.accountModel.subject.invites,function(invite){return invite.inviteID==$stateParams.inviteID})),$scope.model={survey:survey,statusBarFixed:!0,questionsCount:0,activeQuestion:null,unansweredQuestions:[]},$(".Panel").bind("keydown",function(e){38!=e.keyCode&&40!=e.keyCode||e.preventDefault(),38==e.keyCode&&$timeout(function(){$scope.setActiveQuestion($scope.model.activeQuestion-1)},250),40==e.keyCode&&$timeout(function(){$scope.setActiveQuestion($scope.model.activeQuestion+1)},250)}),$scope.model.answers=$scope.model.survey&&$scope.model.survey.prom?$scope.model.survey.prom:{},$scope.model.answersCount=getAnswersCount();var answers=$scope.model.answers?_.clone($scope.model.answers):{},declineModalInstance=null,confirmModalInstance=null;dataService.getPROMFormMeta().then(function(response){$scope.model.PROMFormMeta=response.data,$scope.model.questionsCount=getQuestionsCount(),$scope.model.unansweredQuestions=getUnansweredQuestions()}),$scope.handleAnswerChange=function($event){var name=$event.target.name,value=$event.target.value,model=$scope.model;console.log("event fired",value),answers[name]=value||null,model.answers[name]=answers[name],model.answersCount=getAnswersCount(),model.unansweredQuestions=getUnansweredQuestions(),model.activeQuestion!==model.questionsCount&&$timeout(function(){$scope.setActiveQuestion(model.activeQuestion+1)},250),dataService.savePROMForm($scope.model.survey.inviteID,model.answers)},$scope.submitForm=function(){var answers=$scope.model.answers;answers.isSubmitted=!0,dataService.savePROMForm($scope.model.survey.inviteID,answers).then(function(response){confirmModalInstance=$modal.open({templateUrl:"confirmModalTmpl",backdrop:!0,scope:$scope,size:"lg"}),delete accountService.accountModel.PROMSubject;var submittedInvite=accountService.accountModel.subject.invites.find(function(i){return $scope.model.survey.inviteID===i.inviteID});submittedInvite&&(submittedInvite.submittedAt=moment().format("YYYY-MM-DD"))})},$scope.showDeclineModal=function(){declineModalInstance=$modal.open({templateUrl:"declineModalTmpl",backdrop:!0,scope:$scope,size:"lg"})},$scope.showInfoModal=function(){infoModalInstance=$modal.open({templateUrl:"infoModalTmpl",backdrop:!0,scope:$scope,size:"lg"})},$scope.closeAndLogout=function(stateName){stateName||(stateName="main.home",accountService.logOut()),$state.go(stateName,{tab:"besvarade-enkater"},{reload:!0}),confirmModalInstance&&confirmModalInstance.dismiss("cancel"),declineModalInstance&&declineModalInstance.dismiss("cancel")},$scope.declineForm=function(){var answers=$scope.model.answers;answers.isDeclined=!0,dataService.savePROMForm($scope.model.survey.inviteID,answers).then(function(response){if(accountService.logOut(),delete accountService.accountModel.PROMSubject,null!=accountService.accountModel.visitor.principal){var declinedInvite=accountService.accountModel.subject.invites.find(function(i){return $scope.model.survey.inviteID===i.inviteID});return declinedInvite&&(declinedInvite.isDeclined=!0),void $state.go("main.subject.home",{},{reload:!0})}$state.go("main.home",{},{reload:!0}),declineModalInstance.dismiss("cancel")})},$scope.setActiveQuestion=function(id){var $el=$("#question-"+id);$("html, body").animate({scrollTop:$el.offset().top+$el.outerHeight()/2-$(window).height()/2},500,function(){$scope.$apply(function(){$scope.model.activeQuestion=id})})},$scope.$on("$destroy",function(){$(window).off("scroll.statusBar")}),$(window).on("scroll.statusBar",function(){var windowHeight=$(window).height(),scrollMiddle=$(document).scrollTop()+windowHeight/2,scrollBottom=$(document).scrollTop()+windowHeight,positions=[],index=0,surveyFormBottom=$("#SurveyForm").offset().top+$("#SurveyForm").outerHeight();$(".question-holder").each(function(){var $this=$(this);positions.push({position:$this.offset().top+$this.outerHeight()/2,id:+this.id.split("-")[1]})});for(var i=positions.length-1;i>=0;i--)Math.abs(scrollMiddle-positions[i].position)<Math.abs(scrollMiddle-positions[index].position)&&(index=i);positions.length&&$scope.$apply(function(){$scope.model.activeQuestion=+positions[index].id,$scope.model.statusBarFixed=scrollBottom-surveyFormBottom<=0})})}]),angular.module("ndrApp").controller("SubjectProfileController",["$scope","$stateParams","dataService","$timeout","$filter","commonService",function($scope,$stateParams,dataService,$timeout,$filter,commonService){function getSeries(type){return _.map(_.sortBy($scope.subject.contacts,function(c){return+new Date(c.contactDate)}),function(contact){return{x:+new Date(contact.contactDate),y:contact[type]}})}function populateTableData(){var excluded=["unit","contactID","insertedAt","lastUpdatedAt","unitID","optionals"],tableFields=commonService.excludeMetafields($scope.contactAttributes,excluded),contacts=angular.copy($scope.subject.contacts).splice(5*($scope.model.tableIndex-1),5);$scope.model.data.table=commonService.populateTableData(contacts,tableFields,"contactDate")}function populateLatestData(){$scope.model.latest=commonService.getLatestModel($scope.subject,$scope.contactAttributes)}function setTablePaging(){void 0!==$scope.subject?($scope.model.tableCount=Math.ceil($scope.subject.contacts.length/5),$scope.model.tableIndex=1):($scope.model.tableCount=0,$scope.model.tableIndex=0)}
$scope.tabOversight={heading:"Mina vÃ¤rden",active:"besvarade-enkater"!==$stateParams.tab},$scope.tabAnsweredSourveys={heading:"EnkÃ¤tsvar",active:"besvarade-enkater"===$stateParams.tab},$scope.model={data:{trend:{},chart:{gauge:{physicalActivity:{}}}},latest:{},mode:"visual",tableIndex:null,tableCount:null},$scope.tableForward=function(){$scope.model.tableIndex--,populateTableData()},$scope.tableBack=function(){$scope.model.tableIndex++,populateTableData()},$scope.subject=$scope.accountModel.subject,$scope.subject.age=moment().diff(moment($scope.subject.dateOfBirth),"years"),$scope.subject.debut=moment().diff(moment([$scope.subject.yearOfOnset,0,1]),"years");var submitted=_.filter($scope.subject.invites,function(i){return!!i.submittedAt});submitted.length&&(submitted=_.sortBy(submitted,function(s){return+new Date(s.submittedAt)})),$scope.subject.surveys=submitted.length?_.map(submitted[0].outcomes,function(outcome){var datum={dimension:outcome.dimension};return datum.series=_.map(submitted,function(s){return{x:+new Date(s.submittedAt),y:_.find(s.outcomes,function(o){return o.dimension.id===outcome.dimension.id}).outcome||null}}),datum.latestOutcome=_.last(datum.series).y,datum.series.length>1&&_.isNumber(datum.latestOutcome)&&_.isNumber(datum.series[datum.series.length-2].y)&&(datum.diffFromPrevious=datum.latestOutcome-datum.series[datum.series.length-2].y),datum}):[];var latestInvite=submitted[submitted.length-1],previousInvite=submitted[submitted.length-2];$scope.model.latestInvite=latestInvite;var categories=[];if(latestInvite)var latest={name:"Senaste enkÃ¤tsvar",data:latestInvite.outcomes.map(function(outcome,index){return categories.push(outcome.dimension.desc),outcome.outcome}),color:"#5EBCDC"};if(previousInvite)var previous={name:"Tidigare enkÃ¤tsvar",data:previousInvite?previousInvite.outcomes.map(function(outcome,index){return outcome.outcome}):null,color:"#ECECEC"};$scope.model.categories=categories,$scope.model.selectedInviteData=[],latest&&$scope.model.selectedInviteData.push(latest),previous&&$scope.model.selectedInviteData.push(previous);var promSeries=angular.copy($scope.subject.surveys);promSeries.map(function(dimension){dimension.name=dimension.dimension.desc,dimension.data=dimension.series,dimension.color="#ccc",dimension.lineWidth=1}),$scope.model.promSeries=promSeries,$scope.subject.surveys=_.groupBy($scope.subject.surveys,function(s){return s.dimension.isPREM?2:1});var charts=[{title:"HbA1c",series:getSeries("hba1c"),helpText:'HbA1c â eller "lÃ¥ngtidssocker" â speglar hur blodsockret varit i genomsnitt under cirka tvÃ¥ till tre mÃ¥nader fÃ¶re provtagningen. FÃ¶r vuxna som har diabetes Ã¤r den generella mÃ¥lsÃ¤ttningen enligt socialstyrelsens nationella riktlinjer att HbA1c ska vara lÃ¤gre Ã¤n 52 mmol/mol.'},{title:"BMI",series:getSeries("bmi"),helpText:"Body Mass Index (BMI) Ã¤r ett sÃ¤tt att skatta om man Ã¤r Ã¶verviktig genom att mÃ¤ta fÃ¶rhÃ¥llandet mellan vikt och lÃ¤ngd enligt formeln BMI=vikt (Kg)/ lÃ¤ngd2 (Meter)"},{title:"LDL",series:getSeries("ldl"),helpText:"Det finns flera typer av fetter i blodet. De som brukar bedÃ¶mas Ã¤r totalkolesterol, LDL-kolesterol, HDL-kolesterol och triglycerider.HÃ¶ga halter av det skadliga kolesterolet LDL kan bidra till Ã¥derfÃ¶rfettning. Det kan leda till olika hjÃ¤rt-kÃ¤rlsjukdomar som kÃ¤rlkramp, hjÃ¤rtinfarkt, stroke eller fÃ¶rsÃ¤mrad blodcirkulation i benen, sÃ¥ kallad fÃ¶nstertittarsjuka."},{title:"Blodtryck",series:getSeries("bpSystolic"),helpText:"FÃ¶r vuxna som har diabetes Ã¤r den generella mÃ¥lsÃ¤ttningen enligt socialstyrelsens nationella riktlinjer att blodtrycket ska vara lÃ¤gre Ã¤n 140/85 mm/Hg."}];$scope.subject.charts=_.map(charts,function(chart){return chart.latest=_.last(chart.series).y,chart.yMax=_.max(chart.series,function(s){return s.y}).y,chart}),$timeout(function(){Highcharts.charts.map(function(c){c&&c.reflow()})},500),dataService.getPROMFormMeta().then(function(response){console.log("test",response),$scope.PROMFormMeta=response.data}),$scope.diabetesTypeText=function(){if($scope.contactAttributes)return commonService.getLabelByKeyVal($scope.contactAttributes,"diabetesType",$scope.subject.diabetesType)},$scope.init=function(){if($scope.contactAttributes=dataService.getFormFields(1,1),!$scope.contactAttributes)return void $scope.fetchMetaField();setTablePaging(),populateLatestData(),populateTableData()},$scope.fetchMetaField=function(){dataService.getMetaFields().then(function(d){$scope.init()})},$scope.init()}]),angular.module("ndrApp").controller("AccountController",["$scope","$http","$stateParams","$state","accountService",function($scope,$http,$stateParams,$state,accountService){$scope.accountModel=accountService.accountModel,$scope.accountHelpers=accountService.helpers}]),angular.module("ndrApp").controller("AccountHomeController",["$scope","$q","$stateParams","$state","$log","$filter","dataService","$timeout","$http","APIconfigService",function($scope,$q,$stateParams,$state,$log,$filter,dataService,$timeout,$http,APIconfigService){$scope.model={activeAccount:$scope.accountModel.activeAccount,newsList:null,unitInIQV:dataService.isInProject("iqv"),activeTab:dataService.getValue("homeActiveTab")},$scope.model.keyIndicatorModel={geoType:"unit",unit:$scope.model.activeAccount.unit,unitType:$scope.model.activeAccount.unit.typeID,diabetesType:1===$scope.model.activeAccount.unit.typeID?0:1},$scope.model.statCharModel={activeAccount:$scope.model.activeAccount},$scope.model.statReporting={activeAccount:$scope.model.activeAccount},$scope.handleTabClick=function(tab){this.model.activeTab=tab,dataService.setValue("homeActiveTab",tab)},dataService.getList("news","?excludePublic=true").then(function(data){data=data.splice(0,4),angular.forEach(data,function(item){item.link="#/nyheter/"+item.newsID,item.categoryNames=[],angular.forEach(item.categories,function(category){item.categoryNames.push(category.name)})}),$scope.model.newsList={data:data},setTimeout(function(){jQuery(".Intro--equalHeights").matchHeight(!0)},100)}),$scope.gotoProfile=function(){console.log("Social",$scope.socialnumber),$http({url:APIconfigService.baseURL+"Subject?AccountID="+$scope.model.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,method:"POST",data:{socialNumber:$scope.socialnumber}}).success(function(data){$state.go("main.account.patient",{patientID:data.subjectID})}).error(function(data,status,headers,config){console.log("ERROR")})},$scope.gotoReport=function(){console.log("Social",$scope.socialnumber),$http({url:APIconfigService.baseURL+"Subject?AccountID="+$scope.model.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,method:"POST",data:{socialNumber:$scope.socialnumber}}).success(function(data){$state.go("main.account.report",{patientID:data.subjectID})}).error(function(data,status,headers,config){console.log("ERROR")})}}]),angular.module("ndrApp").controller("ModalInstanceCtrl",["$scope","$modalInstance","$state",function($scope,$modalInstance,$state){$scope.reload=function(){console.log("from close modal",$scope),$scope.cancel(),$state.reload()},$scope.cancel=function(){$modalInstance.close()},$scope.clear=function(){$("html, body").animate({scrollTop:0},500,function(){null!=document.getElementById("socialnumber-input")&&window.document.getElementById("socialnumber-input").focus()}),$modalInstance.close(),console.log("from modal",$scope),$scope.__proto__.subject=null,$scope.__proto__.$parent.socialnumber=null}}]),angular.module("ndrApp").controller("ReportController",["$scope","$stateParams","$state","$modal","$filter","dataService",function($scope,$stateParams,$state,$modal,$filter,dataService){$scope.socialnumber="",$scope.subjectID=$stateParams.patientID,$scope.view=$stateParams.view?$stateParams.view:0,$scope.contactToUpdate=null,$scope.subject=null,$scope.serverSubjectError=null,$scope.method="POST",$scope.newIndex=0,$scope.metafields=null,$scope.isLoading=!1,$scope.isLoaded=!1,$scope.filterValue=function($event){isNaN(String.fromCharCode($event.keyCode))&&44!==$event.keyCode&&46!==$event.keyCode&&$event.preventDefault()},$scope.init=function(){var unitTypeID=$scope.accountModel.activeAccount.unit.typeID;$scope.metafields=dataService.getFormFields(null,unitTypeID),$scope.metafields?($scope.contactQuestions=$scope.getContactQuestions($scope.metafields),$scope.optionalQuestions=$scope.getOptionalQuestions($scope.metafields),$scope.incidenceQuestions=$scope.getIncidenceQuestions($scope.metafields)):$scope.loadQuestions(unitTypeID),$scope.subjectID||$scope.setSocialNumberFieldFocus()},$scope.setSocialNumberFieldFocus=function(){if(!$scope.subjectID)try{window.document.getElementById("socialnumber-input").focus()}catch(err){}},$scope.loadQuestions=function(unitTypeID){$scope.isLoading=!0,dataService.getMetaFields($scope.accountModel.activeAccount.accountID,$scope.accountModel.activeAccount.unit.typeID).then(function(){$scope.isLoading=!1,$scope.init()})},$scope.getContactQuestions=function(questions){return questions.filter(function(q){return 1==q.formID&&!q.isOptional})},$scope.getOptionalQuestions=function(questions){return questions.filter(function(q){return q.isOptional})},$scope.getIncidenceQuestions=function(questions){return questions.filter(function(q){return 2==q.formID})},$scope.subjectID&&dataService.getSubjectById($scope.subjectID).then(function(subject){void 0!=subject.socialNumber&&($scope.socialnumber=subject.socialNumber,$scope.getSubject(!0))}),$scope.getSubject=function(newSocialnumber){$scope.minYear=$scope.socialnumber.substring(0,4),$scope.serverSubjectError=null,$scope.serverSaveErrors=[],$scope.view,dataService.getSubjectBySocialNumber($scope.socialnumber).then(function(data){if(data.status)return $scope.subject=null,void($scope.serverSubjectError="Ingen patient hittades. Kontrollera personnummer.");$scope.serverSubjectError=null,$scope.subject=data,$scope.view=0,setTimeout(function(){window.document.getElementById("bnNewContact").focus()},100)}).catch(function(data,status,headers,config){$scope.subject=null,$scope.serverSubjectError="Ett okÃ¤nt fel intrÃ¤ffade"})},$scope.setContact=function(contactToUpdate){$scope.contactToUpdate=contactToUpdate,$scope.newIndex=$scope.newIndex+1,$scope.view=1,$scope.scrollToPatient()},$scope.scrollToPatient=function(){var $el=$("#subject");$("html, body").animate({scrollTop:$el.offset().top},500)},$scope.setIncidence=function(){$scope.view=2},$scope.init()}]),angular.module("ndrApp").directive("decimals",function(){return{require:"ngModel",link:function(scope,elm,attrs,ngModel){function read(){elm.val()>0&&ngModel.$setViewValue(parseFloat(elm.val()).toFixed(attrs.decimals))}ngModel&&(ngModel.$render=function(){return elm.val(ngModel.$viewValue),!0},elm.bind("blur",function(){scope.$apply(read),ngModel.$render()}),read())}}}),angular.module("ndrApp").controller("SurveyController",["$window","$scope","$stateParams","$state","$filter","$modal","dataService","accountService",function($window,$scope,$stateParams,$state,$filter,$modal,dataService,accountService){function paged(valLists,pageSize){var valLength,retVal;if(valLists){valLength=valLists.length,retVal=[];for(var i=0;i<valLength;i++)i%pageSize==0?retVal[Math.floor(i/pageSize)]=[valLists[i]]:retVal[Math.floor(i/pageSize)].push(valLists[i]);return retVal}}function getPrevOutcomes(invite){if(invite.prevOutcomes)return invite.prevOutcomes;var prevOutcomes=_.filter($scope.model.invites.all,function(i){return i.subject.subjectID===invite.subject.subjectID&&i.inviteID!==invite.inviteID&&i.submittedAt&&new Date(i.submittedAt)<=new Date(invite.submittedAt)});return prevOutcomes.length?(prevOutcomes=_.sortBy(prevOutcomes,function(i){return new Date(i.submittedAt)}),{submittedAt:prevOutcomes[0].submittedAt,outcomes:_.map(prevOutcomes[0].outcomes,function(o,i){return _.isNumber(o.outcome)&&_.isNumber(invite.outcomes[i].outcome)&&(o.difference=invite.outcomes[i].outcome-o.outcome),o})}):null}function getInvites(){dataService.getInvites().then(function(response){$scope.model.loading=!1,$scope.model.invites.all=response.data,$scope.model.invites.all.map(function(invite){invite=$scope.setCalculatedValues(invite)}),$scope.setLists(),$scope.firstPage(),$scope.buildChart($scope.model.invites)})}$scope.accountModel;console.log("SurveyController: Init"),$scope.model={loading:!0,sortType:"createdAt",sortReverse:!0,createdInvites:[],newInvite:{socialnumber:null,subjectID:null,openUntil:moment().add(3,"months").format("YYYY-MM-DD"),tag:null,diabetesType:null},datePicker:{opened:!1,format:"ÃPPEN TILL yyyy-MM-dd",minDate:new Date,dateOptions:{formatYear:"yy",startingDay:1}},datePickerNew:{format:"yyyy-MM-dd"},invites:{all:[],displayed:[],new:[],declined:[],open:[],closed:[],submitted:[],unsigned:[]},socialNumberFilter:null,filterType:dataService.getValue("promAdmFilter"),selectedInvite:null,itemsByPage:[],pageSize:15,currentPage:0};var modalInstance=null;$scope.sort=function(){var aVal,bVal,list=$scope.model.invites.displayed,rev=$scope.model.sortReverse,prop=$scope.model.sortType;list&&(list=list.sort(function(a,b){return"subject.socialNumber"===prop?(aVal=a.subject.socialNumber,bVal=b.subject.socialNumber):(aVal=a[prop]||(rev?"":"ww"),bVal=b[prop]||(rev?"":"ww")),rev?bVal.localeCompare(aVal):aVal.localeCompare(bVal)})),$scope.model.invites.displayed=list,$scope.pagination()},$scope.pagination=function(){$scope.model.itemsByPage=paged($scope.model.invites.displayed,$scope.model.pageSize)},$scope.setPage=function(){$scope.currentPage=this.n},$scope.firstPage=function(){$scope.currentPage=0},$scope.lastPage=function(){$scope.currentPage=$scope.model.itemsByPage.length-1},$scope.range=function(input,total){var ret=[];total||(total=input,input=0);for(var i=input;i<total;i++)0!==i&&i!==total-1&&ret.push(i);return ret},$scope.printThis=function(){$(".modal-body").printThis({debug:!1,importCSS:!0,importStyle:!0,printContainer:!0,pageTitle:"NDR",removeInline:!1,printDelay:100,header:null,formValues:!0})},getInvites(),$scope.setFilter=function(){var activeFilter=dataService.getValue("promAdmFilter");console.log("activeFilter",activeFilter),$scope.model.filterType=activeFilter||$scope.getDefaultFilter()},$scope.getDefaultFilter=function(){return $scope.model.invites.new.length?"new":"all"},$scope.setInvitesOnlyOneYearBack=function(){var now=new Date,oneYearBack=now.setMonth(now.getMonth()-12);return invites.filter(function(i){return!moment(i.openUntil).isBefore(oneYearBack)})},$scope.setCalculatedValues=function(invite){var statusCodes=["isExpired","isDeclined","isOpen","isInitiated","isSigned","isSubmitted"];invite.isExpired=moment(invite.openUntil).isBefore(new Date)&&!invite.isDeclined&&!invite.submittedAt,invite.isDeclined=invite.isDeclined,invite.isOpen=_.isNull(invite.initiatedAt)&&!invite.isDeclined&&!invite.submittedAt&&!invite.isExpired,invite.isClosed=_.isNull(invite.initiatedAt)&&!invite.isDeclined&&!invite.submittedAt&&invite.isExpired,invite.isInitiated=!_.isNull(invite.initiatedAt)&&!invite.submittedAt&&!invite.isDeclined,invite.isSubmitted=!_.isNull(invite.submittedAt),invite.isUnsigned=invite.submittedAt&&!invite.isApprovedNDR,invite.isSigned=invite.submittedAt&&invite.isApprovedNDR;var status=statusCodes[_.findIndex([invite.isExpired,invite.isDeclined,invite.isOpen,invite.isInitiated,invite.isSigned,invite.isSubmitted],function(d){return 1==d})];return invite.status=status,"isSubmitted"===status&&invite.isSigned&&console.log(invite),invite.datePicker={minDate:new Date(invite.createdAt),opened:!1},invite},$scope.setSubsets=function(){var invites=$scope.model.invites.all;$scope.model.invites.new=_.filter(invites,function(invite){return invite.submittedAt&&!invite.isApprovedNDR}),$scope.model.invites.current=_.filter(invites,function(invite){return invite.isCurrent}),$scope.model.invites.declined=_.filter(invites,function(invite){return invite.isDeclined}),$scope.model.invites.open=_.filter(invites,function(invite){return invite.isOpen}),$scope.model.invites.closed=_.filter(invites,function(invite){return invite.isClosed}),$scope.model.invites.submitted=_.filter(invites,function(invite){return invite.isSubmitted})},$scope.buildChart=function(model){$scope.chart=Highcharts.chart("chart",{chart:{height:120,type:"bar"},title:{text:"",style:{display:"none"}},subtitle:{text:"",style:{display:"none"}},yAxis:{min:0,visible:!1,title:{text:"",style:{display:"none"}},gridLineWidth:0,lineWidth:0,labels:{enabled:!1}},xAxis:{visible:!1,lineWidth:0,tickWidth:0,labels:{enabled:!1}},credits:{enabled:!1},legend:{reversed:!0,padding:0},plotOptions:{series:{stacking:"percent",enableMouseTracking:!1},bar:{dataLabels:{enabled:!0,formatter:function(){return Math.round(this.percentage)+" %"},style:{fontSize:"14px"}}}},series:[{name:"AvbÃ¶jda",data:[parseInt((model.declined.length/model.all.length*100).toFixed(0))],color:"#a6a6a6"},{name:"StÃ¤ngda",data:[parseInt((model.closed.length/model.all.length*100).toFixed(0))],color:"#bfbfbf"},{name:"Ãnnu ej besv.",data:[parseInt((model.open.length/model.all.length*100).toFixed(0))],color:"#d9d9d9"},{name:"Besvarade",data:[parseInt((model.submitted.length/model.all.length*100).toFixed(0))],color:"#f2f2f2"}]})},$scope.updateInviteLocal=function(id,invite){invite=$scope.setCalculatedValues(invite);for(var i=0;i<$scope.model.invites.all.length;i++)if($scope.model.invites.all[i].inviteID===id){$scope.model.invites.all[i]=invite;break}},$scope.deleteInviteLocal=function(id){for(var i=0;i<$scope.model.invites.all.length;i++)if($scope.model.invites.all[i].inviteID===id){$scope.model.invites.all.splice(i,1);break}},$scope.setStat=function(){var answered=invites.filter(function(i){return i.submittedAt}),declined=invites.filter(function(i){return i.isDeclined});return{created:invites.length,answered:answered.length,declined:declined.length,notAnswered:invites.length-answered.length}},$scope.setLists=function(){$scope.setSubsets(),$scope.setFilter(),$scope.setDisplayed()},$scope.setDisplayed=function(type){$scope.firstPage(),$scope.model.filterType=type||$scope.model.filterType,dataService.setValue("promAdmFilter",$scope.model.filterType),$scope.model.invites.displayed="socialnumber"===type?_.filter($scope.model.invites.all,function(invite){return-1!==invite.subject.socialNumber.replace("-","").indexOf($scope.model.socialNumberFilter.replace("-",""))}):$scope.model.invites[$scope.model.filterType],$scope.sort()},$scope.showAnswersModal=function(invite){invite.prevOutcomes=getPrevOutcomes(invite),invite.copyText=_.reduce(invite.outcomes,function(p,n){var outcome=(invite.prevOutcomes&&_.find(invite.prevOutcomes.outcomes,function(i){return i.dimension.id===n.dimension.id}),n.outcome||"saknas");return p+n.dimension.desc+" "+outcome+"\n"},""),invite.copyText="Dimension VÃ¤rde \n"+invite.copyText,dataService.getPROMFormMeta().then(function(response){$scope.model.formMeta=response.data,$scope.model.selectedInvite=invite;var latestInvite=invite,prevInvites=_.filter($scope.model.invites.all,function(i){return i.subject.subjectID===invite.subject.subjectID&&i.inviteID!==invite.inviteID&&i.submittedAt&&new Date(i.submittedAt)<=new Date(invite.submittedAt)}),previousInvite=prevInvites[prevInvites.length-2],categories=[],latest={name:"Senaste enkÃ¤tsvar",data:latestInvite.outcomes.map(function(outcome,index){return categories.push(outcome.dimension.desc),outcome.outcome}),color:"#5EBCDC"},previous={name:"Tidigare enkÃ¤tsvar",data:previousInvite?previousInvite.outcomes.map(function(outcome,index){return outcome.outcome}):null,color:"#ECECEC"};$scope.model.categories=categories,$scope.model.selectedInviteData=[latest,previous],modalInstance=$modal.open({templateUrl:"answersModalTmpl",backdrop:!0,scope:$scope,size:"lg"})})},$scope.showInviteModal=function(invite){$scope.model.selectedInvite=invite,modalInstance=$modal.open({templateUrl:"inviteModalTmpl",backdrop:!0,scope:$scope,size:"lg"})},$scope.goToPrintView=function(invite){if(invite&&($scope.model.selectedInvite=invite),!$scope.model.selectedInvite)return!1;modalInstance&&modalInstance.dismiss("cancel");var url=$state.href("surveyPrint",{unitName:$scope.model.selectedInvite.unit.name,socialNumber:$scope.model.selectedInvite.subject.socialNumber,key:$scope.model.selectedInvite.key});$window.open(url,"_blank")},$scope.selectCopyView=function(){setTimeout(function(){document.getElementById("copy-view").select()},10)},$scope.signInvite=function(invite){invite.isApprovedNDR=!0,invite.signed=!0;var signedInvite=angular.copy(invite);delete signedInvite.datePicker,delete signedInvite.copyText,delete signedInvite.prevOutcomes,dataService.updateInvite(invite.inviteID,signedInvite).then(function(response){invite.signed=!0,$scope.updateInviteLocal(invite.inviteID,response.data),$scope.setLists()}).catch(function(error){modalInstance=$modal.open({template:"<p>NÃ¥got gick fel, vÃ¤nligen fÃ¶rsÃ¶k igen.</p>",backdrop:!0})})},$scope.goToSubjectProfile=function(subject){modalInstance&&modalInstance.dismiss("cancel"),$state.go("main.account.patient",{patientID:subject.subjectID})},$scope.showDeleteModal=function(invite){$scope.model.selectedInvite=invite,modalInstance=$modal.open({templateUrl:"deleteModalTmpl",backdrop:!0,scope:$scope}).result.catch(function(res){if("cancel"!==res&&"escape key press"!==res)throw res})},$scope.deleteInvite=function(inviteID){dataService.deleteInvite(inviteID).then(function(response){$scope.deleteInviteLocal(inviteID),$scope.setLists(),modalInstance.dismiss("cancel")}).catch(function(error){modalInstance=$modal.open({template:"<p>NÃ¥got gick fel, vÃ¤nligen fÃ¶rsÃ¶k igen.</p>",backdrop:!0})})},$scope.openDatePickerEdit=function($event,invite){$event.preventDefault(),$event.stopPropagation(),invite.datePicker.opened=!0},$scope.openUntilEdited=function(invite){invite=angular.copy(invite),delete invite.datePicker,invite.openUntil=moment(invite.openUntil).format("YYYY-MM-DD"),dataService.updateInvite(invite.inviteID,invite).then(function(response){$scope.updateInviteLocal(invite.inviteID,response.data),$scope.setLists()}).catch(function(error){modalInstance=$modal.open({template:"<p>NÃ¥got gick fel, vÃ¤nligen fÃ¶rsÃ¶k igen.</p>",backdrop:!0})})},$scope.createInvite=function(){var invite=$scope.model.newInvite;if(!invite.subjectID||!invite.openUntil)return!1;$scope.model.newInviteError="",dataService.createInvite({subjectID:invite.subjectID,openUntil:moment(invite.openUntil).format("YYYY-MM-DD"),tag:invite.tag,diabetesTypeAs:invite.selectedDiabetesTypeCode}).then(function(response){$scope.model.createdInvites.push(response.data),$scope.model.newInvite={socialnumber:null,subjectID:null,openUntil:moment().add(3,"months").format("YYYY-MM-DD"),tag:null,currentDiabetesType:null},getInvites()}).catch(function(err){err&&err.data&&2===err.data.code?$scope.model.newInviteError="Personen har redan en Ã¶ppen inbjudan.":err&&err.data&&7===err.data.code?$scope.model.newInviteError="Du kan endast bjuda enkÃ¤ter till personer med rapporterade besÃ¶k pÃ¥ din enhet.":$scope.model.newInviteError="NÃ¥got gick fel, vÃ¤nligen fÃ¶rsÃ¶k igen."})},$scope.fetchSubject=function(){var sn=$scope.model.newInvite.socialnumber;if(!sn||!sn.match(accountService.helpers.pnrRegex))return!1;$scope.model.newInviteError=null,$scope.model.newInviteDiabetesMissing=!1,$scope.model.newInvite.subjectID=null,$scope.model.newInvite.currentDiabetesType=null,$scope.model.newInvite.selectedDiabetesType=null,dataService.getSubjectBySocialNumber(sn).then(function(subject){if(!subject.subjectID)return $scope.model.newInviteError="Personnummer Ã¤r felaktigt eller hittas inte i folkbokfÃ¶ringen.",!1;1!=subject.diabetesType&&2!=subject.diabetesType?($scope.model.newInviteDiabetesMissing=!0,$scope.model.newInvite.currentDiabetesTypeCode=subject.diabetesType,$scope.model.newInvite.currentDiabetesType=subject.diabetesTypeText,$scope.model.newInvite.selectedDiabetesTypeCode=void 0):($scope.model.newInvite.currentDiabetesTypeCode=subject.diabetesType,$scope.model.newInvite.currentDiabetesType=subject.diabetesTypeText,$scope.model.newInvite.selectedDiabetesTypeCode=subject.diabetesType),$scope.model.newInvite.subjectID=subject.subjectID}).catch(function(error){$scope.model.newInviteError="NÃ¥got gick fel, vÃ¤nligen fÃ¶rsÃ¶k igen."})},$scope.openDatePicker=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.model.datePicker.opened=!0}}]),angular.module("ndrApp").controller("SurveyPrintController",["$scope","$stateParams","$state",function($scope,$stateParams,$state){console.log($stateParams),$scope.model={unitName:$stateParams.unitName,socialNumber:$stateParams.socialNumber,key:$stateParams.key}}]),angular.module("ndrApp").controller("ReportPROMController",["$scope","$stateParams","$state","$modal","$filter","$timeout","List","dataService",function($scope,$stateParams,$state,$modal,$filter,$timeout,List,dataService){console.log("PROM Controller loaded"),$scope.model={form:null,props:[],answers:{},missingAnswers:[],highlightedQuestion:null},$scope.showNotAnswered=function(){$scope.model.missingAnswers=[];for(var i=0;i<$scope.model.props.length;i++)$scope.model.answers[$scope.model.props[i]]||$scope.model.missingAnswers.push({no:i+1,columnName:$scope.model.props[i]})},$scope.setProps=function(){$scope.model.props=[];for(var i=0;i<$scope.model.form.length;i++)for(var j=0;j<$scope.model.form[i].questiongroups.length;j++)for(var k=0;k<$scope.model.form[i].questiongroups[j].questions.length;k++)$scope.model.props.push($scope.model.form[i].questiongroups[j].questions[k].columnName)},$scope.init=function(){$scope.setProps(),$scope.showNotAnswered()},dataService.getPROMFormMeta(function(d){$scope.model.form=d,$scope.init()}),$scope.click=function(columnName,val){$scope.model.answers[columnName]=$scope.model.answers[columnName]==val?null:val,$scope.showNotAnswered()},$scope.save=function(){$modal.open({templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",backdrop:!0,scope:$scope})},$scope.gotoAnchor=function(x){var elm=document.getElementById("anchor"+x);$("html, body").animate({scrollTop:$(elm).offset().top-15+"px"},"fast"),console.log(x),$scope.model.highlightedQuestion=x,$timeout(function(){$scope.model.highlightedQuestion=null},2e3)}}]),angular.module("ndrApp").controller("PatientController",["$scope","$q","$timeout","$stateParams","$state","$log","$filter","dataService","accountService","commonService",function($scope,$q,$timeout,$stateParams,$state,$log,$filter,dataService,accountService,commonService){function getPatient(id){$q.all([dataService.getSubjectById(id).then(function(response){return response}),dataService.getMetaFields($scope.accountModel.activeAccount.accountID,$scope.accountModel.activeAccount.unit.typeID).then(function(response){return dataService.getFormFields(1,$scope.accountModel.activeAccount.unit.typeID)})]).then(function(values){console.log("values found",values),$log.debug("Retrieved subject",values[0]),values[0].contacts=_.sortBy(values[0].contacts,"contactDate").reverse(),$scope.subject=values[0],$scope.contactAttributes=values[1],$scope.socialnumber=$scope.subject.socialNumber,$scope.latest=commonService.getLatestModel($scope.subject,$scope.contactAttributes),$scope.subject.age=moment().diff(moment($scope.subject.dateOfBirth),"years"),$scope.subject.debut=moment().diff(moment([$scope.subject.yearOfOnset,0,1]),"years")})}$scope.subject=void 0,$scope.subjectID=$stateParams.patientID,$scope.pnrRegex=accountService.helpers.pnrRegex,$scope.unitTypeID=accountService.accountModel.activeAccount.unit.typeID,$scope.hasError=!1,$scope.errorMessage="",$scope.backToSearchVisible=$stateParams.backToSearchVisible,$scope.backToSurveysVisible=$stateParams.backToSurveysVisible,$scope.diabetesTypeText=function(){if($scope.contactAttributes)return commonService.getLabelByKeyVal($scope.contactAttributes,"diabetesType",$scope.subject.diabetesType)},$scope.getSubject=function(){$scope.socialnumber&&dataService.getSubjectBySocialNumber($scope.socialnumber).then(function(data){if(data&&data.contacts)return data.contacts.length>0?($scope.hasError=!1,void getPatient(data.subjectID)):($scope.hasError=!0,void($scope.errorMessage="Personen finns inte rapporterad pÃ¥ din enhet."));$scope.hasError=!0,$scope.errorMessage="Felaktigt personnummer. Kontrollera inmatning."})},$scope.subjectID&&getPatient($scope.subjectID)}]),angular.module("ndrApp").controller("PatientPrintController",["$scope","$q","$timeout","$stateParams","$state","$log","$filter","dataService","accountService","commonService",function($scope,$q,$timeout,$stateParams,$state,$log,$filter,dataService,accountService,commonService){function populateTableData(){var included=3!=$scope.unitTypeID?["contactDate","hba1c","weight","height","bmi","bpSystolic","bpDiastolic","cholesterol","triglyceride","hdl","ldl","albuminuria","macroscopicProteinuria","fundusExaminationDate","footExamination","footRiscCategory","physicalActivity","smokingHabit"]:["contactDate","hba1c","weight","height","noInsDosePerDay","noUnitsBasePerDay","meanGlukosesLast2W","sdCGMLast2W","shareGlucoseLast2W","shareGlucoseTarget","hypoglycemiaKids","ketoKids"],tableFields=commonService.includeMetafields($scope.contactAttributes,included),contacts=angular.copy($scope.subject.contacts).splice(0,5);$scope.model.data.table=commonService.populateTableData(contacts,tableFields,"contactDate")}function populateFullTableData(){var excluded=["unit","contactID","insertedAt","lastUpdatedAt","unitID","optionals"],tableFields=commonService.excludeMetafields($scope.contactAttributes,excluded),contacts=angular.copy($scope.subject.contacts).splice(0,5);$scope.model.data.fullTable=commonService.populateTableData(contacts,tableFields,"contactDate")}function populateLatestData(){$scope.model.latest=$stateParams.latest?$stateParams.latest:commonService.getLatestModel($scope.subject,$scope.contactAttributes)}$scope.subject=void 0,$scope.subjectID=$stateParams.patientID,$scope.unitTypeID=accountService.accountModel.activeAccount.unit.typeID,$scope.backToSearchVisible=$stateParams.backToSearchVisible,$scope.model={data:{trend:{},chart:{gauge:{physicalActivity:{}}},table:null,fullTable:null},latest:null,mode:"visual"},$scope.init=function(){$scope.subjectID&&($scope.subject?$scope.setData():$scope.getData($scope.subjectID))},$scope.setData=function(){populateTableData(),populateFullTableData(),populateLatestData(),$timeout(function(){jQuery(window).resize()},500)},$scope.gotoReport=function(subjectID){console.log("go",subjectID),$state.go("main.account.report",{patientID:subjectID})},$scope.print=function(){window.print()},$scope.getData=function(subjectID){$q.all([dataService.getSubjectById(subjectID).then(function(response){return response}),dataService.getMetaFields($scope.accountModel.activeAccount.accountID,$scope.unitTypeID).then(function(response){return dataService.getFormFields(1,$scope.unitTypeID)})]).then(function(values){$log.debug("Retrieved subject",values[0]),values[0].contacts=_.sortBy(values[0].contacts,"contactDate").reverse(),$scope.contactAttributes=values[1],$scope.subject=values[0],$scope.subject.age=moment().diff(moment($scope.subject.dateOfBirth),"years"),$scope.setData()})},$scope.init()}]),angular.module("ndrApp").controller("HomeController",["$scope","dataService","accountService",function($scope,dataService,accountService){$scope.model={listModelNews:{},autocompleteModel:{selected:void 0,options:dataService.data.preparedGeoList},stats:{}},$scope.accountModel=accountService.accountModel,$scope.selectedAccountID=null!=accountService.accountModel.activeAccount?accountService.accountModel.activeAccount.accountID:null,$scope.AccountIsSelected=function(){$scope.selectedAccountID>0&&accountService.updateAccount($scope.selectedAccountID)};var date=new Date,query_smoking=dataService.queryFactory({ID:[202],level:0,fromYear:date.getFullYear()-1,toYear:0==date.getMonth()?date.getFullYear()-1:date.getFullYear(),fromMonth:date.getMonth()+1,toMonth:0==date.getMonth()?12:date.getMonth()}),query_hba1c_70=dataService.queryFactory({ID:[221],level:0,diabetesType:1,fromYear:date.getFullYear()-1,toYear:0==date.getMonth()?date.getFullYear()-1:date.getFullYear(),
fromMonth:date.getMonth()+1,toMonth:0==date.getMonth()?12:date.getMonth()}),query_hba1c_rep=dataService.queryFactory({ID:[221],level:0,fromYear:date.getFullYear()-1,toYear:0==date.getMonth()?date.getFullYear()-1:date.getFullYear(),fromMonth:date.getMonth()+1,toMonth:0==date.getMonth()?12:date.getMonth()});dataService.getStats(query_smoking).then(function(data){$scope.model.stats.smoking=data}),dataService.getStats(query_hba1c_70).then(function(data){$scope.model.stats.hba1c_70=data}),dataService.getStats(query_hba1c_rep).then(function(data){$scope.model.stats.hba1c_rep=data}),dataService.getList("news").then(function(data){data=data.splice(0,4),angular.forEach(data,function(item){item.link="#/nyheter/"+item.newsID,item.categoryNames=[],angular.forEach(item.categories,function(category){item.categoryNames.push(category.name)})}),$scope.model.listModelNews={data:data},setTimeout(function(){jQuery(".Intro--equalHeights").matchHeight(!0)},100)})}]),angular.module("ndrApp").controller("FilterUnitsController",["$scope","dataService",function($scope,dataService){function filterUnits(postalCode){var filtered=[];for(postalCode=postalCode.replace(/\s+/g,""),$scope.triedFuzzy=!1;!filtered.length&&postalCode.length;)(!$scope.triedFuzzy||$scope.triedFuzzy&&postalCode.length>2)&&(filtered=getFilteredUnits(postalCode)),filtered.length||(postalCode=postalCode.slice(0,-1),$scope.triedFuzzy=!0,$scope.fuzzySuccess=postalCode.length>2);$scope.filteredUnits=filtered}function getFilteredUnits(postalCode){return _.take(_.filter(units,function(unit){return 0===unit.postalCode.replace(/\s+/g,"").indexOf(postalCode)}),10)}var units=[];$scope.filteredUnits=[],$scope.$watch("postalCode",function(postalCode){units.length&&filterUnits(postalCode)}),dataService.getUnits(function(data){units=data})}]);