"use strict";angular.module("ndrApp",["ui.router","angular-loading-bar","restangular","selectize","ngSanitize","ui.bootstrap","vr.directives.slider","truncate","once","angulartics","angulartics.google.analytics"]).config(["datepickerPopupConfig",function(datepickerPopupConfig){datepickerPopupConfig.currentText="Idag",datepickerPopupConfig.clearText="Rensa",datepickerPopupConfig.closeText="St√§ng",datepickerPopupConfig.toggleWeeksText="Veckoformat"}]).run(function($state,$rootScope,accountService){$rootScope.$on("$stateChangeSuccess",function(event,toState){$rootScope.$state=toState.name}),$rootScope.$on("$stateChangeStart",function(event,toState){0!==toState.name.indexOf("main.account")||accountService.accountModel.activeAccount||$state.go("main.home",{},{reload:!0})})}).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){var templateURL="templates/";$urlRouterProvider.otherwise("/"),$stateProvider.state("main",{"abstract":!0,template:"<div ui-view></div>",resolve:{config:function(dataService){return dataService.bootstrap()}}}).state("main.home",{controller:"HomeController",url:"/",templateUrl:"src/pages/Home/home.html"}).state("main.guidelines",{url:"/guidelines",controller:"GuidelinesController",templateUrl:"src/pages/Guidelines/guidelines.html",resolve:{}}).state("main.accountAbout",{url:"/konto",templateUrl:"src/pages/About/aboutAccount.html",resolve:{}}).state("main.currentUser",{url:"/currentuser",controller:"CurrentUserController",templateUrl:"src/pages/CurrentUser/currentUser.html",resolve:{}}).state("main.english",{url:"/english",templateUrl:"src/pages/Language/english.html",resolve:{}}).state("main.patient",{url:"/for-dig-med-diabetes",controller:"FilterUnitsController",templateUrl:"src/pages/Patient/patient.html"}).state("main.contribute",{url:"/du-bidrar",templateUrl:"src/pages/Patient/contribute.html"}).state("main.statistics",{url:"/statistik",templateUrl:"src/pages/Statistics/statistics.html",controller:"StatisticsController"}).state("main.statisticsAbout",{url:"/om-statistiken",templateUrl:"src/pages/Statistics/statisticsAbout.html"}).state("main.annualReport",{url:"/arsrapport",templateUrl:"src/pages/Statistics/annualReport.html"}).state("main.compare",{url:"/knappen",templateUrl:"src/pages/Compare/compare.html"}).state("main.risk",{url:"/risk",templateUrl:"src/pages/Risk/risk.html"}).state("main.profiles",{url:"/profil",templateUrl:"src/pages/Profiles/profiles.html"}).state("main.profiles.county",{controller:"CountyController",url:"/landsting/:id",templateUrl:"src/pages/Profiles/profiles.county.html"}).state("main.profiles.unit",{controller:"UnitController",url:"/enhet/:id",templateUrl:"src/pages/Profiles/profiles.unit.html"}).state("main.research",{url:"/forskning",templateUrl:"src/pages/Research/research.html",controller:"ResearchController"}).state("main.researchItem",{url:"/forskning/:id",templateUrl:"src/components/Publication/Publication.html",controller:"PublicationController"}).state("news",{url:"/nyheter",templateUrl:"src/pages/News/news.html",controller:"NewsController"}).state("newsItem",{url:"/nyheter/:id",templateUrl:"src/components/Article/article.html",controller:"NewsItemController"}).state("main.improvement",{url:"/forbattringsprojekt",templateUrl:"src/pages/Improvement/improvement.html"}).state("main.about",{url:"/om-ndr",templateUrl:"src/pages/About/about.html"}).state("main.forms",{url:"/blanketter",templateUrl:"src/pages/Forms/forms.html"}).state("main.press",{url:"/press",templateUrl:"src/pages/Press/press.html"}).state("main.prom",{url:"/prom",templateUrl:"src/pages/Prom/prom.html"}).state("main.account",{url:"/inloggad",templateUrl:"src/pages/Account/account.html",controller:"AccountController",resolve:{config:function(accountService){return accountService.bootstrap()}}}).state("main.account.home",{url:"/hem",templateUrl:"src/pages/Account/home.html",controller:"AccountHomeController"}).state("main.account.report",{url:"/rapportera/:patientID",templateUrl:"src/pages/Account/Report/report.html",controller:"ReportController"}).state("main.account.patients",{url:"/patienter",templateUrl:"src/pages/Account/Patients/patients.html",controller:"PatientsController",params:{restoreFilters:""}}).state("main.account.patients2",{url:"/patienter2",templateUrl:"src/pages/Account/Patients/patients2.html",controller:"Patients2Controller"}).state("main.account.patient",{url:"/patient/:patientID",templateUrl:"src/pages/Account/Patients/patient_profile.html",controller:"PatientController",params:{backToSearchVisible:""}}).state("main.account.patientPrint",{url:"/patient/print/:patientID",templateUrl:"src/pages/Account/Patients/patient_print.html",controller:"PatientPrintController"}).state("page",{url:"/page/:id",templateUrl:function(stateParams){var preferred=templateURL+"page/"+stateParams.id+".html";return preferred}})}]).run(["$rootScope","$state",function($rootScope,$state){$rootScope.is=function(name){return $state.is(name)},$rootScope.$on("$viewContentLoaded",function(){var interval=setInterval(function(){"complete"==document.readyState&&(window.scrollTo(0,0),clearInterval(interval),$("input").placeholder(),jQuery(".u-equalHeight").matchHeight(!0),jQuery(".Intro--equalHeights").matchHeight(!1),jQuery(window).width()>=700&&(jQuery(".InfoGrid-equalHeightsGroup1").matchHeight(!1),jQuery(".InfoGrid-equalHeightsGroup2").matchHeight(!1),jQuery(".InfoGrid-equalHeightsGroup3").matchHeight(!1),jQuery(".InfoGrid-equalHeightsGroup4").matchHeight(!1)))},100)})}]),angular.module("ndrApp").controller("AppController",["accountService",function(accountService){accountService.bootstrap()}]),angular.module("ndrApp").controller("GuidelinesController",["$scope",function($scope){$scope.myModel=1,$scope.myOptions=[{id:1,title:"Spectrometer"},{id:2,title:"Star Chart"},{id:3,title:"Laser Pointer"}],$scope.config={create:!0,valueField:"id",labelField:"title",delimiter:"|",maxItems:1,placeholder:"Pick something"},$scope.today=function(){$scope.dt=new Date},$scope.today(),$scope.clear=function(){$scope.dt=null},$scope.disabled=function(date,mode){return"day"===mode&&(0===date.getDay()||6===date.getDay())},$scope.toggleMin=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.toggleMin(),$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0]}]),angular.module("ndrApp").service("dataService",["$q","$http","Restangular","accountService","APIconfigService",function($q,$http,Restangular,accountService,APIconfigService){var self=this;this.data={units:[],counties:[],indicators:[],preparedGeoList:[]},Restangular.setBaseUrl(APIconfigService.baseURL),Restangular.setDefaultRequestParams({APIKey:APIconfigService.APIKey});var endpoints={indicator:Restangular.one("indicator"),indicatorresult:Restangular.one("indicatorresult"),contactAttributes:Restangular.one("ContactAttribute"),units:Restangular.all("unit"),counties:Restangular.all("county"),news:Restangular.all("news"),researchproject:Restangular.all("researchproject"),contacts:Restangular.all("Contact"),subject:Restangular.all("subject")};this.getContactAttributes=function(filter){return endpoints.contactAttributes.get().then(function(data){var filtered=[];return filter?(filter.include&&(filtered=filtered.concat(_.filter(data.plain(),function(d){return-1!==_.indexOf(filter.include,d.columnName)}))),filter.exclude&&(filtered=filtered.concat(_.filter(data.plain(),function(d){return-1===_.indexOf(filter.exclude,d.columnName)}))),filtered):data.plain()})["catch"](function(error){return error})},this.getSubjectById=function(id){return Restangular.one("Subject",id).get({AccountID:accountService.accountModel.activeAccount.accountID}).then(function(subject){return subject.plain()})["catch"](function(error){return error})},this.getSubjectBySocialNumber=function(socialNumber){var query={url:"https://ndr.registercentrum.se/api/Subject?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,method:"POST",data:{socialNumber:socialNumber}};return $http(query).then(function(response){return response.data})["catch"](void 0)},this.deleteContact=function(id){var query={url:APIconfigService.baseURL+"Contact/"+id+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,method:"DELETE"};return $http(query).then(function(response){return response.data})["catch"](void 0)},this.saveContact=function(data){var query={url:APIconfigService.baseURL+"Contact/"+(data.contactID||"")+"?AccountID="+accountService.accountModel.activeAccount.accountID+"&APIKey="+APIconfigService.APIKey,method:data.contactID?"PUT":"POST",data:data};return $http(query).then(function(response){return response.data})["catch"](void 0)},this.getContacts=function(query){return query=query||{},query.AccountID=accountService.accountModel.activeAccount.accountID,endpoints.contacts.getList(query).then(function(data){return data.plain()})["catch"](function(error){return error})},this.getUnits=function(callback){var query=query||{};query.APIKey=APIconfigService.APIKey,$.ajax({url:APIconfigService.baseURL+"Unit",data:query,type:"GET",dataType:"json",success:callback})},this.getOptionalQuestionsMeta=function(accountID,callback){var query=query||{};query.APIKey=APIconfigService.APIKey,query.AccountID=accountID,$.ajax({url:APIconfigService.baseURL+"ContactOptionalMeta",data:query,type:"GET",dataType:"json",success:callback})},this.getSubjects=function(query,callback){query=query||{},query.AccountID=accountService.accountModel.activeAccount.accountID,query.APIKey=APIconfigService.APIKey,$.ajax({url:APIconfigService.baseURL+"subject",data:query,type:"GET",dataType:"json",success:callback})},this.getList=function(type){return endpoints[type].getList()},this.getAny=function(type,params){return Restangular.all(type).get(params)},this.getOne=function(type,id){return Restangular.one(type,id).get()},this.getStats=function(params){return endpoints.indicatorresult.get(params).then(function(data){return data.plain()})},this.prepareGeoList=function(){var preparedGeoList=[];_.each(self.data.units,function(obj){var o={type:"unit",name:obj.name,id:"unit_"+obj.unitID};preparedGeoList.push(o)}),_.each(self.data.counties,function(obj){var o={type:"county",name:obj.name,id:"county_"+obj.code};preparedGeoList.push(o)}),self.data.preparedGeoList=preparedGeoList},this.queryFactory=function(params){var defaults={level:1,countyCode:0,unitID:0,indicatorID:null,fromYear:2014,fromQuartal:0,fromMonth:0,toYear:2014,toQuartal:0,toMonth:0,diabetesType:0,sex:0,unitType:0,fromAge:0,toAge:0,interval:null,recalculate:!1,outdatedDays:14};return angular.extend(defaults,params)};var selectedSearchFilters={};this.setSearchFilters=function(prop,value){prop||value?selectedSearchFilters[prop]=value:selectedSearchFilters={}},this.getSearchFilters=function(prop){return prop?selectedSearchFilters[prop]:selectedSearchFilters},this.bootstrap=function(){var useStaticUnits=!1;return useStaticUnits?$q.all([]).then(function(){self.data.units=units,self.data.counties=counties,self.prepareGeoList()}):$q.all([endpoints.units.getList({exposeMode:"minified",isActive:!0}),endpoints.counties.getList(),endpoints.indicator.get()]).then(function(data){self.data.units=data[0].plain(),self.data.counties=data[1].plain(),self.data.indicators=data[2].plain(),self.prepareGeoList()})}}]),angular.module("ndrApp").directive("columnChart",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element){var chart=jQuery(".chart-container",element).highcharts({chart:{type:"column",height:130,marginTop:5,spacingRight:10,spacingLeft:10,spacingBottom:5},title:{text:""},xAxis:{minorTickLength:0,tickLength:0,gridLineWidth:0,gridLineColor:"#eee",lineWidth:0,title:{text:""},type:"category",labels:{formatter:function(){return this.value==scope.selected?this.value:void 0}}},yAxis:{gridLineWidth:0,gridLineColor:"#eee",lineWidth:0,min:50,max:70,title:{text:"",align:"high"}},tooltip:{formatter:function(){Highcharts.dateFormat("%Y",new Date(this.x));return this.key+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{pointWidth:6}},legend:{enabled:!1,layout:"vertical",align:"right",verticalAlign:"top",x:-40,y:100,floating:!0,borderWidth:1,backgroundColor:Highcharts.theme&&Highcharts.theme.legendBackgroundColor||"#FFFFFF",shadow:!0},credits:{enabled:!1},series:[{color:"#ccc",name:"Amount",data:[{name:"a",y:100},{name:"b",y:120}]}]});scope.$watch("model",function(model){"undefined"!=typeof model&&(scope.selected=_.findWhere(model,{color:"#FFCC01"}).name),chart.highcharts().series[0].setData(model)},!0)}}}]),angular.module("ndrApp").directive("lineChart",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element){var chart=jQuery(".chart-container",element).highcharts({chart:{type:"area",height:130,marginTop:20,marginBottom:30,marginLeft:35,marginRight:5,spacingLeft:30},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%Y"},lineWidth:0,gridLineWidth:0,minorGridLineWidth:0,lineColor:"#eee",labels:{},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:1,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,min:40,max:70,title:{text:"",align:"high"},labels:{align:"right"}},tooltip:{formatter:function(){var time=Highcharts.dateFormat("%Y",new Date(this.x));return time+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},area:{fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,Highcharts.Color("#E14274").setOpacity(.5).get("rgba")],[1,Highcharts.Color("#E14274").setOpacity(0).get("rgba")]]}}},legend:{enabled:!1,layout:"vertical",align:"right",verticalAlign:"top",x:-40,y:100,floating:!0,borderWidth:1,backgroundColor:Highcharts.theme&&Highcharts.theme.legendBackgroundColor||"#FFFFFF",shadow:!0},credits:{enabled:!1},series:[{dashStyle:"ShortDot",color:"#E14274",name:"V√§rde",data:[{x:1,y:10},{x:3,y:5}]}]});scope.$watch("model",function(model){chart.highcharts().series[0].setData(angular.copy(model))},!0)}}}]),angular.module("ndrApp").directive("physicalChart",[function(){return{scope:{model:"="},restrict:"A",link:function($scope){function render(model){model&&($scope.model.domainValues=[{text:"Aldrig",code:1,XMLText:"Aldrig",isActive:!0},{text:"<1",code:2,XMLText:"Oregelbundet",isActive:!0},{text:"1-2",code:3,XMLText:"Regelbundet1",isActive:!0},{text:"3-5",code:4,XMLText:"Regelbundet2",isActive:!0},{text:"Dagligen",code:5,XMLText:"Dagligen",isActive:!0}])}$scope.$watch("model",render,!0)}}}]),angular.module("ndrApp").directive("lineChartKey",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element){scope.$watch("model",function(){jQuery(".chart-container",element).highcharts({chart:{type:"spline",height:470,marginTop:60,marginBottom:30,marginLeft:45,marginRight:50,spacingLeft:30},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{month:"%Y",year:"%Y"},lineWidth:1,gridLineWidth:0,minorGridLineWidth:0,labels:{enabled:!0},minorTickLength:0,tickLength:0},yAxis:{opposite:!0,gridLineWidth:1,gridLineColor:"white",lineWidth:0,minorGridLineWidth:0,maxPadding:.4,minPadding:.4,ceiling:100,title:{text:"",align:"high"},labels:{align:"left",formatter:function(){return this.value+"%"}}},tooltip:{formatter:function(){var time=Highcharts.dateFormat("%Y",new Date(this.x));return time+": <b>"+this.y+"</b><br />Baserat p√• "+this.point.cRep+" rapporteringar"}},plotOptions:{bar:{dataLabels:{enabled:!0}},spline:{dataLabels:{style:{fontSize:"12px"},enabled:!0,allowOverlap:!0}}},legend:{layout:"horizontal",align:"center",verticalAlign:"top",y:30,floating:!0},credits:{enabled:!1},series:angular.copy(scope.model)})},!0)}}}]),angular.module("ndrApp").directive("lineChartPatientHba1c",[function(){return{restrict:"A",template:'<div class="chart-container"></div>',scope:{model:"=",type:"="},link:function(scope,element){var chart=jQuery(".chart-container",element).highcharts({chart:{type:"basic"===scope.type?"spline":"area",height:180,marginTop:20,marginBottom:30,marginLeft:35,marginRight:5,spacingLeft:30,style:{color:"white"}},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%Y"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#eee",labels:{style:{color:"white",fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{align:"right",style:{color:"white",fontSize:"10px"}}},tooltip:{formatter:function(){var time=Highcharts.dateFormat("%Y",new Date(this.x));return time+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{marker:{lineWidth:1,radius:2,lineColor:null}},spline:{},area:{fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(255,255,255,0.6)"],[.7,"rgba(255,255,255,0.2)"],[1,"rgba(255,255,255,0)"]]}}},legend:{enabled:!1},credits:{enabled:!1},series:[{color:"white",name:"V√§rde",data:[{x:1,y:10},{x:3,y:5}]}]});scope.$watch("model",function(model){chart.highcharts().series[0].setData(model)},!0)}}}]),angular.module("ndrApp").directive("lineChartPatientBp",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element){scope.$watch("model",function(){jQuery(".chart-container",element).highcharts({chart:{type:"area",height:180,marginTop:20,marginBottom:30,marginLeft:25,marginRight:5,spacingLeft:0,style:{color:"#666"}},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%y, %b"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#eee",labels:{style:{color:"#666",fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{x:-5,align:"right",style:{color:"#666",fontSize:"10px"}}},tooltip:{formatter:function(){var time=Highcharts.dateFormat("%Y",new Date(this.x));return time+": <b>"+this.y+"</b>"}},plotOptions:{series:{marker:{fillColor:"#FFFFFF",lineWidth:1,lineColor:null}}},legend:{enabled:!1},credits:{enabled:!1},series:scope.model})},!0)}}}]),angular.module("ndrApp").directive("lineChartPatientCholesterol",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"=",title:"="},link:function(scope,element){scope.$watch("model",function(model){jQuery(".chart-container",element).highcharts({chart:{type:"area",height:180,marginTop:40,marginBottom:30,marginLeft:20,marginRight:5,spacingLeft:0,style:{color:"#666"}},title:{enabled:!1,text:"",style:{color:"#666",fontSize:10}},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%Y"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#666",labels:{style:{color:"#666",fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{x:-5,align:"right",style:{color:"#666",fontSize:"10px"}}},tooltip:{formatter:function(){var time=Highcharts.dateFormat("%Y",new Date(this.x));return time+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{marker:{lineWidth:1,radius:2,lineColor:null}},area:{fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]}}},legend:{margin:0,x:-10,y:-15,align:"left",verticalAlign:"top",enabled:!0},credits:{enabled:!1},series:scope.model})},!0)}}}]),angular.module("ndrApp").directive("lineChartPrint",[function(){return{restrict:"A",template:'<div class="chart-container"></div>',scope:{model:"=",type:"="},link:function(scope,element){var chart=jQuery(".chart-container",element).highcharts({chart:{type:"spline",height:180,marginTop:20,marginBottom:30,marginLeft:35,marginRight:5,spacingLeft:30,style:{color:"black"}},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%Y"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#eee",labels:{style:{color:"black",fontSize:"12px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#666",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{align:"right",style:{color:"white",fontSize:"10px"}}},tooltip:{formatter:function(){var time=Highcharts.dateFormat("%Y",new Date(this.x));return time+": <b>"+this.y+"</b>"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{marker:{lineWidth:1,radius:2,lineColor:null}},spline:{},area:{fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(255,255,255,0.6)"],[.7,"rgba(255,255,255,0.2)"],[1,"rgba(255,255,255,0)"]]}}},legend:{enabled:!1},credits:{enabled:!1},series:[{color:"black",name:"V√§rde",data:[{x:1,y:10},{x:3,y:5}]}]});scope.$watch("model",function(model){chart.highcharts().series[0].setData(model)},!0)}}}]),angular.module("ndrApp").directive("lineChartCombinedPrint",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element){scope.$watch("model",function(){jQuery(".chart-container",element).highcharts({chart:{type:"spline",height:180,marginTop:20,marginBottom:30,marginLeft:25,marginRight:5,spacingLeft:0,style:{color:"#666"}},title:{text:""},xAxis:{type:"datetime",dateTimeLabelFormats:{year:"%y, %b"},lineWidth:0,gridLineWidth:.5,minorGridLineWidth:0,lineColor:"#eee",labels:{style:{color:"#666",fontSize:"10px"}},minorTickLength:0,tickLength:0},yAxis:{gridLineWidth:.5,gridLineColor:"#eee",lineWidth:0,minorGridLineWidth:0,title:{text:"",align:"high"},labels:{x:-5,align:"right",style:{color:"#666",fontSize:"10px"}}},tooltip:{formatter:function(){var time=Highcharts.dateFormat("%Y",new Date(this.x));return time+": <b>"+this.y+"</b>"}},plotOptions:{series:{marker:{fillColor:"#000",lineWidth:2,lineColor:null}}},legend:{enabled:!0},credits:{enabled:!1},series:scope.model})},!0)}}}]),angular.module("ndrApp").directive("gaugeChart",[function(){return{restrict:"A",template:"<div class='chart-container'></div>",scope:{model:"="},link:function(scope,element){scope.$watch("model",function(model){if(model){var gaugeOptions={chart:{type:"solidgauge"},title:null,pane:{center:["50%","35%"],size:"100%",startAngle:-90,endAngle:90,background:{backgroundColor:Highcharts.theme&&Highcharts.theme.background2||"#EEE",innerRadius:"60%",outerRadius:"100%",shape:"arc"}},tooltip:{enabled:!1},yAxis:{stops:[[1,"#278470"]],lineWidth:0,minorTickInterval:null,tickPixelInterval:400,tickWidth:0,title:{y:-70},labels:{y:16}},plotOptions:{solidgauge:{dataLabels:{y:5,borderWidth:0,useHTML:!0}}}};$(".chart-container",element).highcharts(Highcharts.merge(gaugeOptions,{yAxis:{min:0,max:200,title:{enabled:!1,text:"Speed"},labels:{enabled:!1}},credits:{enabled:!1},series:[{name:"Speed",data:[150],dataLabels:{format:'<div style="text-align:center"><span style="font-size:16px;color:'+(Highcharts.theme&&Highcharts.theme.contrastTextColor||"black")+'">'+scope.model.label+'</span><br/><span style="font-size:12px;color:silver"></span></div>'},tooltip:{valueSuffix:" km/h"}}]}))}},!0)}}}]),angular.module("ndrApp").directive("list",[function(){function link(){}return{restrict:"A",templateUrl:function(){return"src/components/List/ListTemplate.html"},link:link,scope:{model:"="}}}]),angular.module("ndrApp").directive("autocomplete",["$state",function($state){return{controller:function($scope,$element){$scope.config={options:$scope.model.options,items:[$scope.model.selected],optgroupField:"type",valueField:"id",labelField:"name",searchField:"name",sortField:"name",delimiter:"|",placeholder:"Landsting, sjukhus eller v√•rdcentral",maxItems:1,lockOptgroupOrder:!0,optgroups:[{value:"sweden",label:"Riket"},{value:"county",label:"Landsting"},{value:"unit",label:"V√•rdenheter"}],render:{optgroup_header:function(data,escape){return'<div class="optgroup-header">'+escape(data.label)+"</div>"}},onChange:function(v){var type=v.split("_")[0],id=v.split("_")[1];"county"===type&&$state.go("main.profiles.county",{id:id}),"unit"===type&&$state.go("main.profiles.unit",{id:id})}},$element.selectize($scope.config)},restrict:"A",scope:{model:"="}}}]),angular.module("ndrApp").directive("keyIndicators",["$q","dataService",function($q,dataService){function link(scope){function getSelectedKeyIndicator(){var queryGeo,selectedIndicator=scope.model.selectedKeyIndicator,promises=[],queryCountry=dataService.queryFactory({indicatorID:selectedIndicator,level:0,interval:"y",fromYear:2010,toYear:2014,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType});queryGeo=dataService.queryFactory("unit"===scope.geoType?{unitID:id,level:2,indicatorID:selectedIndicator,interval:"y",fromYear:2010,toYear:2014,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType}:{countyCode:id,indicatorID:selectedIndicator,interval:"y",fromYear:2010,toYear:2014,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType}),promises.push(dataService.getStats(queryCountry)),promises.push(dataService.getStats(queryGeo)),$q.all(promises).then(function(data){var seriesCountry=[],seriesGeo=[];_.each(data[0].statSet[0].intervalSet,function(obj){seriesCountry.push({color:"#999",x:new Date(obj.interval),y:obj.stat.r,cRep:obj.stat.cRepInd})}),_.each(data[1].statSet[0].intervalSet,function(obj){seriesGeo.push({color:"#74BAD8",x:new Date(obj.interval),y:obj.stat.r,cRep:obj.stat.cRepInd})}),scope.data.keyIndicator=[{name:scope.geo?scope.geo.name:"Enhet",lineWidth:3,color:"#74BAD8",data:seriesGeo},{name:"Riket",color:"#ccc",data:seriesCountry}]})}function getKeyIndicators(){var toInclude=[201,221,207,222,209,214,211,203,223,216,202,219],promises=[],query=dataService.queryFactory({countyCode:id,ID:toInclude,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType});"unit"===scope.geoType&&(query=dataService.queryFactory({unitID:id,level:2,ID:toInclude,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType})),promises.push(dataService.getStats(query)),query=dataService.queryFactory({level:0,ID:toInclude,sex:scope.model.sex,unitType:scope.model.unitType,diabetesType:scope.model.diabetesType}),promises.push(dataService.getStats(query)),$q.all(promises).then(function(data){var geoData=data[0].indicatorSet,countryData=data[1].indicatorSet,keyIndicators=[];_.each(geoData,function(obj,key){var o={riket:countryData[key].statSet[0].stat.r,geo:obj.statSet[0].stat.r,status:"equal",name:obj.indicator.name,id:obj.indicator.id,lKonf:countryData[key].statSet[0].stat.lKonf,uKonf:countryData[key].statSet[0].stat.uKonf};(!obj.asc&&o.geo<o.lKonf||obj.asc&&o.geo>o.uKonf)&&(o.status="better"),(!obj.asc&&o.geo>o.lKonf||obj.asc&&o.geo<o.uKonf)&&(o.status="worse"),keyIndicators.push(o)}),scope.data.keyIndicators=keyIndicators})}if(scope.id){var id=scope.id;scope.model={id:id,geo:scope.geo,selectedKeyIndicator:201,sex:0,unitType:0,diabetesType:0},scope.data={keyIndicator:void 0,keyIndicators:void 0},scope.$watch("model",function(newValue,oldValue){getSelectedKeyIndicator(),(newValue.sex===oldValue.sex||newValue.diabetesType===oldValue.diabetesType)&&getKeyIndicators()},!0)}}return{restrict:"A",templateUrl:"src/components/KeyIndicators/KeyIndicators.html",link:link,scope:{id:"=",geo:"=",geoType:"=",light:"="}}}]),angular.module("ndrApp").directive("ndrQuestion",[function(){return{restrict:"E",template:['<div class="row Report-formGroup" ><div class="col-md-5 Report-formGroup-form">','<label>{{ question.question }}</label><i class="fa fa-question-circle helpNote" ng-show="question.helpNote != null" tooltip="{{question.helpNote}}"></i>','<ndr-Question-List ng-if="question.domain.isEnumerated" question="question"></ndr-Question-List>','<ndr-Question-Numeric ng-if="question.domain.domainID == 101" question="question"></ndr-Question-Numeric>','<ndr-Question-Decimal1 ng-if="question.domain.domainID == 102" question="question"></ndr-Question-Decimal1>','<ndr-Question-Decimal2 ng-if="question.domain.domainID == 103" question="question"></ndr-Question-Decimal2>','<ndr-Question-Date ng-if="question.domain.domainID == 105" question="question"></ndr-Question-Date>',"</div></div>"].join(""),require:"^form",link:function(){},replace:!0,scope:{question:"="}}}]),angular.module("ndrApp").directive("ndrQuestionList",[function(){return{restrict:"E",template:'<select id="{{ question.columnName }}" name="{{ question.columnName }}" placeholder="{{question.question}}" ng-model="question.value" class="form-control"><option value="">-- v√§lj --</option><option ng-repeat="domainvalue in question.domain.domainValues" value="{{domainvalue.code}}">{{domainvalue.text}}</option></select>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form},replace:!0,scope:{question:"="}}}]),angular.module("ndrApp").directive("ndrQuestionNumeric",[function(){return{restrict:"E",template:'<div ng-class="getErrorClass(form.{{ question.columnName}}.$invalid && !form.{{ question.columnName}}.$pristine)"><input name="{{question.columnName}}" type="number" min="{{question.minValue || 0}}" max="{{question.maxValue || 1000}}" class="form-control" placeholder="{{question.question}}" ng-model="question.value" decimals="0" ><p class="Report-formItemHelp help-block" ng-show="form.{{ question.columnName}}.$error.min || form.{{ question.columnName}}.$error.max"">{{ question.question}} kan anta ett v√§rde mellan {{question.minValue}} och {{question.maxValue}}.</p></div>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.getErrorClass=function(hasError){return hasError?"has-error":"has-no-error"}},replace:!0,scope:{question:"="}}}]),angular.module("ndrApp").directive("ndrQuestionDecimal1",[function(){return{restrict:"E",template:'<div ng-class="getErrorClass(form.{{ question.columnName}}.$invalid && !form.{{ question.columnName}}.$pristine)"><input name="{{question.columnName}}" type="number" min="{{question.minValue || 0}}" max="{{question.maxValue || 1000}}" class="form-control has-error" placeholder="{{question.question}}" ng-model="question.value" decimals="1" ><p class="Report-formItemHelp help-block" ng-show="form.{{ question.columnName}}.$error.min || form.{{ question.columnName}}.$error.max"">{{ question.question}} kan anta ett v√§rde mellan {{question.minValue}} och {{question.maxValue}}.</p></div>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.getErrorClass=function(hasError){return hasError?"has-error":"has-no-error"}},replace:!0,scope:{question:"=",value:"="}}}]),angular.module("ndrApp").directive("ndrQuestionDecimal2",[function(){return{restrict:"E",template:'<div ng-class="getErrorClass(form.{{ question.columnName}}.$invalid && !form.{{ question.columnName}}.$pristine)"><input name="{{question.columnName}}" type="number" min="{{question.minValue || 0}}" max="{{question.maxValue || 1000}}" class="form-control has-error" placeholder="{{question.question}}" ng-model="question.value" decimals="2" ><p class="Report-formItemHelp help-block" ng-show="form.{{ question.columnName}}.$error.min || form.{{ question.columnName}}.$error.max"">{{ question.question}} kan anta ett v√§rde mellan {{question.minValue}} och {{question.maxValue}}.</p></div>',require:"^form",link:function(scope,iElement,iAttrs,form){scope.form=form,scope.getErrorClass=function(hasError){return hasError?"has-error":"has-no-error"}},replace:!0,scope:{question:"=",value:"="}}}]),angular.module("ndrApp").directive("replaceComma",function(){return{restrict:"A",link:function(scope,element){element.on("keydown",function(e){188===e.keyCode&&(this.value+=".",e.preventDefault())})}}}).directive("asNumber",["$locale",function($locale){return{restrict:"A",require:"?ngModel",compile:function(tElement){if("INPUT"!==tElement[0].nodeName)throw"Error. asNumber directive must be used inside an <input> element.";return tElement.attr("pattern","[0-9]*"),
function(scope,element,attrs,ngModelCtrl){if(ngModelCtrl){var step,newValue,maxAttr=attrs.hasOwnProperty("max")&&""!==attrs.max?parseInt(attrs.max,10):!1,minAttr=attrs.hasOwnProperty("min")&&""!==attrs.min?parseInt(attrs.min,10):!1,stepAttr=attrs.hasOwnProperty("step")&&""!==attrs.step?parseInt(attrs.step,10):1;element.on("keydown",function(event){(38===event.keyCode||40===event.keyCode)&&(event.preventDefault(),step=event.shiftKey?10*stepAttr:stepAttr,40===event.keyCode&&(step*=-1),newValue=isNaN(ngModelCtrl.$modelValue)?step:ngModelCtrl.$modelValue+step,maxAttr!==!1&&newValue>maxAttr?newValue=maxAttr:minAttr!==!1&&minAttr>newValue&&(newValue=minAttr),newValue=String(newValue),newValue=","===$locale.NUMBER_FORMATS.DECIMAL_SEP?newValue.replace(/\.(\d*)$/,",$1"):newValue.replace(/,(\d*)$/,".$1"),ngModelCtrl.$setViewValue(newValue),ngModelCtrl.$render(),element.select())}),ngModelCtrl.$parsers.unshift(function(value){var out;return"string"!=typeof value||""===value?null:(value=value.replace(/,(\d*)$/,".$1"),out=parseFloat(value),isNaN(out)?void 0:out)}),ngModelCtrl.$formatters.unshift(function(value){return"string"!=typeof value?value:isNaN(parseFloat(value))?"":","===$locale.NUMBER_FORMATS.DECIMAL_SEP?value.replace(/\.(\d*)$/,",$1"):value.replace(/,(\d*)$/,".$1")}),ngModelCtrl.$validators.number=function(modelValue){return void 0===modelValue||null===modelValue||""===modelValue?!0:isNaN(modelValue)?!1:!0},ngModelCtrl.$validators.range=function(modelValue){return maxAttr&&modelValue>maxAttr||minAttr&&minAttr>modelValue?!1:!0}}}}}}]),angular.module("ndrApp").controller("HeaderController",["$scope","accountService",function($scope,accountService){$scope.accountService=accountService,$scope.accountModel=accountService.accountModel}]),angular.module("ndrApp").controller("NavController",function(){$(".dropdown-toggle").dropdownHover({})}),angular.module("ndrApp").controller("CountyController",["$scope","$stateParams","dataService","$q","$state",function($scope,$stateParams,dataService,$q,$state){var id=parseFloat($stateParams.id),autocompleteSelected="county_"+id;$scope.model={county:_.findWhere(dataService.data.counties,{code:id}),geo:_.findWhere(dataService.data.counties,{code:id}),id:id,data:{},autocompleteModel:{selected:autocompleteSelected,options:dataService.data.preparedGeoList}},$scope.gotoUnit=function(){$state.go("main.profiles.unit",{id:$scope.selectedUnit})},dataService.getOne("county",id).then(function(data){$scope.model.county=data,$scope.model.data.no=_.countBy($scope.model.county.units,"typeID"),$scope.model.data.noUnits=$scope.model.county.units.length});var query=dataService.queryFactory({fromYear:2013,toYear:2014,indicatorID:101});dataService.getStats(query).then(function(data){var series=[];_.each(data.statSet,function(obj){var o={name:obj.unit.name,color:obj.unit.levelID!=id?"#D4D4D4":"#FFCC01",y:obj.stat.r,cRep:obj.stat.cRep};series.push(o)}),$scope.model.data.hba1c=series});var query=dataService.queryFactory({countyCode:id,interval:"y",fromYear:2e3,toYear:2014,indicatorID:101});dataService.getStats(query).then(function(data){var series=[];_.each(data.statSet[0].intervalSet,function(obj){var o={x:new Date(obj.interval),y:obj.stat.r,cRep:obj.stat.cRep};series.push(o)}),$scope.model.data.noPatients=_.last(series).cRep,$scope.model.data.trendhba1c=series})}]),angular.module("ndrApp").controller("UnitController",["$scope","$stateParams","dataService","$q","$state",function($scope,$stateParams,dataService,$q,$state){var id=parseFloat($stateParams.id),autocompleteSelected="unit_"+id;$scope.model={unit:_.findWhere(dataService.data.units,{unitID:id}),geo:_.findWhere(dataService.data.units,{unitID:id}),id:id,data:{},autocompleteModel:{selected:autocompleteSelected,options:dataService.data.preparedGeoList}},dataService.getOne("unit",id).then(function(data){function initialize(){var mapOptions={center:{lat:$scope.model.unit.lat,lng:$scope.model.unit.lng},zoom:13},map=new google.maps.Map(document.getElementById("Google-Map"),mapOptions),sameCountyUnits=_.filter(dataService.data.units,function(d){return d.countyCode===$scope.model.unit.countyCode});_.each(sameCountyUnits,function(obj){var latLong=new google.maps.LatLng(obj.lat,obj.lng),contentString="<h5>"+obj.name+"</h5>",infowindow=new google.maps.InfoWindow({content:contentString});if($scope.model.unit.unitID===obj.unitID)var marker=new google.maps.Marker({position:latLong,title:obj.name});else var marker=new google.maps.Marker({position:latLong,title:obj.name,icon:{path:google.maps.SymbolPath.CIRCLE,fillOpacity:.8,fillColor:"#fff",strokeOpacity:1,strokeColor:"#E14274",strokeWeight:4,scale:5}});google.maps.event.addListener(marker,"mouseover",function(){infowindow.open(map,this)}),google.maps.event.addListener(marker,"mouseout",function(){infowindow.close()}),google.maps.event.addListener(marker,"click",function(){$state.go("main.profiles.unit",{id:obj.unitID})}),marker.setMap(map)})}$scope.model.unit=data,initialize()});var query=dataService.queryFactory({unitID:id,level:2,interval:"y",fromYear:2e3,toYear:2014,indicatorID:101});dataService.getStats(query).then(function(data){var series=[];_.each(data.statSet[0].intervalSet,function(obj){var o={x:new Date(obj.interval),y:obj.stat.r,cRep:obj.stat.cRep};series.push(o)}),$scope.model.data.noPatients=_.last(series).cRep,$scope.model.data.trendhba1c=series})}]),angular.module("ndrApp").controller("CurrentUserController",["$scope","$http","accountService","dataService","APIconfigService",function($scope,$http,accountService,dataService,APIconfigService){$scope.accountModel=accountService.accountModel,$scope.accountHelpers=accountService.helpers,$scope.filteredUnits=[],$scope.unitSearchString="",$scope.user=accountService.accountModel.user,$scope.$on("newUser",function(){$scope.user=accountService.accountModel.user}),dataService.getList("units").then(function(data){var units=data.plain();$scope.filteredUnits=[],$scope.$watch("unitSearchString",function(unitSearchString){$scope.resetAccountErrors(),unitSearchString=unitSearchString.toLowerCase(),$scope.filteredUnits=""!=unitSearchString?_.take(_.filter(units,function(d){return d.name.toLowerCase().indexOf(unitSearchString)>-1}),20):[]})}),$scope.setRoles=function(){angular.forEach($scope.user.accounts,function(account,accountkey){var rolestring;angular.forEach(account.roles,function(role,rolekey){rolestring||(rolestring=""),rolestring+=", "+account.roles[rolekey].name}),$scope.user.accounts[accountkey].rolestring=rolestring})},$scope.resetAccountErrors=function(){$scope.newAccountError=[],$scope.newAccountSuccess=null},$scope.updateUser=function(){$scope.updateUserError=[],$scope.updateUserSuccess=!1;var httpConfig={method:"PUT",data:$scope.user,url:APIconfigService.baseURL+"User/"+$scope.user.userID+"?APIKey="+APIconfigService.APIKey};$http(httpConfig).success(function(data){$scope.accountModel.activeAccount?accountService.login($scope.accountModel.activeAccount.accountID):($scope.user=data,$scope.setRoles()),$scope.updateUserSuccess=!0,setTimeout(function(){$scope.updateUserSuccess=null,$scope.$apply()},3e3)}).error(function(data){if(data.ModelState)for(var prop in data.ModelState)data.ModelState.hasOwnProperty(prop)&&$scope.updateUserError.push(data.ModelState[prop][0]);else $scope.updateUserError.push("Ett ok√§nt fel intr√§ffade. Var god f√∂rs√∂k igen senare.")})},$scope.applyUnit=function(unitID){var accountModel,httpConfig,reActivateAccount=null;if($scope.resetAccountErrors(),angular.forEach($scope.user.accounts,function(account){account.unit.unitID===unitID&&1===account.status.id?$scope.newAccountError.push("Du har redan ett konto p√• denna enhet."):account.unit.unitID!==unitID||2!==account.status.id&&3!==account.status.id?account.unit.unitID===unitID&&9===account.status.id&&(reActivateAccount=account):$scope.newAccountError.push("En kontobeg√§ran √§r redan under behandling f√∂r dig p√• denna enhet.")}),!$scope.newAccountError.length){if(null!=reActivateAccount)httpConfig={method:"PUT",data:{statusID:3},url:APIconfigService.baseURL+"Account/"+reActivateAccount.accountID+"?APIKey="+APIconfigService.APIKey};else{accountModel={unitID:unitID,userID:$scope.user.userID,statusID:3,roleIDs:[]};var httpConfig={method:"POST",data:accountModel,url:APIconfigService.baseURL+"Account/?APIKey="+APIconfigService.APIKey}}$http(httpConfig).success(function(data){$scope.user=data,$scope.setRoles(),$scope.newAccountSuccess=!0}).error(function(data){if(data.ModelState)for(var prop in data.ModelState)data.ModelState.hasOwnProperty(prop)&&$scope.newAccountError.push(data.ModelState[prop][0]);else $scope.newAccountError.push("Ett ok√§nt fel intr√§ffade. Var god f√∂rs√∂k igen senare.")})}}}]),angular.module("ndrApp").controller("PatientsController",["$scope","$state","$stateParams","$log","$filter","dataService","$timeout",function($scope,$state,$stateParams,$log,$filter,dataService,$timeout){function paged(valLists,pageSize){var valLength,retVal;if(valLists){valLength=valLists.length,retVal=[];for(var i=0;valLength>i;i++)i%pageSize===0?retVal[Math.floor(i/pageSize)]=[valLists[i]]:retVal[Math.floor(i/pageSize)].push(valLists[i]);return retVal}}function loadSubjects(){if(!ready)return!1;if(!isLoadingSubjects){isLoadingSubjects=!0;var query,selectedFilters={};_.each($scope.selectedFilters,function(filter,filterKey){$scope.isDisplayed(filterKey)&&(selectedFilters[filterKey]=filter)}),query={DateFrom:moment($scope.datePickers.from.date).format("YYYY-MM-DD"),DateTo:moment($scope.datePickers.to.date).format("YYYY-MM-DD"),f:_.keys(selectedFilters),filters:selectedFilters,limit:15,offset:100,count:"given-by-server",matching:"given-by-server"},dataService.getSubjects(query,function(data){allSubjects=data,$scope.model.allSubjectsLength=allSubjects.length,isLoadingSubjects=!1,debouncedFilter()})}}function filter(){if($scope.model.allSubjectsLength){$log.debug("Changed Filters");var selectedFilters={},subjects=allSubjects;_.each($scope.selectedFilters,function(filter,filterKey){$scope.isDisplayed(filterKey)&&(selectedFilters[filterKey]=filter)}),dataService.setSearchFilters("values",selectedFilters),_.each(selectedFilters,function(filter,prop){_.isEmpty(filter)||(subjects=_.filter(subjects,function(subject){var value,propValue=subject[prop];return filter.undef?"undefined"==typeof subject[prop]:"number"==typeof filter.min&&"number"==typeof filter.max?"number"==typeof propValue&&propValue>=filter.min&&propValue<=filter.max:filter.from&&(_.isDate(filter.from.date)||_.isDate(filter.to.date))?(value=new Date(propValue),_.isDate(value)&&value>=new Date(filter.from.date)&&value<=new Date(filter.to.date)):_.isNull(filter.value)||_.isUndefined(filter.value)?!0:(value=parseInt(filter.value,10),propValue===value)}))}),$scope.model.filteredSubjects=subjects,$scope.model.filteredSubjectsLength=subjects.length}}$log.debug("PatientsController: Init");var filterDisplayIndex,filterSettings={exclude:["gfr","socialNumber","pumpOngoingSerial","pumpNewSerial","contactDate"],required:["d","hba1c"]},isLoadingSubjects=!1;$stateParams.restoreFilters||dataService.setSearchFilters();var allSubjects,dateOffset=31536e6;$scope.format="yyyy-MM-dd",$scope.datePickers={from:{date:$filter("date")(new Date(new Date-dateOffset),$scope.format),opened:!1},to:{date:$filter("date")(new Date,$scope.format),opened:!1}},$scope.today=function(){$scope.dt=new Date},$scope.today(),$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.open=function($event,picker){$event.preventDefault(),$event.stopPropagation(),$scope.datePickers[picker].opened=!0},$scope.openPicker=function($event,columnName,direction){$event.preventDefault(),$event.stopPropagation(),$scope.selectedFilters[columnName][direction].opened=!0},$scope.lookupName=function(filter,value){return filter.domain.isEnumerated?_.result(_.find(filter.domain.domainValues,{code:value}),"text",""):value},$scope.$watchCollection("model.filteredSubjects",function(){$scope.pageSize=15,$scope.allItems=$scope.model.filteredSubjects,$scope.reverse=!1,$scope.filteredList=$scope.allItems,$scope.currentPage=0,$scope.Header=["","",""],$scope.sort("name")}),$scope.pagination=function(){$scope.ItemsByPage=paged($scope.filteredList,$scope.pageSize)},$scope.setPage=function(){$scope.currentPage=this.n},$scope.firstPage=function(){$scope.currentPage=0},$scope.lastPage=function(){$scope.currentPage=$scope.ItemsByPage.length-1},$scope.range=function(input,total){var ret=[];total||(total=input,input=0);for(var i=input;total>i;i++)0!==i&&i!==total-1&&ret.push(i);return ret},$scope.resetAll=function(){$scope.filteredList=$scope.allItems},$scope.sort=function(sortBy){var iconName;$scope.resetAll(),$scope.columnToOrder=sortBy,$scope.filteredList=$filter("orderBy")($scope.filteredList,$scope.columnToOrder,$scope.reverse),iconName=$scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down","EmpId"===sortBy?$scope.Header[0]=iconName:"name"===sortBy?$scope.Header[1]=iconName:$scope.Header[2]=iconName,$scope.reverse=!$scope.reverse,$scope.pagination()},$scope.toggleDetail=function(d){},$scope.model={allSubjects:void 0,filteredSubjects:void 0};var ready=!1,delayStartTime=200;Modernizr.svg||(delayStartTime=6e3),$timeout(function(){$scope.$watch("datePickers.to.date",loadSubjects),$scope.$watch("datePickers.from.date",loadSubjects),loadSubjects()},delayStartTime),$scope.filters=[],dataService.getContactAttributes(filterSettings).then(function(filters){var selected,preselected=dataService.getSearchFilters();_.each(filters,function(filter){"diabetesType"===filter.columnName&&(filter.columnName="d"),"sex"===filter.columnName&&(filter.columnName="s"),"age"===filter.columnName&&(filter.min=0,filter.max=120,filter.maxValue=120,filter.range=[0,120]),"smokingEndYear"===filter.columnName&&(filter.min=1900,filter.max=2020,filter.range=[1900,2020]),"yearOfOnset"===filter.columnName&&(filter.min=1900,filter.max=2020,filter.range=[1900,2020]),filter.isChosen=$scope.isRequired(filter.columnName)||-1!==_.keys(preselected.values).indexOf(filter.columnName),$scope.selectedFilters[filter.columnName]={},-1!==_.keys(preselected.values).indexOf(filter.columnName)?$scope.selectedFilters[filter.columnName]=preselected.values[filter.columnName]:(_.isNumber(filter.maxValue)&&($scope.selectedFilters[filter.columnName].min=filter.minValue||0,$scope.selectedFilters[filter.columnName].max=filter.maxValue),"Date"===filter.domain.name&&($scope.selectedFilters[filter.columnName].from={date:$filter("date")(new Date(new Date-dateOffset),$scope.format),opened:!1},$scope.selectedFilters[filter.columnName].to={date:$filter("date")(new Date,$scope.format),opened:!1}))}),selected=_.remove(filters,"isChosen"),selected=_.map(selected,function(sel,selIndex){var preselectedFilter=_.find(preselected.filters,{columnName:sel.columnName});return sel.displayOrder=preselectedFilter?preselectedFilter.displayOrder:selIndex,sel}),filterDisplayIndex=selected.length,filters=_.sortBy(selected.concat(filters),"sequence"),$scope.filters=filters,ready=!0,loadSubjects()}),$scope.chosenFilter=null,$scope.$watch("chosenFilter",function(name){var filter,alreadySelected;name&&(alreadySelected=$scope.isDisplayed(name),alreadySelected||(filter=_.find($scope.filters,{columnName:name}),filter&&(filter.isChosen=!0,filter.displayOrder=filterDisplayIndex,filterDisplayIndex+=1)),$scope.chosenFilter=null,$scope.highlightedFilter=name,$timeout(function(){$scope.highlightedFilter=null},1e3),dataService.setSearchFilters("filters",_.filter($scope.filters,{isChosen:!0})),alreadySelected||loadSubjects())}),$scope.isDisplayed=function(name){return $scope.isRequired(name)||_.find($scope.filters,{columnName:name}).isChosen},$scope.isRequired=function(name){return-1!==_.indexOf(filterSettings.required,name)},$scope.removeChosenFilter=function(name){_.find($scope.filters,{columnName:name}).isChosen=!1,filterDisplayIndex-=1,$scope.selectedFilters[name].range?($scope.selectedFilters[name].min=$scope.selectedFilters[name].range[0],$scope.selectedFilters[name].max=$scope.selectedFilters[name].range[1]):$scope.selectedFilters[name]={}},$scope.selectedFilters={};var debouncedFilter=_.debounce(function(){$scope.$apply(function(){filter()})},400);$scope.$watch("selectedFilters",function(){debouncedFilter()},!0)}]),angular.module("ndrApp").controller("ResearchController",["$scope","$stateParams","dataService",function($scope,$stateParams,dataService){$scope.model={},dataService.getList("news").then(function(data){data.sort(function(a,b){return new Date(b.publishedFrom)-new Date(a.publishedFrom)}),data=_.filter(data,function(d){var catNames=_.pluck(d.categories,"name");return-1!=_.indexOf(catNames,"Forskning")}),data=data.splice(0,4),angular.forEach(data,function(item){item.link="#/nyheter/"+item.newsID,item.categoryNames=[],angular.forEach(item.categories,function(category){item.categoryNames.push(category.name)})}),$scope.model.listModelResearch={data:data}}),dataService.getList("researchproject").then(function(data){angular.forEach(data,function(item){item.link="#/forskning/"+item.id,item.title=item.name}),$scope.publications=data})}]),angular.module("ndrApp").controller("PublicationController",["$scope","$stateParams","dataService",function($scope,$stateParams,dataService){dataService.getOne("researchproject",$stateParams.id).then(function(data){var authors=[data.firstAuthor,data.otherAuthor,data.lastAuthor];$scope.publication=data,$scope.publication.authors=authors})}]),angular.module("ndrApp").controller("NewsController",["$scope","$stateParams","dataService",function($scope,$stateParams,dataService){dataService.getList("news").then(function(data){data.sort(function(a,b){return new Date(b.publishedFrom)-new Date(a.publishedFrom)}),angular.forEach(data,function(item){item.link="#/nyheter/"+item.newsID}),$scope.news=data})}]),angular.module("ndrApp").controller("NewsItemController",["$scope","$stateParams","dataService",function($scope,$stateParams,dataService){$scope.model={},dataService.getOne("news",$stateParams.id).then(function(data){$scope.article=data}),dataService.getList("news").then(function(data){data.sort(function(a,b){return new Date(b.publishedFrom)-new Date(a.publishedFrom)}),data=data.splice(0,3),angular.forEach(data,function(item){item.link="#/nyheter/"+item.newsID}),$scope.model.listModelNews={data:data}})}]),angular.module("ndrApp").controller("StatisticsController",["$scope","dataService",function($scope,dataService){$scope.model={autocompleteModel:{selected:void 0,options:dataService.data.preparedGeoList}}}]),angular.module("ndrApp").service("APIconfigService",[function(){this.baseURL="https://ndr.registercentrum.se/api/",this.APIKey="LkUtebH6B428KkPqAAsV"}]),angular.module("ndrApp").service("accountService",["$http","$state","$rootScope","APIconfigService",function($http,$state,$rootScope,APIconfigService){var self=this,isLoggingIn=!1;this.accountModel={user:null,activeAccount:null,tempAccount:null,serverError:""},this.helpers={pnrRegex:/\b(19\d{2}|20\d{2}|\d{2})(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])[-+]?\d{4}\b/},this.updateAccount=function(accountID){var activeAccount=_.find(this.accountModel.user.activeAccounts,{accountID:accountID});this.accountModel.activeAccount=activeAccount,this.accountModel.tempAccount=activeAccount,$state.go($state.current,{},{reload:!0})},this.login=function(accountID){var url=APIconfigService.baseURL+"me?APIKey="+APIconfigService.APIKey;return isLoggingIn=!0,$http.get(url).then(function(response){var loginId,user=response.data;self.accountModel.user=user,$rootScope.$broadcast("newUser"),loginId=accountID||user.defaultAccountID,user.activeAccounts=_.filter(user.accounts,function(account){return 1===account.status.id}),self.accountModel.activeAccount=user.activeAccounts[0],self.accountModel.tempAccount&&(self.accountModel.activeAccount=self.accountModel.tempAccount),isLoggingIn=!1})["catch"](function(data,status){self.accountModel.serverError=0===status||400===status||401===status?"Inget konto kunde hittas":"Ett ok√§nt fel intr√§ffade"})},this.logOut=function(){this.accountModel.user=null,this.accountModel.activeAccount=null,$state.go("main.home",{},{reload:!0})},this.bootstrap=function(){return self.login()}}]),angular.module("ndrApp").controller("AccountController",["$scope","$http","$stateParams","$state","accountService",function($scope,$http,$stateParams,$state,accountService){$scope.accountModel=accountService.accountModel,$scope.accountHelpers=accountService.helpers}]),angular.module("ndrApp").controller("AccountHomeController",["$scope","$q","$stateParams","$state","$log","$filter","dataService","$timeout","$http",function($scope,$q,$stateParams,$state,$log,$filter,dataService,$timeout,$http){var Account=$scope.accountModel;$scope.subject=void 0,$scope.socialnumber=void 0,$scope.model={},dataService.getAny("News","?isInternal=true").then(function(data){data.sort(function(a,b){return new Date(b.publishedFrom)-new Date(a.publishedFrom)}),data=data.splice(0,4),angular.forEach(data,function(item){item.categoryNames=[],angular.forEach(item.categories,function(category){item.categoryNames.push(category.name)})}),$scope.model.newsList=data}),$scope.gotoProfile=function(){$http({url:"https://ndr.registercentrum.se/api/Subject?AccountID="+Account.activeAccount.accountID+"&APIKey=LkUtebH6B428KkPqAAsV",method:"POST",data:{socialNumber:$scope.socialnumber}}).success(function(data){$state.go("main.account.patient",{patientID:data.subjectID})}).error(function(){})},$scope.gotoReport=function(){$http({url:"https://ndr.registercentrum.se/api/Subject?AccountID="+Account.activeAccount.accountID+"&APIKey=LkUtebH6B428KkPqAAsV",method:"POST",data:{socialNumber:$scope.socialnumber}}).success(function(data){$state.go("main.account.report",{patientID:data.subjectID})}).error(function(){})}}]),angular.module("ndrApp").controller("ModalInstanceCtrl",["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close($scope.selected.item)},$scope.cancel=function(){$("html, body").animate({scrollTop:0},500,function(){window.document.getElementById("socialnumber-input").select()}),$modalInstance.dismiss("cancel")}}]),angular.module("ndrApp").controller("ReportController",["$scope","$stateParams","$state","$modal","$filter","List","dataService",function($scope,$stateParams,$state,$modal,$filter,List,dataService){var account=$scope.accountModel;$scope.socialnumber="19121212-1212",$scope.subjectID=$stateParams.patientID,$scope.view=0,$scope.contactModel=null,$scope.contactToUpdate=null,$scope.subject=null,$scope.serverSaveErrors=[],$scope.method="POST",$scope.minYear=null,$scope.maxYear=(new Date).getFullYear(),$scope.optionalQuestions=[],$scope.getOptionalQuestions=function(){dataService.getOptionalQuestionsMeta(account.activeAccount.accountID,function(data){$scope.optionalQuestions=data})},$scope.$on("newUser",$scope.getOptionalQuestions),account.activeAccount&&$scope.getOptionalQuestions(),$scope.subjectID&&dataService.getSubjectById($scope.subjectID).then(function(subject){$scope.socialnumber=subject.socialNumber,$scope.getSubject(!0)}),$scope.getSubject=function(newSocialnumber){$scope.minYear=$scope.socialnumber.substring(0,4),$scope.lists=List.getLists(),$scope.serverSubjectError=null,$scope.serverSaveErrors=[],dataService.getSubjectBySocialNumber($scope.socialnumber).then(function(subject){$scope.subject=subject,newSocialnumber?$scope.contactModel=$scope.getNewContactModel():($scope.contactToUpdate=$scope.getContactFromContactDate($scope.subject.contacts,$scope.contactModel.contactDate),$scope.setContact($scope.contactToUpdate))})["catch"](function(data,status){$scope.subject=null,400===status?(window.alert("Ingen patient hittades"),$scope.serverSubjectError=data):$scope.serverSubjectError="Ett ok√§nt fel intr√§ffade"})},$scope.deleteContact=function(contactID){dataService.deleteContact(contactID).then(function(){$scope.subject.contacts=$scope.removeItemFromArray($scope.subject.contacts,contactID),$scope.contactModel=$scope.getNewContactModel()})},$scope.setContact=function(contactToUpdate){$scope.method=contactToUpdate?"PUT":"POST",$scope.lastContact=contactToUpdate?null:$scope.subject.contacts[0],$scope.contactModel=contactToUpdate?$scope.getUpdateModel():$scope.getNewContactModel(),$scope.showPumpProblem=$scope.contactModel.pumpProblemKeto||$scope.contactModel.pumpProblemHypo||$scope.contactModel.pumpProblemSkininfection||$scope.contactModel.pumpProblemSkinreaction,$scope.showPumpClosureReason=$scope.contactModel.pumpClosureReason>0,$scope.contactDateChanged()},$scope.getNewContactModel=function(){return $scope.contactForm.$setPristine(),$scope.getNewModel($scope.lastContact)},$scope.togglePumpProblem=function(){$scope.showPumpProblem=!$scope.showPumpProblem},$scope.togglePumpClosureReason=function(){$scope.showPumpClosureReason=!$scope.showPumpClosureReason},$scope.insulinMethodChanged=function(){2!==$scope.contactModel.insulinMethod&&($scope.contactModel.pumpNew=null)},$scope.calculateLDL=function(){var calculatedLDL=parseFloat(parseFloat($scope.contactModel.cholesterol-$scope.contactModel.hdl-.45*$scope.contactModel.triglyceride).toFixed(1));$scope.contactModel.ldl=calculatedLDL},$scope.tryCalculateBMI=function(){$scope.contactModel.bmi=$scope.contactModel.weight>0&&$scope.contactModel.height>0?parseFloat(($scope.contactModel.weight/Math.pow($scope.contactModel.height/100,2)).toFixed(1)):null},$scope.tryCalculateGFR=function(){if(null==$scope.contactModel.creatinine||null==$scope.contactModel.contactDate)return void($scope.contactModel.gfr=null);var femaleFactor=.742,contactDate=$scope.contactModel.contactDate,birthDate=new Date($scope.subject.socialNumber.substring(0,4),$scope.subject.socialNumber.substring(4,6)-1,$scope.subject.socialNumber.substring(6,8)),age=$scope.calculateAge(birthDate,contactDate),gfr=175*Math.pow($scope.contactModel.creatinine/88.4,-1.154)*Math.pow(age,-.203)*(2==$scope.subject.sex?femaleFactor:1);$scope.contactModel.gfr=parseFloat(gfr.toFixed(2))},$scope.calculateAge=function(birthDate,contactDate){var age,timeDiff=contactDate.valueOf()-birthDate.valueOf(),milliInDay=864e5,noOfDays=timeDiff/milliInDay,daysInYear=365.242;return age=noOfDays/daysInYear},$scope.today=function(){$scope.contactModel.contactDate=new Date},$scope.clear=function(){$scope.contactModel.contactDate=null},$scope.datePickers={contactDate:{opened:!1},fundusExaminationDate:{opened:!1},footExaminationDate:{opened:!1}},$scope.disabled=function(date){var d=new Date;return date>=d.setDate(d.getDate()+1)},$scope.toggleMin=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.toggleMin(),$scope.openPicker=function($event,dateField){$event.preventDefault(),$event.stopPropagation(),$scope.datePickers[dateField].opened=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["yyyy-MM-dd","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.contactDateChanged=function(){var valid=!0,m=$scope.contactModel,dateToCheck=$scope.getStringDate($scope.contactModel.contactDate),compare=function(thisDate,thatDate){return thisDate==thatDate?!1:!0};if(void 0==$scope.subject.contacts)valid=!0;else for(var i=0;i<$scope.subject.contacts.length;i++){var c=$scope.subject.contacts[i];if(null!=$scope.contactToUpdate?c.contactID!=m.contactID&&(valid=compare(c.contactDate.split("T")[0],dateToCheck)):$scope.subject.contacts[i].contactDate.split("T")[0]==dateToCheck&&(valid=compare(c.contactDate.split("T")[0],dateToCheck)),!valid)break}$scope.contactForm.contactDate.$setValidity("checkContactDate",valid),$scope.maxYear=valid?$scope.getStringDate($scope.contactModel.contactDate).substring(0,4):(new Date).getFullYear()},$scope.getStringDate=function(date){if("string"==typeof date)return date;if(void 0!==date&&null!==date&&date instanceof Date&&!isNaN(date.valueOf())){var yyyy=date.getFullYear().toString(),mm=(date.getMonth()+1).toString(),dd=date.getDate().toString();return yyyy+"-"+(mm[1]?mm:"0"+mm[0])+"-"+(dd[1]?dd:"0"+dd[0])}},$scope.pumpOngoingChanged=function(){$scope.contactModel.pumpOngoingSerial=null},$scope.pumpNewChanged=function(){$scope.contactModel.pumpNewSerial=null},$scope.setOptionalQuestionsValue=function(){angular.forEach($scope.optionalQuestions,function(q){q.value="",null!=$scope.contactToUpdate&&null!=$scope.contactToUpdate.optionals&&void 0!=$scope.contactToUpdate.optionals[q.columnName]&&(q.value=$scope.contactToUpdate.optionals[q.columnName])})},$scope.getUpdateModel=function(){return $scope.setOptionalQuestionsValue(),{contactID:$scope.contactToUpdate.contactID,socialNumber:$scope.subject.socialNumber,diabetesType:$scope.subject.diabetesType,yearOfOnset:$scope.subject.yearOfOnset,contactDate:$scope.contactToUpdate.contactDate.split("T")[0],hba1c:$scope.contactToUpdate.hba1c,treatment:$scope.contactToUpdate.treatment,insulinMethod:$scope.contactToUpdate.insulinMethod,pumpIndication:$scope.contactToUpdate.pumpIndication,pumpOngoing:$scope.contactToUpdate.pumpOngoing,pumpOngoingSerial:$scope.contactToUpdate.pumpOngoingSerial,pumpNew:$scope.contactToUpdate.pumpNew,pumpNewSerial:$scope.contactToUpdate.pumpNewSerial,pumpProblemKeto:$scope.contactToUpdate.pumpProblemKeto>0,pumpProblemHypo:$scope.contactToUpdate.pumpProblemHypo>0,pumpProblemSkininfection:$scope.contactToUpdate.pumpProblemSkininfection>0,pumpProblemSkinreaction:$scope.contactToUpdate.pumpProblemSkinreaction>0,pumpProblemPumperror:$scope.contactToUpdate.PumpProblemPumperror>0,pumpClosureReason:$scope.contactToUpdate.pumpClosureReason,height:$scope.contactToUpdate.height,weight:$scope.contactToUpdate.weight,waist:$scope.contactToUpdate.waist,bmi:$scope.contactToUpdate.bmi,bpSystolic:$scope.contactToUpdate.bpSystolic,bpDiastolic:$scope.contactToUpdate.bpDiastolic,antihypertensives:$scope.contactToUpdate.antihypertensives,lipidLoweringDrugs:$scope.contactToUpdate.lipidLoweringDrugs,aspirin:$scope.contactToUpdate.aspirin,waran:$scope.contactToUpdate.waran,macroscopicProteinuria:$scope.contactToUpdate.macroscopicProteinuria,microscopicProteinuria:$scope.contactToUpdate.microscopicProteinuria,creatinine:$scope.contactToUpdate.creatinine,gfr:$scope.contactToUpdate.gfr,cholesterol:$scope.contactToUpdate.cholesterol,triglyceride:$scope.contactToUpdate.triglyceride,hdl:$scope.contactToUpdate.hdl,ldl:$scope.contactToUpdate.ldl,ischemicHeartDisease:$scope.contactToUpdate.ischemicHeartDisease,cerebrovascularDisease:$scope.contactToUpdate.cerebrovascularDisease,fundusExaminationDate:null!=$scope.contactToUpdate.fundusExaminationDate?$scope.contactToUpdate.fundusExaminationDate.split("T")[0]:null,diabeticRetinopathy:$scope.contactToUpdate.diabeticRetinopathy,diagnosisWorseSeeingEye:$scope.contactToUpdate.diagnosisWorseSeeingEye,visualLoss:$scope.contactToUpdate.visualLoss,laserTreatment:$scope.contactToUpdate.laserTreatment,footExaminationDate:null!=$scope.contactToUpdate.footExaminationDate?$scope.contactToUpdate.footExaminationDate.split("T")[0]:null,footRiscCategory:$scope.contactToUpdate.footRiscCategory,diabeticRetinopathy:$scope.contactToUpdate.diabeticRetinopathy,smokingHabit:$scope.contactToUpdate.smokingHabit,smokingEndYear:$scope.contactToUpdate.smokingEndYear,physicalActivity:$scope.contactToUpdate.physicalActivity,hypoglycemiaSevere:$scope.contactToUpdate.hypoglycemiaSevere,optionals:null}},$scope.getNewModel=function(lastContact){return $scope.setOptionalQuestionsValue(),{contactID:null,socialNumber:null!=$scope.subject?$scope.subject.socialNumber:null,diabetesType:null!=$scope.subject?$scope.subject.diabetesType:null,yearOfOnset:null!=$scope.subject?$scope.subject.yearOfOnset:null,contactDate:null,hba1c:null,treatment:null!=lastContact?lastContact.treatment:null,insulinMethod:null!=lastContact?lastContact.insulinMethod:null,pumpIndication:null!=lastContact?lastContact.pumpIndication:null,pumpOngoing:null!=lastContact?null!=lastContact.pumpNew?lastContact.pumpNew:lastContact.pumpOngoing:null,pumpOngoingSerial:null!=lastContact?null!=lastContact.pumpNew?lastContact.pumpNewSerial:lastContact.pumpOngoingSerial:null,
pumpNew:null,pumpNewSerial:null,pumpProblemKeto:null,pumpProblemHypo:null,pumpProblemSkininfection:null,pumpProblemSkinreaction:null,pumpProblemPumperror:null,pumpClosureReason:null!=lastContact?lastContact.pumpClosureReason:null,height:null!=lastContact?lastContact.height:null,weight:null,waist:null,bmi:null,bpSystolic:null,bpDiastolic:null,antihypertensives:null!=lastContact?lastContact.antihypertensives:null,lipidLoweringDrugs:null!=lastContact?lastContact.lipidLoweringDrugs:null,aspirin:null!=lastContact?lastContact.aspirin:null,waran:null!=lastContact?lastContact.waran:null,macroscopicProteinuria:null!=lastContact?lastContact.macroscopicProteinuria:null,microscopicProteinuria:null!=lastContact?lastContact.microscopicProteinuria:null,creatinine:null,gfr:null,cholesterol:null,triglyceride:null,hdl:null,ldl:null,ischemicHeartDisease:null!=lastContact?lastContact.ischemicHeartDisease:null,cerebrovascularDisease:null!=lastContact?lastContact.cerebrovascularDisease:null,fundusExaminationDate:null!=lastContact&&null!=lastContact.fundusExaminationDate?lastContact.fundusExaminationDate.split("T")[0]:null,diabeticRetinopathy:null,diagnosisWorseSeeingEye:null!=lastContact?lastContact.diagnosisWorseSeeingEye:null,visualLoss:null!=lastContact?lastContact.visualLoss:null,laserTreatment:null!=lastContact?lastContact.laserTreatment:null,footExaminationDate:null!=lastContact&&null!=lastContact.footExaminationDate?lastContact.footExaminationDate.split("T")[0]:null,footRiscCategory:null,diabeticRetinopathy:null!=lastContact?lastContact.diabeticRetinopathy:null,smokingHabit:null!=lastContact?lastContact.smokingHabit:null,smokingEndYear:null,physicalActivity:null,hypoglycemiaSevere:null,optionals:null}},$scope.setDateValues=function(){$scope.contactModel.contactDate=$scope.getStringDate($scope.contactModel.contactDate),$scope.contactModel.fundusExaminationDate=$scope.getStringDate($scope.contactModel.fundusExaminationDate),$scope.contactModel.footExaminationDate=$scope.getStringDate($scope.contactModel.footExaminationDate)},$scope.saveContact=function(){$scope.serverSaveErrors=[],$scope.isSaving=!0,$scope.setDateValues(),$scope.contactModel.optionals=$scope.getOptionals(),dataService.saveContact($scope.contactModel).then(function(){$scope.getSubject(!1),$scope.isSaving=!1,$modal.open({templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",backdrop:!0,scope:$scope})})["catch"](function(data){if(null!=data.ModelState)for(var prop in data.ModelState)data.ModelState.hasOwnProperty(prop)&&$scope.serverSaveErrors.push(data.ModelState[prop][0]);else $scope.serverSaveErrors.push("Ett ok√§nt fel intr√§ffade. Var god f√∂rs√∂k igen senare.")})},$scope.removeItemFromArray=function(array,id){return $filter("filter")($scope.subject.contacts,function(d){return d.contactID!==id})},$scope.getContactFromContactDate=function(array,date){return $filter("filter")($scope.subject.contacts,function(d){return d.contactDate.split("T")[0]==date})[0]},$scope.macroChanged=function(){$scope.contactModel.microscopicProteinuria=1==$scope.contactModel.macroscopicProteinuria?1:null},$scope.retinopathyChanged=function(){1!=$scope.contactModel.diabeticRetinopathy&&null!=$scope.contactModel.diagnosisWorseSeeingEye&&($scope.contactModel.diagnosisWorseSeeingEye=null)},$scope.getOptionals=function(){var optionals=null;return 0==$scope.optionalQuestions.length?null:(angular.forEach($scope.optionalQuestions,function(q){null!=q.value&&""!=q.value&&(null==optionals&&(optionals={}),optionals[q.columnName]=q.value)}),optionals)}}]),angular.module("ndrApp").service("List",["$http","APIconfigService",function($http,APIconfigService){this.lists=null;var self=this;$http.get(APIconfigService.baseURL+"ContactAttribute?APIKey="+APIconfigService.APIKey).success(function(data){self.lists=_.indexBy(data,"columnName")}),this.getLists=function(){return self.lists},this.getList=function(listName){return this.lists[listName]}}]),angular.module("ndrApp").directive("decimals",function(){return{require:"ngModel",link:function(scope,elm,attrs,ngModel){function read(){elm.val()>0&&ngModel.$setViewValue(parseFloat(elm.val()).toFixed(attrs.decimals))}ngModel&&(ngModel.$render=function(){return elm.val(ngModel.$viewValue),!0},elm.bind("blur",function(){scope.$apply(read),ngModel.$render()}),read())}}}),angular.module("ndrApp").controller("PatientController",["$scope","$q","$stateParams","$state","$log","$filter","dataService","accountService",function($scope,$q,$stateParams,$state,$log,$filter,dataService,accountService){function populateTableData(){var contacts,keys,table=[],exluded=["contactID","insertedAt","lastUpdatedAt","unitID","optionals"];return $scope.subject?(contacts=angular.copy($scope.subject.contacts).splice(0,5),keys=_.keys(contacts[0]),keys=_.filter(keys,function(key){return-1===_.indexOf(exluded,key)}),_.each(keys,function(key,keyIndex){var attribute=_.find($scope.contactAttributes,{columnName:key}),label=attribute?attribute.question:key,sequence=attribute?attribute.sequence:0;table[keyIndex]={label:label,sequence:sequence,values:[]},_.each(contacts,function(contact){var value=contact[key];_.isNull(value)?value="-":attribute&&attribute.domain&&"Date"===attribute.domain.name?value=$filter("date")(new Date(value),"yyyy-MM-dd"):attribute&&attribute.domain&&attribute.domain.isEnumerated?value=_.find(attribute.domain.domainValues,{code:value}).text:attribute&&attribute.domain&&"Bool"===attribute.domain.name&&(value=value?"Ja":"Nej"),table[keyIndex].values.push(value)})}),$scope.model.data.table=table,void($scope.model.data.tableHeader=_.find(table,{label:"Bes√∂ksdatum"}))):!1}function populateSeriesData(){return $scope.subject?($scope.model.data.trend.hba1c=getSeries("hba1c"),$scope.model.data.trend.bpSystolic=getSeries("bpSystolic"),$scope.model.data.trend.bpDiastolic=getSeries("bpDiastolic"),$scope.model.data.trend.cholesterol=getSeries("cholesterol"),$scope.model.data.trend.triglyceride=getSeries("triglyceride"),$scope.model.data.trend.ldl=getSeries("ldl"),$scope.model.data.trend.hdl=getSeries("hdl"),$scope.model.data.chart.physicalActivity=getLatestValue("physicalActivity"),$scope.model.data.chart.smoking=getLatestValue("smoking"),$scope.model.data.trend.combinedLDLHDL=[{color:"rgba(89,153,218,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"LDL",data:$scope.model.data.trend.ldl},{color:"rgba(26,188,156,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"HDL",data:$scope.model.data.trend.hdl}],$scope.model.data.trend.combinedCholesterol=[{color:"rgba(89,153,218,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"Kolesterol",data:$scope.model.data.trend.cholesterol},{color:"rgba(26,188,156,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"Triglycerider",data:$scope.model.data.trend.triglyceride}],void($scope.model.data.trend.combinedBp=[{color:"rgba(89,153,218,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"V√§rde",data:$scope.model.data.trend.bpSystolic},{color:"rgba(26,188,156,1)",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"V√§rde",data:$scope.model.data.trend.bpDiastolic}])):!1}function populateLatestData(){return $scope.subject?($scope.model.latest.bmi=getLatestValue("bmi"),$scope.model.latest.weight=getLatestValue("weight"),$scope.model.latest.treatment=getLatestValue("treatment"),$scope.model.latest.footRiscCategory=getLatestValue("footRiscCategory"),$scope.model.latest.footExaminationDate=getLatestValue("footExaminationDate"),void _.each($scope.contactAttributes,function(obj){$scope.model.latest[obj.columnName]=getLatestValue(obj.columnName)})):!1}function getSeries(key){var series=[],now=moment();return _.each($scope.subject.contacts,function(obj){var then=moment(obj.contactDate);_.isNumber(obj[key])&&now.diff(then,"years")<=3&&series.push({x:new Date(obj.contactDate),y:obj[key]})}),series.reverse()}function getLatestValue(key){var value,visit=_.find($scope.subject.contacts,function(v){return!_.isNull(v[key])}),attribute=_.find($scope.contactAttributes,{columnName:key});return"diabetesType"===key?{value:"inget v√§rde",date:"inget v√§rde",label:"inget v√§rde"}:"undefined"==typeof visit?{value:"inget v√§rde",date:"inget v√§rde",label:"inget v√§rde"}:(_.isNull(visit[key])||_.isUndefined(visit[key])?value="inget v√§rde":attribute&&attribute.domain&&"Date"===attribute.domain.name?value=$filter("date")(new Date(visit[key]),"yyyy-MM-dd"):attribute&&attribute.domain&&attribute.domain.isEnumerated?value=_.find(attribute.domain.domainValues,{code:visit[key]}).text:attribute&&attribute.domain&&"Bool"===attribute.domain.name&&(value=visit[key]?"Ja":"Nej"),visit?{value:visit[key],date:visit.contactDate,label:value}:{value:"inget v√§rde",date:"inget v√§rde",label:value})}function getPatient(id){$q.all([dataService.getSubjectById(id).then(function(response){return response}),dataService.getContactAttributes().then(function(response){return response})]).then(function(values){$log.debug("Retrieved subject",values[0]),values[0].contacts=_.sortBy(values[0].contacts,"contactDate").reverse(),$scope.subject=values[0],$scope.contactAttributes=values[1]})}$scope.subject=void 0,$scope.subjectID=!1||$stateParams.patientID,$scope.pnrRegex=accountService.helpers.pnrRegex,$scope.backToSearchVisible=$stateParams.backToSearchVisible,$scope.model={data:{trend:{},chart:{gauge:{physicalActivity:{}}}},latest:{},mode:"visual"},$scope.gotoReport=function(subjectID){$state.go("main.account.report",{patientID:subjectID})},$scope.checkFootDate=function(d){if(!d)return!1;var now=moment(),then=moment(d.label),diff=now.diff(then,"days");return diff>365?!0:!1},$scope.print=function(){window.print()},$scope.calculateAge=function(birthDate){return moment().diff(birthDate,"years")},$scope.getDiabetesType=function(id){if(!$scope.contactAttributes)return!1;var attribute=_.find($scope.contactAttributes,{columnName:"diabetesType"});return _.find(attribute.domain.domainValues,{code:id}).text},$scope.getSubject=function(){$scope.socialnumber&&dataService.getSubjectBySocialNumber($scope.socialnumber).then(function(subject){getPatient(subject.subjectID)})},$scope.$watchCollection("subject",function(){populateSeriesData(),populateTableData(),populateLatestData()}),$scope.subjectID&&getPatient($scope.subjectID)}]),angular.module("ndrApp").controller("PatientPrintController",["$scope","$q","$stateParams","$state","$log","$filter","dataService","accountService",function($scope,$q,$stateParams,$state,$log,$filter,dataService,accountService){function populateTableData(){var contacts,keys,table=[],included=["contactDate","hba1c","weight","height"];return $scope.subject?(contacts=angular.copy($scope.subject.contacts).splice(0,5),keys=_.keys(contacts[0]),keys=_.filter(keys,function(key){return-1!==_.indexOf(included,key)}),_.each(keys,function(key,keyIndex){var attribute=_.find($scope.contactAttributes,{columnName:key}),label=attribute?attribute.question:key,sequence=attribute?attribute.sequence:0;table[keyIndex]={label:label,sequence:sequence,values:[]},_.each(contacts,function(contact){var value=contact[key];_.isNull(value)?value="-":attribute&&attribute.domain&&"Date"===attribute.domain.name?value=$filter("date")(new Date(value),"yyyy-MM-dd"):attribute&&attribute.domain&&attribute.domain.isEnumerated?value=_.find(attribute.domain.domainValues,{code:value}).text:attribute&&attribute.domain&&"Bool"===attribute.domain.name&&(value=value?"Ja":"Nej"),table[keyIndex].values.push(value)})}),$scope.model.data.table=table,void($scope.model.data.tableHeader=_.find(table,{label:"Bes√∂ksdatum"}))):!1}function populateSeriesData(){return $scope.subject?($scope.model.data.trend.hba1c=getSeries("hba1c"),$scope.model.data.trend.bpSystolic=getSeries("bpSystolic"),$scope.model.data.trend.bpDiastolic=getSeries("bpDiastolic"),$scope.model.data.trend.cholesterol=getSeries("cholesterol"),$scope.model.data.trend.triglyceride=getSeries("triglyceride"),$scope.model.data.trend.ldl=getSeries("ldl"),$scope.model.data.trend.hdl=getSeries("hdl"),$scope.model.data.chart.physicalActivity=getLatestValue("physicalActivity"),$scope.model.data.chart.smoking=getLatestValue("smoking"),$scope.model.data.trend.combinedLDLHDL=[{color:"black",symbol:"circle",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"LDL",data:$scope.model.data.trend.ldl},{color:"black",symbol:"square",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"HDL",data:$scope.model.data.trend.hdl}],$scope.model.data.trend.combinedCholesterol=[{color:"black",symbol:"circle",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"Kolesterol",data:$scope.model.data.trend.cholesterol},{color:"black",symbol:"square",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"Triglycerider",data:$scope.model.data.trend.triglyceride}],void($scope.model.data.trend.combinedBp=[{color:"black",symbol:"circle",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(89,153,218,0.2)"],[1,"rgba(89,153,218,0.2)"]]},name:"Systoliskt",data:$scope.model.data.trend.bpSystolic},{color:"black",symbol:"square",fillColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"rgba(26,188,156,0.2)"],[1,"rgba(26,188,156,0.2)"]]},name:"Diastoliskt",data:$scope.model.data.trend.bpDiastolic}])):!1}function populateLatestData(){return $scope.subject?($scope.model.latest.bmi=getLatestValue("bmi"),$scope.model.latest.weight=getLatestValue("weight"),$scope.model.latest.treatment=getLatestValue("treatment"),$scope.model.latest.footRiscCategory=getLatestValue("footRiscCategory"),$scope.model.latest.footExaminationDate=getLatestValue("footExaminationDate"),void _.each($scope.contactAttributes,function(obj){$scope.model.latest[obj.columnName]=getLatestValue(obj.columnName)})):!1}function getSeries(key){var series=[],now=moment();return _.each($scope.subject.contacts,function(obj){var then=moment(obj.contactDate);_.isNumber(obj[key])&&now.diff(then,"years")<=3&&series.push({x:new Date(obj.contactDate),y:obj[key]})}),series.reverse()}function getLatestValue(key){var value,visit=_.find($scope.subject.contacts,function(v){return!_.isNull(v[key])}),attribute=_.find($scope.contactAttributes,{columnName:key});return"diabetesType"===key?{value:"inget v√§rde",date:"inget v√§rde",label:"inget v√§rde"}:"undefined"==typeof visit?{value:"inget v√§rde",date:"inget v√§rde",label:"inget v√§rde"}:(_.isNull(visit[key])||_.isUndefined(visit[key])?value="inget v√§rde":attribute&&attribute.domain&&"Date"===attribute.domain.name?value=$filter("date")(new Date(visit[key]),"yyyy-MM-dd"):attribute&&attribute.domain&&attribute.domain.isEnumerated?value=_.find(attribute.domain.domainValues,{code:visit[key]}).text:attribute&&attribute.domain&&"Bool"===attribute.domain.name&&(value=visit[key]?"Ja":"Nej"),visit?{value:visit[key],date:visit.contactDate,label:value}:{value:"inget v√§rde",date:"inget v√§rde",label:value})}function getPatient(id){$q.all([dataService.getSubjectById(id).then(function(response){return response}),dataService.getContactAttributes().then(function(response){return response})]).then(function(values){$log.debug("Retrieved subject",values[0]),values[0].contacts=_.sortBy(values[0].contacts,"contactDate").reverse(),$scope.subject=values[0],$scope.contactAttributes=values[1]})}$scope.subject=void 0,$scope.subjectID=!1||$stateParams.patientID,$scope.pnrRegex=accountService.helpers.pnrRegex,$scope.backToSearchVisible=$stateParams.backToSearchVisible,$scope.model={data:{trend:{},chart:{gauge:{physicalActivity:{}}}},latest:{},mode:"visual"},$scope.gotoReport=function(subjectID){$state.go("main.account.report",{patientID:subjectID})},$scope.checkFootDate=function(d){if(!d)return!1;var now=moment(),then=moment(d.label),diff=now.diff(then,"days");return diff>365?!0:!1},$scope.print=function(){window.print()},$scope.calculateAge=function(birthDate){return moment().diff(birthDate,"years")},$scope.getDiabetesType=function(id){if(!$scope.contactAttributes)return!1;var attribute=_.find($scope.contactAttributes,{columnName:"diabetesType"});return _.find(attribute.domain.domainValues,{code:id}).text},$scope.getSubject=function(){$scope.socialnumber&&dataService.getSubjectBySocialNumber($scope.socialnumber).then(function(subject){getPatient(subject.subjectID)})},$scope.$watchCollection("subject",function(){populateSeriesData(),populateTableData(),populateLatestData()}),$scope.subjectID&&getPatient($scope.subjectID)}]),angular.module("ndrApp").controller("HomeController",["$scope","dataService","accountService",function($scope,dataService,accountService){$scope.model={listModelNews:{},autocompleteModel:{selected:void 0,options:dataService.data.preparedGeoList}},$scope.accountModel=accountService.accountModel;var query=dataService.queryFactory({ID:[202,221],level:0});dataService.getStats(query).then(function(data){$scope.model.stats=data}),dataService.getList("news").then(function(data){data.sort(function(a,b){return new Date(b.publishedFrom)-new Date(a.publishedFrom)}),data=data.splice(0,4),angular.forEach(data,function(item){item.link="#/nyheter/"+item.newsID,item.categoryNames=[],angular.forEach(item.categories,function(category){item.categoryNames.push(category.name)})}),$scope.model.listModelNews={data:data},setTimeout(function(){jQuery(".Intro--equalHeights").matchHeight(!0)},100)})}]),angular.module("ndrApp").controller("FilterUnitsController",["$scope","dataService",function($scope,dataService){function filterUnits(postalCode){var filtered=[];for(postalCode=postalCode.replace(/\s+/g,""),$scope.triedFuzzy=!1;!filtered.length&&postalCode.length;)(!$scope.triedFuzzy||$scope.triedFuzzy&&postalCode.length>2)&&(filtered=getFilteredUnits(postalCode)),filtered.length||(postalCode=postalCode.slice(0,-1),$scope.triedFuzzy=!0,$scope.fuzzySuccess=postalCode.length>2?!0:!1);$scope.filteredUnits=filtered}function getFilteredUnits(postalCode){return _.take(_.filter(units,function(unit){return 0===unit.postalCode.replace(/\s+/g,"").indexOf(postalCode)}),10)}var units=[];$scope.filteredUnits=[],$scope.$watch("postalCode",function(postalCode){units.length&&filterUnits(postalCode)}),dataService.getUnits(function(data){units=data})}]);